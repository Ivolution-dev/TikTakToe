
STM32F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00009420  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08009620  08009620  0000a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d64  08009d64  0000b154  2**0
                  CONTENTS
  4 .ARM          00000008  08009d64  08009d64  0000ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d6c  08009d6c  0000b154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009d6c  08009d6c  0000ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08009d80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000158  08009ed4  0000b158  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08009ed4  0000b5fc  2**0
=======
  1 .text         000092ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  08009b70  08009b70  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b70  08009b70  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08009b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000158  08009cd8  00020158  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08009cd8  000205fc  2**0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258b7  00000000  00000000  0000b182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1e  00000000  00000000  00030a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104f  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025316  00000000  00000000  000349b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e416  00000000  00000000  00059ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d82ef  00000000  00000000  000680e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001403d2  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 20 .debug_frame  00006a0c  00000000  00000000  00140418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c9  00000000  00000000  00146e24  2**0
=======
 13 .debug_info   000257ca  00000000  00000000  000201c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a26  00000000  00000000  0004598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  000473b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001042  00000000  00000000  000488b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025292  00000000  00000000  000498fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1fc  00000000  00000000  0006eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8120  00000000  00000000  0007bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069b0  00000000  00000000  00153ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  0015a858  2**0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000158 	.word	0x20000158
 800021c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000220:	08009608 	.word	0x08009608
=======
 8000220:	08009494 	.word	0x08009494
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000015c 	.word	0x2000015c
<<<<<<< HEAD
 800023c:	08009608 	.word	0x08009608
 8000240:	08009d80 	.word	0x08009d80
=======
 800023c:	08009494 	.word	0x08009494
 8000240:	08009b84 	.word	0x08009b84
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
 8000244:	20000000 	.word	0x20000000
 8000248:	20000154 	.word	0x20000154
 800024c:	20000158 	.word	0x20000158
 8000250:	200005fc 	.word	0x200005fc

08000254 <save_context>:
.type    save_context, %function
.global load_context
.type    load_context, %function

save_context:
               MRS    r0, msp
 8000254:	f3ef 8008 	mrs	r0, MSP
               STMDB  r0!, {r4-r11}
 8000258:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 800025c:	f380 8808 	msr	MSP, r0
               VPUSH.32  {s0-s15}
 8000260:	ed2d 0a10 	vpush	{s0-s15}
               VPUSH.32  {s16-s31}
 8000264:	ed2d 8a10 	vpush	{s16-s31}
               MRS    r0, msp
 8000268:	f3ef 8008 	mrs	r0, MSP
               BX     lr
 800026c:	4770      	bx	lr

0800026e <load_context>:

load_context:
               MSR    msp, r0
 800026e:	f380 8808 	msr	MSP, r0
               VPOP.32  {s16-s31}
 8000272:	ecbd 8a10 	vpop	{s16-s31}
               VPOP.32  {s0-s15}
 8000276:	ecbd 0a10 	vpop	{s0-s15}
               MRS    r0, msp
 800027a:	f3ef 8008 	mrs	r0, MSP
               LDMFD  r0!, {r4-r11}
 800027e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 8000282:	f380 8808 	msr	MSP, r0
               BX     lr
 8000286:	4770      	bx	lr

08000288 <strcmp>:
 8000288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800028c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000290:	2a01      	cmp	r2, #1
 8000292:	bf28      	it	cs
 8000294:	429a      	cmpcs	r2, r3
 8000296:	d0f7      	beq.n	8000288 <strcmp>
 8000298:	1ad0      	subs	r0, r2, r3
 800029a:	4770      	bx	lr

0800029c <strlen>:
 800029c:	4603      	mov	r3, r0
 800029e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a2:	2a00      	cmp	r2, #0
 80002a4:	d1fb      	bne.n	800029e <strlen+0x2>
 80002a6:	1a18      	subs	r0, r3, r0
 80002a8:	3801      	subs	r0, #1
 80002aa:	4770      	bx	lr
 80002ac:	0000      	movs	r0, r0
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	2b00      	cmp	r3, #0
 8000360:	db0b      	blt.n	800037a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 021f 	and.w	r2, r3, #31
 8000368:	4907      	ldr	r1, [pc, #28]	@ (8000388 <__NVIC_EnableIRQ+0x38>)
 800036a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036e:	095b      	lsrs	r3, r3, #5
 8000370:	2001      	movs	r0, #1
 8000372:	fa00 f202 	lsl.w	r2, r0, r2
 8000376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e100 	.word	0xe000e100

0800038c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000390:	f3bf 8f4f 	dsb	sy
}
 8000394:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <__NVIC_SystemReset+0x24>)
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800039e:	4904      	ldr	r1, [pc, #16]	@ (80003b0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <__NVIC_SystemReset+0x28>)
 80003a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80003a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <__NVIC_SystemReset+0x20>
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	05fa0004 	.word	0x05fa0004

080003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>:
    /*!
    \class Task

    \brief Base class for timer interrupt tasks
    */
    class Task : public Std::Sequence<Task>::Item
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3304      	adds	r3, #4
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f005 f9d1 	bl	800576e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>
 80003cc:	4a03      	ldr	r2, [pc, #12]	@ (80003dc <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev+0x24>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 80003dc:	08009bb0 	.word	0x08009bb0
=======
 80003dc:	080099bc 	.word	0x080099bc
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080003e0 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh>:
    {
      public:
      BYTE *ptr;
      DWORD size;

      SectorInfo( BYTE sector )
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	70fb      	strb	r3, [r7, #3]
      {
        switch( sector )
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	2b0b      	cmp	r3, #11
 80003f0:	d87c      	bhi.n	80004ec <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x10c>
 80003f2:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x18>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000429 	.word	0x08000429
 80003fc:	0800043b 	.word	0x0800043b
 8000400:	0800044b 	.word	0x0800044b
 8000404:	0800045b 	.word	0x0800045b
 8000408:	0800046b 	.word	0x0800046b
 800040c:	0800047b 	.word	0x0800047b
 8000410:	0800048b 	.word	0x0800048b
 8000414:	0800049b 	.word	0x0800049b
 8000418:	080004ab 	.word	0x080004ab
 800041c:	080004bd 	.word	0x080004bd
 8000420:	080004cd 	.word	0x080004cd
 8000424:	080004dd 	.word	0x080004dd
        {
          case  0: ptr = (BYTE*)0x08000000; size = 0x08000; break; //  32k
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	e05f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  1: ptr = (BYTE*)0x08008000; size = 0x08000; break; //  32k
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a32      	ldr	r2, [pc, #200]	@ (8000508 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x128>)
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	e057      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  2: ptr = (BYTE*)0x08010000; size = 0x08000; break; //  32k
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a2f      	ldr	r2, [pc, #188]	@ (800050c <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x12c>)
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	e04f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  3: ptr = (BYTE*)0x08018000; size = 0x08000; break; //  32k
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a2c      	ldr	r2, [pc, #176]	@ (8000510 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x130>)
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	e047      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  4: ptr = (BYTE*)0x08020000; size = 0x20000; break; // 128k
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a29      	ldr	r2, [pc, #164]	@ (8000514 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x134>)
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	e03f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  5: ptr = (BYTE*)0x08040000; size = 0x40000; break; // 256k
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a26      	ldr	r2, [pc, #152]	@ (8000518 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x138>)
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	e037      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  6: ptr = (BYTE*)0x08080000; size = 0x40000; break; // 256k
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a23      	ldr	r2, [pc, #140]	@ (800051c <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x13c>)
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	e02f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  7: ptr = (BYTE*)0x080C0000; size = 0x40000; break; // 256k
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a20      	ldr	r2, [pc, #128]	@ (8000520 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x140>)
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	e027      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  8: ptr = (BYTE*)0x08100000; size = 0x40000; break; // 256k
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	e01e      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  9: ptr = (BYTE*)0x08140000; size = 0x40000; break; // 256k
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a19      	ldr	r2, [pc, #100]	@ (8000524 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x144>)
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	e016      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case 10: ptr = (BYTE*)0x08180000; size = 0x40000; break; // 256k
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x148>)
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	e00e      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case 11: ptr = (BYTE*)0x081C0000; size = 0x40000; break; // 256k
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a13      	ldr	r2, [pc, #76]	@ (800052c <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x14c>)
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	e006      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          default: ptr = (BYTE*)NULL;       size = 0;       break;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	bf00      	nop
        }
      }
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	08008000 	.word	0x08008000
 800050c:	08010000 	.word	0x08010000
 8000510:	08018000 	.word	0x08018000
 8000514:	08020000 	.word	0x08020000
 8000518:	08040000 	.word	0x08040000
 800051c:	08080000 	.word	0x08080000
 8000520:	080c0000 	.word	0x080c0000
 8000524:	08140000 	.word	0x08140000
 8000528:	08180000 	.word	0x08180000
 800052c:	081c0000 	.word	0x081c0000

08000530 <_ZN9EmbSysLib2Hw14DisplayGraphic7refreshEv>:

    //---------------------------------------------------------------
    /*! Refresh the display.
        Some display need a refresh to display new content
    */
    virtual void refresh( void )
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    {
    }
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <_ZN9EmbSysLib2Hw14DisplayGraphic8getWidthEv>:

    //---------------------------------------------------------------
    /*! Get horizontal display size
        \return Number of pixel
    */
    virtual WORD getWidth( void )
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    {
      return( Hsize );
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	8a1b      	ldrh	r3, [r3, #16]
    }
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN9EmbSysLib2Hw14DisplayGraphic9getHeightEv>:

    //---------------------------------------------------------------
    /*! Get vertical display size
        \return Number of pixel
    */
    virtual WORD getHeight( void )
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
		{
			return( Vsize );
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8a5b      	ldrh	r3, [r3, #18]
		}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>:
        \param red
        \param green
        \param blue
        \return Color code
    */
    static WORD RGB2color( BYTE red, BYTE green, BYTE blue )
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	460b      	mov	r3, r1
 8000580:	71bb      	strb	r3, [r7, #6]
 8000582:	4613      	mov	r3, r2
 8000584:	717b      	strb	r3, [r7, #5]
    {
      return(    ((blue  & 0xF8) >> 3)  // 5 bit,  0.. 4
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b21a      	sxth	r2, r3
               | ((green & 0xFC) << 3)  // 6 bit,  5..10
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	b21b      	sxth	r3, r3
 8000594:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21a      	sxth	r2, r3
               | ((red   & 0xF8) << 8)  // 5 bit, 11..15
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b219      	sxth	r1, r3
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh+0x48>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b21b      	sxth	r3, r3
             );
 80005ae:	b29b      	uxth	r3, r3
    }
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	fffff800 	.word	0xfffff800

080005c0 <_ZN9EmbSysLib3Dev7Digital3setEv>:
    virtual void set( bool value );

    //---------------------------------------------------------------
    /*! Set digital output to logic level 'true'
    */
    virtual void set( void )
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    {
      set( 1 );
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3304      	adds	r3, #4
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	4798      	blx	r3
    }
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_ZN9EmbSysLib3Dev7Digital3clrEv>:

    //---------------------------------------------------------------
    /*! Clear digital output to logic level 'false'
    */
    virtual void clr( void )
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
    {
      set( 0 );
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3304      	adds	r3, #4
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2100      	movs	r1, #0
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	4798      	blx	r3
    }
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_ZN9EmbSysLib3Dev7Digital6toggleEv>:

    //---------------------------------------------------------------
    /*! Invert digital output
    */
    virtual void toggle( void )
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    {
      set( !valueOut );
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7952      	ldrb	r2, [r2, #5]
 8000610:	f082 0201 	eor.w	r2, r2, #1
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	4798      	blx	r3
    }
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZN9EmbSysLib3Dev7Digital8getEventEv>:

    //---------------------------------------------------------------
    /*! Read input state and compare with previous state
        \return Event (NONE, ACTIVATED or RELEASED)
    */
    virtual Event getEvent( void )
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    {
      bool valueInLast = valueIn;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	73fb      	strb	r3, [r7, #15]
      valueIn = get();
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3314      	adds	r3, #20
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	4798      	blx	r3
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	711a      	strb	r2, [r3, #4]
      if( valueIn != valueInLast )
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	429a      	cmp	r2, r3
 800064e:	d007      	beq.n	8000660 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3c>
      {
        return( (valueIn)?ACTIVATED:RELEASED );
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x38>
 8000658:	2301      	movs	r3, #1
 800065a:	e002      	b.n	8000662 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
 800065c:	2302      	movs	r3, #2
 800065e:	e000      	b.n	8000662 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
      }
      return( NONE );
 8000660:	2300      	movs	r3, #0
    }
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZN9EmbSysLib3Dev7DigitalaSEb>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param value Logic level of digital output
        \return value
    */
    virtual bool operator=( bool value )
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	70fb      	strb	r3, [r7, #3]
    {
      set( value );
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3304      	adds	r3, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	4611      	mov	r1, r2
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	4798      	blx	r3
      return( value );
 8000686:	78fb      	ldrb	r3, [r7, #3]
    }
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <_ZN9EmbSysLib3Dev7DigitalaSERS1_>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param x Reference to an Digital object
        \return Logic input level
    */
    virtual bool operator=( Digital &x)
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
    {
      set( x.get() );
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3304      	adds	r3, #4
 80006a0:	681c      	ldr	r4, [r3, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3314      	adds	r3, #20
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6838      	ldr	r0, [r7, #0]
 80006ac:	4798      	blx	r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	47a0      	blx	r4
      return( valueOut );
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795b      	ldrb	r3, [r3, #5]
    }
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <_ZN9EmbSysLib3Dev7DigitalcvbEv>:

    //---------------------------------------------------------------
    /*! Get the input state
        \return Digital input state (logic level)
    */
    virtual operator bool( void )
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
    {
      return( get() );
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3314      	adds	r3, #20
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	4798      	blx	r3
 80006d6:	4603      	mov	r3, r0
    }
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>:
  enableInterrupt();
}

//-------------------------------------------------------------------
void System::disableInterrupt( void )
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  __disable_irq();
  cntInterrupt++;
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x20>)
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000174 	.word	0x20000174

08000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>:

//-------------------------------------------------------------------
void System::enableInterrupt( void )
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  if( cntInterrupt > 0 )
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x18>
  {
    cntInterrupt--;
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800071a:	701a      	strb	r2, [r3, #0]
  }
  if( cntInterrupt == 0 )
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8000724:	b662      	cpsie	i
}
 8000726:	bf00      	nop
  {
     __enable_irq();
  }
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000174 	.word	0x20000174

08000738 <_ZN9EmbSysLib2Hw6System5resetEv>:
  IWDG->KR  = 0xAAAA;
}

//-------------------------------------------------------------------
void System::reset( void )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800073c:	f3bf 8f4f 	dsb	sy
}
 8000740:	bf00      	nop
  __DSB();
  *((unsigned long *)(0x2000FFF0)) = 0xDEADBEEF;
 8000742:	4b02      	ldr	r3, [pc, #8]	@ (800074c <_ZN9EmbSysLib2Hw6System5resetEv+0x14>)
 8000744:	4a02      	ldr	r2, [pc, #8]	@ (8000750 <_ZN9EmbSysLib2Hw6System5resetEv+0x18>)
 8000746:	601a      	str	r2, [r3, #0]
  NVIC_SystemReset();
 8000748:	f7ff fe20 	bl	800038c <__NVIC_SystemReset>
 800074c:	2000fff0 	.word	0x2000fff0
 8000750:	deadbeef 	.word	0xdeadbeef
 8000754:	00000000 	.word	0x00000000

08000758 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt>:

#pragma GCC push_options
#pragma GCC optimize ("-O0")
//-------------------------------------------------------------------
void System::delayMicroSec( unsigned short delay )
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
  //! \todo check calibration
  // Calibrated at delayMilliSec( 1000 )
  // Calibrated with System::delayMilliSec( 1000 ), f_clk = 200 MHz, no interrupts

  unsigned steps = 0.499E-6*system_PCLK*delay;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800076c:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80007a0 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x48>
 8000770:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee17 3a90 	vmov	r3, s15
 800077c:	60fb      	str	r3, [r7, #12]
  for( ; steps > 0; steps-- )
 800077e:	e003      	b.n	8000788 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x30>
  {
    asm volatile("nop");
 8000780:	bf00      	nop
  for( ; steps > 0; steps-- )
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3b01      	subs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f8      	bne.n	8000780 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x28>
  }
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	f3af 8000 	nop.w
 80007a0:	33333333 	.word	0x33333333
 80007a4:	4058f333 	.word	0x4058f333

080007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>:

//-------------------------------------------------------------------
void System::delayMilliSec( unsigned short delay )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  for( ; delay > 0; delay-- )
 80007b2:	e006      	b.n	80007c2 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt+0x1a>
  {
    delayMicroSec(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f7ff ffce 	bl	8000758 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt>
  for( ; delay > 0; delay-- )
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	3b01      	subs	r3, #1
 80007c0:	80fb      	strh	r3, [r7, #6]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f5      	bne.n	80007b4 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt+0xc>
  }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <SystemInit>:
//
// SystemInit
//
//*******************************************************************
void SystemInit( void )
{
 80007d4:	b480      	push	{r7}
 80007d6:	b091      	sub	sp, #68	@ 0x44
 80007d8:	af00      	add	r7, sp, #0
  // Set FPU
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    // System Control Block (SCB), Coprocessor Access Control Register
    SCB->CPACR |=   (3UL << 10*2)  // CP10: Full access
 80007da:	4ba1      	ldr	r3, [pc, #644]	@ (8000a60 <SystemInit+0x28c>)
 80007dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007e0:	4a9f      	ldr	r2, [pc, #636]	@ (8000a60 <SystemInit+0x28c>)
 80007e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

//	SCB_DisableDCache();

  // Clock control register
  RCC->CR |= RCC_CR_HSION;    //! \todo why is it switched on here?
 80007ea:	4b9e      	ldr	r3, [pc, #632]	@ (8000a64 <SystemInit+0x290>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a9d      	ldr	r2, [pc, #628]	@ (8000a64 <SystemInit+0x290>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR = 0x00000000;       // reset ...
 80007f6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a64 <SystemInit+0x290>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]

  // Clock control register
  RCC->CR &= ~(   RCC_CR_PLLON  // reset ...
 80007fc:	4b99      	ldr	r3, [pc, #612]	@ (8000a64 <SystemInit+0x290>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4998      	ldr	r1, [pc, #608]	@ (8000a64 <SystemInit+0x290>)
 8000802:	4b99      	ldr	r3, [pc, #612]	@ (8000a68 <SystemInit+0x294>)
 8000804:	4013      	ands	r3, r2
 8000806:	600b      	str	r3, [r1, #0]
                | RCC_CR_CSSON
                | RCC_CR_HSEON );

  // PLL configuration register
  RCC->PLLCFGR = 0x24003010;   // Reset value,
 8000808:	4b96      	ldr	r3, [pc, #600]	@ (8000a64 <SystemInit+0x290>)
 800080a:	4a98      	ldr	r2, [pc, #608]	@ (8000a6c <SystemInit+0x298>)
 800080c:	605a      	str	r2, [r3, #4]
                               // see Reference manual

  // Clock control register
  RCC->CR &= ~(RCC_CR_HSEBYP); // reset ...
 800080e:	4b95      	ldr	r3, [pc, #596]	@ (8000a64 <SystemInit+0x290>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a94      	ldr	r2, [pc, #592]	@ (8000a64 <SystemInit+0x290>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000818:	6013      	str	r3, [r2, #0]

  // Clock interrupt register
  RCC->CIR = 0;                // Disable all interrupts
 800081a:	4b92      	ldr	r3, [pc, #584]	@ (8000a64 <SystemInit+0x290>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]


  // Flash Acess Control Register
  FLASH->ACR =  // FLASH_ACR_ICEN          // Instruction cache enable
 8000820:	4b93      	ldr	r3, [pc, #588]	@ (8000a70 <SystemInit+0x29c>)
 8000822:	2207      	movs	r2, #7
 8000824:	601a      	str	r2, [r3, #0]
               //| FLASH_ACR_DCEN          // Data cache enable
               0| FLASH_ACR_LATENCY_7WS;  // Latency: 5 wait states

  // Advanced Peripheral Bus Enable Register
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;    // Power interface clock: enable
 8000826:	4b8f      	ldr	r3, [pc, #572]	@ (8000a64 <SystemInit+0x290>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a8e      	ldr	r2, [pc, #568]	@ (8000a64 <SystemInit+0x290>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
//    PWR->CR   |= (1<<14);                 // Regulator voltage scaling output selection:
                                        // VOS=1: Scale 1 mode

  // Clock Configuration Register
  //! \todo Check clock configuration
  RCC->CFGR |=   RCC_CFGR_HPRE_DIV1     // AHB prescaler:                   HCLK  = SYSCLK
 8000832:	4b8c      	ldr	r3, [pc, #560]	@ (8000a64 <SystemInit+0x290>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	4a8b      	ldr	r2, [pc, #556]	@ (8000a64 <SystemInit+0x290>)
 8000838:	f443 4334 	orr.w	r3, r3, #46080	@ 0xb400
 800083c:	6093      	str	r3, [r2, #8]
  //
  //---- HSE --------------------------------------------------------
  #if OSCSRC == HSE || OSCSRC == HSE_BYPASS

      #if OSCSRC == HSE
        RCC->CR |= (RCC_CR_HSEON );
 800083e:	4b89      	ldr	r3, [pc, #548]	@ (8000a64 <SystemInit+0x290>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a88      	ldr	r2, [pc, #544]	@ (8000a64 <SystemInit+0x290>)
 8000844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000848:	6013      	str	r3, [r2, #0]
      #else
        RCC->CR |= (RCC_CR_HSEON | RCC_CR_HSEBYP);
      #endif
      const DWORD pll_Src = RCC_PLLCFGR_PLLSRC_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      while( !(RCC->CR & RCC_CR_HSERDY) ); // wait for HSE ready
 8000850:	bf00      	nop
 8000852:	4b84      	ldr	r3, [pc, #528]	@ (8000a64 <SystemInit+0x290>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f4      	bne.n	8000852 <SystemInit+0x7e>
  #undef HSI


  //! \todo Check code
  // Clock control register
  RCC->CR |= RCC_CR_HSION;   // Need HSION in ADC (only?)
 8000868:	4b7e      	ldr	r3, [pc, #504]	@ (8000a64 <SystemInit+0x290>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a7d      	ldr	r2, [pc, #500]	@ (8000a64 <SystemInit+0x290>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
  //-----------------------------------------------------------------
  // calculate PLL
  // f_in  =   1 MHz => M = f_osc/f_in
  // f_out = 400 MHz => N = f_out/f_in

  const DWORD pll_M = (OSCFREQ)/1000UL;  // -> f_in      =     1 MHz
 8000874:	2319      	movs	r3, #25
 8000876:	63bb      	str	r3, [r7, #56]	@ 0x38
  const DWORD pll_N = 400;               // -> f_out     = 400*1 MHz
 8000878:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800087c:	637b      	str	r3, [r7, #52]	@ 0x34

  //-----------------------------------------------------------------
  // calculate clock divider PLL
  const DWORD pll_P = 2;                 // -> f_pllclk  = 400/2 MHz = 200  MHz
 800087e:	2302      	movs	r3, #2
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
  const DWORD pll_Q = 8;                 // -> f_pll48ck = 400/8 MHz =  50  MHz
 8000882:	2308      	movs	r3, #8
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const DWORD pll_R = 7;                 // -> f_plldsi  = 400/7 MHz =  57.1 MHz
 8000886:	2307      	movs	r3, #7
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28

  // PLL configuration register
  RCC->PLLCFGR =   pll_Src
 800088a:	4b76      	ldr	r3, [pc, #472]	@ (8000a64 <SystemInit+0x290>)
 800088c:	4a79      	ldr	r2, [pc, #484]	@ (8000a74 <SystemInit+0x2a0>)
 800088e:	605a      	str	r2, [r3, #4]
                 | ((pll_P/2-1) << 16)
                 | ( pll_Q      << 24)
                 | ( pll_R      << 28);

  // Clock control register
  RCC->CR |= RCC_CR_PLLON;            // PLL enable: ON
 8000890:	4b74      	ldr	r3, [pc, #464]	@ (8000a64 <SystemInit+0x290>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a73      	ldr	r2, [pc, #460]	@ (8000a64 <SystemInit+0x290>)
 8000896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800089a:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLRDY) );// Wait until PLL is ready
 800089c:	bf00      	nop
 800089e:	4b71      	ldr	r3, [pc, #452]	@ (8000a64 <SystemInit+0x290>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f4      	bne.n	800089e <SystemInit+0xca>

  // Clock Configuration Register
  RCC->CFGR &= ~(RCC_CFGR_SW);          // reset system clock switch
 80008b4:	4b6b      	ldr	r3, [pc, #428]	@ (8000a64 <SystemInit+0x290>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a6a      	ldr	r2, [pc, #424]	@ (8000a64 <SystemInit+0x290>)
 80008ba:	f023 0303 	bic.w	r3, r3, #3
 80008be:	6093      	str	r3, [r2, #8]
  RCC->CFGR |=  (RCC_CFGR_SW_PLL);      // System clock switch:
 80008c0:	4b68      	ldr	r3, [pc, #416]	@ (8000a64 <SystemInit+0x290>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4a67      	ldr	r2, [pc, #412]	@ (8000a64 <SystemInit+0x290>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	6093      	str	r3, [r2, #8]
                                        //  PLL selected as system clock

  // Wait for system clock switch is ready
  while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 80008cc:	bf00      	nop
 80008ce:	4b65      	ldr	r3, [pc, #404]	@ (8000a64 <SystemInit+0x290>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 030c 	and.w	r3, r3, #12
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f4      	bne.n	80008ce <SystemInit+0xfa>
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //-----------------------------------------------------------------
  // calculate PLLSAI
  // f_in  =   1 MHz
  // f_out = 384 MHz => N = f_out/f_in
  const DWORD pllsai_N = 384;
 80008e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24

  //-----------------------------------------------------------------
  // calculate clock divider PLLSAI
	const DWORD pllsai_P = 8;	// -> f_pllsaip = 384/8 MHz = 48 MHz (USB)
 80008ea:	2308      	movs	r3, #8
 80008ec:	623b      	str	r3, [r7, #32]
	const DWORD pllsai_Q = 4; // -> f_pllsaiq = 384/4 MHz = 96 MHz (default)
 80008ee:	2304      	movs	r3, #4
 80008f0:	61fb      	str	r3, [r7, #28]
	const DWORD pllsai_R = 5;	// -> f_pllsaip = 384/5 MHz = 76.8 MHz (LCD-TFT)
 80008f2:	2305      	movs	r3, #5
 80008f4:	61bb      	str	r3, [r7, #24]

  RCC->CR &= ~RCC_CR_PLLSAION;         // PLLSAI disable   ???
 80008f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a64 <SystemInit+0x290>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a5a      	ldr	r2, [pc, #360]	@ (8000a64 <SystemInit+0x290>)
 80008fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6013      	str	r3, [r2, #0]
  while( RCC->CR & RCC_CR_PLLSAIRDY ); // Wait until disabled ????
 8000902:	bf00      	nop
 8000904:	4b57      	ldr	r3, [pc, #348]	@ (8000a64 <SystemInit+0x290>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f4      	bne.n	8000904 <SystemInit+0x130>

  RCC->PLLSAICFGR =    ( pllsai_N      <<  6)
 800091a:	4b52      	ldr	r3, [pc, #328]	@ (8000a64 <SystemInit+0x290>)
 800091c:	4a56      	ldr	r2, [pc, #344]	@ (8000a78 <SystemInit+0x2a4>)
 800091e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                     | ((pllsai_P/2-1) << 16)
                     | ( pllsai_Q      << 24)
                     | ( pllsai_R      << 28);

  RCC->DCKCFGR1 = (RCC->DCKCFGR1 & ~RCC_DCKCFGR1_PLLSAIDIVR)  | 0/*RCC_PLLSAIDIVR_2*/;
 8000922:	4b50      	ldr	r3, [pc, #320]	@ (8000a64 <SystemInit+0x290>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000928:	4a4e      	ldr	r2, [pc, #312]	@ (8000a64 <SystemInit+0x290>)
 800092a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800092e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  RCC->DCKCFGR2 |= RCC_DCKCFGR2_CK48MSEL; // PLLSAI is 48Mhz-USB clock source
 8000932:	4b4c      	ldr	r3, [pc, #304]	@ (8000a64 <SystemInit+0x290>)
 8000934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000938:	4a4a      	ldr	r2, [pc, #296]	@ (8000a64 <SystemInit+0x290>)
 800093a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800093e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* Enable PLLSAI Clock */
  RCC->CR |= RCC_CR_PLLSAION;
 8000942:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <SystemInit+0x290>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <SystemInit+0x290>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLSAIRDY) );
 800094e:	bf00      	nop
 8000950:	4b44      	ldr	r3, [pc, #272]	@ (8000a64 <SystemInit+0x290>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f4      	bne.n	8000950 <SystemInit+0x17c>
  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  // System Control Block
  SCB->VTOR = FLASH_BASE | 0x00; // Vector Table Relocation in internal FLASH
 8000966:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <SystemInit+0x28c>)
 8000968:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800096c:	609a      	str	r2, [r3, #8]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800096e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <SystemInit+0x28c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000976:	f3bf 8f4f 	dsb	sy
}
 800097a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800097c:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <SystemInit+0x28c>)
 800097e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000982:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	0b5b      	lsrs	r3, r3, #13
 8000988:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800098c:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	08db      	lsrs	r3, r3, #3
 8000992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000996:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	015a      	lsls	r2, r3, #5
 800099c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80009a0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a6:	492e      	ldr	r1, [pc, #184]	@ (8000a60 <SystemInit+0x28c>)
 80009a8:	4313      	orrs	r3, r2
 80009aa:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	603a      	str	r2, [r7, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1ea      	bne.n	8000998 <SystemInit+0x1c4>
    } while(sets-- != 0U);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1db      	bne.n	800098e <SystemInit+0x1ba>
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
}
 80009da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009dc:	f3bf 8f6f 	isb	sy
}
 80009e0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009e2:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <SystemInit+0x28c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ec:	f3bf 8f4f 	dsb	sy
}
 80009f0:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <SystemInit+0x28c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a60 <SystemInit+0x28c>)
 80009f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009fe:	f3bf 8f4f 	dsb	sy
}
 8000a02:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000a04:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <SystemInit+0x28c>)
 8000a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	0b5b      	lsrs	r3, r3, #13
 8000a10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a14:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a1e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	015a      	lsls	r2, r3, #5
 8000a24:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000a28:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a2e:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <SystemInit+0x28c>)
 8000a30:	4313      	orrs	r3, r2
 8000a32:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	1e5a      	subs	r2, r3, #1
 8000a3a:	60fa      	str	r2, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1ea      	bne.n	8000a20 <SystemInit+0x24c>
    } while(sets-- != 0U);
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	613a      	str	r2, [r7, #16]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1db      	bne.n	8000a16 <SystemInit+0x242>
 8000a5e:	e00d      	b.n	8000a7c <SystemInit+0x2a8>
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	40023800 	.word	0x40023800
 8000a68:	fef6ffff 	.word	0xfef6ffff
 8000a6c:	24003010 	.word	0x24003010
 8000a70:	40023c00 	.word	0x40023c00
 8000a74:	78406419 	.word	0x78406419
 8000a78:	54036000 	.word	0x54036000
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a82:	f3bf 8f6f 	isb	sy
}
 8000a86:	bf00      	nop
}
 8000a88:	bf00      	nop

  SCB_InvalidateDCache();
	SCB_DisableDCache();
}
 8000a8a:	bf00      	nop
 8000a8c:	3744      	adds	r7, #68	@ 0x44
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <_Z18System_GetDSIclockv>:
//
// System_GetDSIclock
//
//*******************************************************************
DWORD System_GetDSIclock( void )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return( OSCFREQ );
 8000a9c:	f246 13a8 	movw	r3, #25000	@ 0x61a8
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>:
//-------------------------------------------------------------------
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );

//-------------------------------------------------------------------
void PinConfig::set( GPIO_TypeDef *gpio, BYTE pinId, DWORD mode, BYTE af )
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b08e      	sub	sp, #56	@ 0x38
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	72fb      	strb	r3, [r7, #11]
 8000aba:	4613      	mov	r3, r2
 8000abc:	72bb      	strb	r3, [r7, #10]
  BYTE pin2 = 2*pinId;
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  BYTE pin3 = pinId>>3;
 8000ac6:	7afb      	ldrb	r3, [r7, #11]
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  MTYPE bitmask1 = ~((MTYPE)0x01 <<     pinId    );
 8000ace:	7afb      	ldrb	r3, [r7, #11]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  MTYPE bitmask2 = ~((MTYPE)0x03 <<     pin2     );
 8000ada:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MTYPE bitmask3 = ~((MTYPE)0x0F << (4*(pinId%8)));
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28

  MTYPE moder   = (MTYPE)((mode    )&0x03) << pin2;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f003 0203 	and.w	r2, r3, #3
 8000b00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  MTYPE pupdr   = (MTYPE)((mode>> 8)&0x03) << pin2;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0203 	and.w	r2, r3, #3
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	623b      	str	r3, [r7, #32]
  MTYPE otyper  = (MTYPE)((mode>> 4)&0x01) << pinId;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	61fb      	str	r3, [r7, #28]
  MTYPE ospeedr = (MTYPE)((mode>>12)&0x03) << pin2;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	0b1b      	lsrs	r3, r3, #12
 8000b30:	f003 0203 	and.w	r2, r3, #3
 8000b34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	61bb      	str	r3, [r7, #24]
  MTYPE afr     = (MTYPE)((af      )&0x0F) << (4*(pinId%8));
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	f003 020f 	and.w	r2, r3, #15
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	617b      	str	r3, [r7, #20]

  Hw::System::disableInterrupt();
 8000b52:	f7ff fdc5 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
  gpio->MODER     = ( gpio->MODER     & bitmask2 ) | moder;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	431a      	orrs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	601a      	str	r2, [r3, #0]
  gpio->PUPDR     = ( gpio->PUPDR     & bitmask2 ) | pupdr;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	60da      	str	r2, [r3, #12]
  gpio->OTYPER    = ( gpio->OTYPER    & bitmask1 ) | otyper;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	605a      	str	r2, [r3, #4]
  gpio->OSPEEDR   = ( gpio->OSPEEDR   & bitmask2 ) | ospeedr;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	609a      	str	r2, [r3, #8]
  gpio->AFR[pin3] = ( gpio->AFR[pin3] & bitmask3 ) | afr;
 8000b96:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	ea02 0103 	and.w	r1, r2, r3
 8000ba8:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	4319      	orrs	r1, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Hw::System::enableInterrupt();
 8000bb8:	f7ff fda4 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	@ 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>:

//-------------------------------------------------------------------
bool PinConfig::set( Function func, DWORD mode )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	80fb      	strh	r3, [r7, #6]
  BYTE pin;
  BYTE af;

  GPIO_TypeDef *gpio;

  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	827b      	strh	r3, [r7, #18]
 8000bd4:	e0b0      	b.n	8000d38 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x174>
  {
    if( (table[i] >> 16) == func )
 8000bd6:	8a7b      	ldrh	r3, [r7, #18]
 8000bd8:	4a60      	ldr	r2, [pc, #384]	@ (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	141a      	asrs	r2, r3, #16
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	f040 80a5 	bne.w	8000d32 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16e>
    {
      port = (table[i]>>12)&0x0F;
 8000be8:	8a7b      	ldrh	r3, [r7, #18]
 8000bea:	4a5c      	ldr	r2, [pc, #368]	@ (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	131b      	asrs	r3, r3, #12
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	747b      	strb	r3, [r7, #17]
      pin  = (table[i]>> 4)&0x0F;
 8000bfa:	8a7b      	ldrh	r3, [r7, #18]
 8000bfc:	4a57      	ldr	r2, [pc, #348]	@ (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	111b      	asrs	r3, r3, #4
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	743b      	strb	r3, [r7, #16]
      af   = (table[i]>> 0)&0x0F;
 8000c0c:	8a7b      	ldrh	r3, [r7, #18]
 8000c0e:	4a53      	ldr	r2, [pc, #332]	@ (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	73fb      	strb	r3, [r7, #15]

      if( (mode & 0x0F) != ANALOG )
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d003      	beq.n	8000c2e <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x6a>
      {
        mode |= ALTERNATE_FUNC;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	603b      	str	r3, [r7, #0]
      }

      switch( port )
 8000c2e:	7c7b      	ldrb	r3, [r7, #17]
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	d871      	bhi.n	8000d18 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x154>
 8000c34:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x78>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	08000c77 	.word	0x08000c77
 8000c44:	08000c89 	.word	0x08000c89
 8000c48:	08000c9b 	.word	0x08000c9b
 8000c4c:	08000cad 	.word	0x08000cad
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000cd1 	.word	0x08000cd1
 8000c58:	08000ce3 	.word	0x08000ce3
 8000c5c:	08000cf5 	.word	0x08000cf5
 8000c60:	08000d07 	.word	0x08000d07
      {
        case 0: gpio = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8000c64:	4b3e      	ldr	r3, [pc, #248]	@ (8000d60 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x19c>)
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	4b3e      	ldr	r3, [pc, #248]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c74:	e055      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 1: gpio = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a4>)
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a39      	ldr	r2, [pc, #228]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	e04c      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 2: gpio = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8000c88:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a8>)
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	4b35      	ldr	r3, [pc, #212]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c90:	4a34      	ldr	r2, [pc, #208]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c98:	e043      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 3: gpio = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8000c9a:	4b35      	ldr	r3, [pc, #212]	@ (8000d70 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1ac>)
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a30      	ldr	r2, [pc, #192]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	e03a      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 4: gpio = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8000cac:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b0>)
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	e031      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 5: gpio = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b4>)
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a27      	ldr	r2, [pc, #156]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	e028      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 6: gpio = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b8>)
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	4a22      	ldr	r2, [pc, #136]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce0:	e01f      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 7: gpio = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1bc>)
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	e016      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 8: gpio = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c0>)
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	4a19      	ldr	r2, [pc, #100]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d04:	e00d      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 9: gpio = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; break;
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c4>)
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000d10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	e004      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        default:report.error( ReportID_Hw::Event::HARDWARE_NOT_SUPPORTED );
 8000d18:	210d      	movs	r1, #13
 8000d1a:	481c      	ldr	r0, [pc, #112]	@ (8000d8c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c8>)
 8000d1c:	f002 fa66 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 8000d20:	bf00      	nop
      }
      set( gpio, pin, mode, af );
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	7c39      	ldrb	r1, [r7, #16]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f7ff febe 	bl	8000aaa <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
      return( true );
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x18e>
  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8000d32:	8a7b      	ldrh	r3, [r7, #18]
 8000d34:	3301      	adds	r3, #1
 8000d36:	827b      	strh	r3, [r7, #18]
 8000d38:	8a7b      	ldrh	r3, [r7, #18]
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	f47f af47 	bne.w	8000bd6 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x12>
    }
  }
  // Error: The table does not contain the func
  report.error( ReportID_Hw::Event::CONFIG_NOT_SUPPORTED );
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4810      	ldr	r0, [pc, #64]	@ (8000d8c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c8>)
 8000d4c:	f002 fa4e 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
  return( false );
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40021400 	.word	0x40021400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40021c00 	.word	0x40021c00
 8000d84:	40022000 	.word	0x40022000
 8000d88:	40022400 	.word	0x40022400
 8000d8c:	20000178 	.word	0x20000178

08000d90 <ADC_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void ADC_IRQHandler(void)
  {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    if( ADC1->SR & ADC_SR_EOC )
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <ADC_IRQHandler+0xa4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bf14      	ite	ne
 8000da0:	2301      	movne	r3, #1
 8000da2:	2300      	moveq	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00e      	beq.n	8000dc8 <ADC_IRQHandler+0x38>
    {
      ADC1->SR &= ~ADC_SR_EOC;
 8000daa:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <ADC_IRQHandler+0xa4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <ADC_IRQHandler+0xa4>)
 8000db0:	f023 0302 	bic.w	r3, r3, #2
 8000db4:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc1->isr();
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <ADC_IRQHandler+0xa8>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <ADC_IRQHandler+0xa8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	330c      	adds	r3, #12
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4798      	blx	r3
    }
    if( ADC2->SR & ADC_SR_EOC )
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <ADC_IRQHandler+0xac>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00e      	beq.n	8000dfc <ADC_IRQHandler+0x6c>
    {
      ADC2->SR &= ~ADC_SR_EOC;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <ADC_IRQHandler+0xac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a16      	ldr	r2, [pc, #88]	@ (8000e3c <ADC_IRQHandler+0xac>)
 8000de4:	f023 0302 	bic.w	r3, r3, #2
 8000de8:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc2->isr();
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <ADC_IRQHandler+0xb0>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <ADC_IRQHandler+0xb0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	330c      	adds	r3, #12
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4798      	blx	r3
    }
    if( ADC3->SR & ADC_SR_EOC )
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <ADC_IRQHandler+0xb4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00e      	beq.n	8000e30 <ADC_IRQHandler+0xa0>
    {
      ADC3->SR &= ~ADC_SR_EOC;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <ADC_IRQHandler+0xb4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <ADC_IRQHandler+0xb4>)
 8000e18:	f023 0302 	bic.w	r3, r3, #2
 8000e1c:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc3->isr();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <ADC_IRQHandler+0xb8>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <ADC_IRQHandler+0xb8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4798      	blx	r3
    }
  }
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012000 	.word	0x40012000
 8000e38:	2000017c 	.word	0x2000017c
 8000e3c:	40012100 	.word	0x40012100
 8000e40:	20000180 	.word	0x20000180
 8000e44:	40012200 	.word	0x40012200
 8000e48:	20000184 	.word	0x20000184

08000e4c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>:
#if ( system_PCLK_I2C != 50000000 )
  #error "system_PCLK_I2C not defined or wrong value"
#endif

//-------------------------------------------------------------------
I2Cmaster_Mcu::I2Cmaster_Mcu( I2C_ID id,
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	803b      	strh	r3, [r7, #0]
                              WORD   fclk )

: I2Cmaster( ReportID_Hw::Module::I2C_MASTER_MCU )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	21d0      	movs	r1, #208	@ 0xd0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fdc1 	bl	80039e8 <_ZN9EmbSysLib2Hw9I2CmasterC1Et>
 8000e66:	4a5e      	ldr	r2, [pc, #376]	@ (8000fe0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x194>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]

{
  switch( id )
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d85b      	bhi.n	8000f2c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xe0>
 8000e74:	a201      	add	r2, pc, #4	@ (adr r2, 8000e7c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x30>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000eb5 	.word	0x08000eb5
 8000e84:	08000edd 	.word	0x08000edd
 8000e88:	08000f05 	.word	0x08000f05
  {
    case I2C_1:
      ptr           = I2C1;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a55      	ldr	r2, [pc, #340]	@ (8000fe4 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x198>)
 8000e90:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000e92:	4b55      	ldr	r3, [pc, #340]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a54      	ldr	r2, [pc, #336]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000e98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::I2C1_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000e9e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000ea2:	20d5      	movs	r0, #213	@ 0xd5
 8000ea4:	f7ff fe8e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C1_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ea8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000eac:	20d6      	movs	r0, #214	@ 0xd6
 8000eae:	f7ff fe89 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000eb2:	e042      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_2:
      ptr           = I2C2;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8000fec <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a0>)
 8000eb8:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000eba:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ec0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::I2C2_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ec6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000eca:	20d8      	movs	r0, #216	@ 0xd8
 8000ecc:	f7ff fe7a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C2_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ed0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000ed4:	20d9      	movs	r0, #217	@ 0xd9
 8000ed6:	f7ff fe75 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000eda:	e02e      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_3:
      ptr           = I2C3;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a44      	ldr	r2, [pc, #272]	@ (8000ff0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a4>)
 8000ee0:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000ee2:	4b41      	ldr	r3, [pc, #260]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a40      	ldr	r2, [pc, #256]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ee8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::I2C3_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000eee:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000ef2:	20db      	movs	r0, #219	@ 0xdb
 8000ef4:	f7ff fe66 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C3_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ef8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000efc:	20dc      	movs	r0, #220	@ 0xdc
 8000efe:	f7ff fe61 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000f02:	e01a      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_4:
      ptr           = I2C4;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff4 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a8>)
 8000f08:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C4EN;
 8000f0a:	4b37      	ldr	r3, [pc, #220]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a36      	ldr	r2, [pc, #216]	@ (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000f10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::I2C4_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000f16:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f1a:	20de      	movs	r0, #222	@ 0xde
 8000f1c:	f7ff fe52 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C4_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000f20:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f24:	20df      	movs	r0, #223	@ 0xdf
 8000f26:	f7ff fe4d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000f2a:	e006      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3306      	adds	r3, #6
 8000f30:	2107      	movs	r1, #7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 f95a 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8000f38:	bf00      	nop
  }

  ptr->CR1 = 0x00; // disable
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
  while( ptr->CR1 & I2C_CR1_PE ) {}
 8000f42:	bf00      	nop
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f3      	bne.n	8000f44 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xf8>

  ptr->CR1 |=   (!I2C_CR1_ANFOFF)   // keep analog filter on
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	601a      	str	r2, [r3, #0]
       Fm with tsclh/tscll = 2:
         fclk = 1/(tsclh + tscll), tsclh = 2*tscll
           => fclk = 1/(3*tscll) and fclk = 2/(3*tsclh)
           => scll = 1/(3*fclk*tpresc) and sclh = 2/(3*fclk*tpresc)
  */
  fclk = RANGE( fclk, (WORD)1, (WORD)1000 );
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fc27 	bl	80057c4 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_>
 8000f76:	4603      	mov	r3, r0
 8000f78:	803b      	strh	r3, [r7, #0]

  WORD sclh = MIN( (WORD)(3333/fclk - 1), (WORD)(0xFF) );
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	f640 5205 	movw	r2, #3333	@ 0xd05
 8000f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	21ff      	movs	r1, #255	@ 0xff
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fc04 	bl	800579a <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81fb      	strh	r3, [r7, #14]
  WORD scll = MIN( (WORD)(1667/fclk - 1), (WORD)(0xFF) );
 8000f96:	883b      	ldrh	r3, [r7, #0]
 8000f98:	f240 6283 	movw	r2, #1667	@ 0x683
 8000f9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	21ff      	movs	r1, #255	@ 0xff
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fbf6 	bl	800579a <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	81bb      	strh	r3, [r7, #12]

  ptr->TIMINGR =  (0x0F<<28)   // PRESC
                 |(0x00<<20)   // SCLDEL, 1*0.2us
                 |(0x00<<16)   // SDADEL
                 |(sclh<< 8)   // SCLH
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	f043 4270 	orr.w	r2, r3, #4026531840	@ 0xf0000000
                 |(scll<< 0);  // SCLL
 8000fba:	89bb      	ldrh	r3, [r7, #12]
 8000fbc:	431a      	orrs	r2, r3
  ptr->TIMINGR =  (0x0F<<28)   // PRESC
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  ptr->CR1 |= I2C_CR1_PE; // enable
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
<<<<<<< HEAD
 8000fe0:	08009b04 	.word	0x08009b04
=======
 8000fe0:	08009910 	.word	0x08009910
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40005800 	.word	0x40005800
 8000ff0:	40005c00 	.word	0x40005c00
 8000ff4:	40006000 	.word	0x40006000

08000ff8 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu5startEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::start( BYTE size )
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
  ptr->CR2 = (ptr->CR2 & ~0xFF0000)|((size)<<16);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	430a      	orrs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]
  ptr->CR2 = (ptr->CR2 & ~(1<<10));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001028:	605a      	str	r2, [r3, #4]
  // set start condition AFTER setting of SADD in sendAddr
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu4stopEv>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::stop( void )
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  ptr->CR1 |= I2C_CR2_STOP;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::sendAddr( BYTE addr )
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
  if( isHardwareOK )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d029      	beq.n	80010c4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x68>
  {
    ptr->CR2 = (ptr->CR2 & ~0x2FF)|(addr&0xFE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x74>)
 8001078:	4013      	ands	r3, r2
 800107a:	78fa      	ldrb	r2, [r7, #3]
 800107c:	f002 01fe 	and.w	r1, r2, #254	@ 0xfe
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68d2      	ldr	r2, [r2, #12]
 8001084:	430b      	orrs	r3, r1
 8001086:	6053      	str	r3, [r2, #4]
    if(addr & 0x01)
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x48>
    {
      ptr->CR2 = (ptr->CR2 | (1<<10));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	e007      	b.n	80010b4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x58>
    }
    else
    {
      ptr->CR2 = (ptr->CR2 & ~(1<<10));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010b2:	605a      	str	r2, [r3, #4]
    }
    ptr->CR2 |= I2C_CR2_START;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
  }
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	fffffd00 	.word	0xfffffd00

080010d4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu9writeByteEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::writeByte( BYTE byte )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  if( isHardwareOK )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00a      	beq.n	80010fe <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu9writeByteEh+0x2a>
  {
    ptr->TXDR = byte;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
    waitForAckn( I2C_ISR_TXE );
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3320      	adds	r3, #32
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4798      	blx	r3
  }
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv>:

//-------------------------------------------------------------------
inline BYTE I2Cmaster_Mcu::readByteAck( void )
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  if( isHardwareOK )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv+0x28>
  {
    waitForAckn( I2C_ISR_RXNE );
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3320      	adds	r3, #32
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2104      	movs	r1, #4
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
    return( ptr->RXDR );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	b2db      	uxtb	r3, r3
 800112c:	e000      	b.n	8001130 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv+0x2a>
  }
  return( 0 );
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv>:

//-------------------------------------------------------------------
inline BYTE I2Cmaster_Mcu::readByteNack( void )
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if( isHardwareOK )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv+0x28>
  {
    waitForAckn( I2C_ISR_RXNE );
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3320      	adds	r3, #32
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2104      	movs	r1, #4
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    return( ptr->RXDR );
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	b2db      	uxtb	r3, r3
 800115e:	e000      	b.n	8001162 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv+0x2a>
  }
  return( 0 );
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::waitForAckn( MTYPE state )
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  WORD i = 0xFFFF;
 8001174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001178:	81fb      	strh	r3, [r7, #14]

  if( isHardwareOK )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x3e>
  {
    while( (--i) && !(ptr->ISR & state)  );    // wait for ACK
 8001182:	bf00      	nop
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	3b01      	subs	r3, #1
 8001188:	81fb      	strh	r3, [r7, #14]
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x38>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x38>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x3a>
 80011a2:	2300      	movs	r3, #0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ed      	bne.n	8001184 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x1a>
  }

  if( i == 0 )
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x56>
  {
    isHardwareOK = false;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	711a      	strb	r2, [r3, #4]
    stop();
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	330c      	adds	r3, #12
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	4798      	blx	r3
  }
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh>:
//
// Memory_Flash
//
//*******************************************************************
//-------------------------------------------------------------------
Memory_Flash::Memory_Flash( BYTE sectorFirst, BYTE sectorLast )
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
 80011d4:	4613      	mov	r3, r2
 80011d6:	70bb      	strb	r3, [r7, #2]

: Memory( ReportID_Hw::Module::MEMORY_FLASH,
          0,     // recalulate later
          0xFF,  // default value
          true ) // flash
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	23ff      	movs	r3, #255	@ 0xff
 80011e0:	2200      	movs	r2, #0
 80011e2:	2181      	movs	r1, #129	@ 0x81
 80011e4:	f002 fd02 	bl	8003bec <_ZN9EmbSysLib2Hw6MemoryC1Etmhb>
 80011e8:	4a26      	ldr	r2, [pc, #152]	@ (8001284 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0xbc>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]

{
  if( sectorFirst >= sectorLast )
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d301      	bcc.n	80011fa <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x32>
  {
    sectorLast = sectorFirst; // set last sector if not given 
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	70bb      	strb	r3, [r7, #2]
  }
  if( sectorLast > 11 ) // number of sectors matched?
 80011fa:	78bb      	ldrb	r3, [r7, #2]
 80011fc:	2b0b      	cmp	r3, #11
 80011fe:	d905      	bls.n	800120c <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x44>
  {
    report.alert( ReportID_Hw::Event::WRONG_ID );
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	330c      	adds	r3, #12
 8001204:	2107      	movs	r1, #7
 8001206:	4618      	mov	r0, r3
 8001208:	f002 f814 	bl	8003234 <_ZN9EmbSysLib3Std6Report5alertEt>
  }

  this->sectorFirst = sectorFirst;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	765a      	strb	r2, [r3, #25]
  this->sectorLast  = sectorLast;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	78ba      	ldrb	r2, [r7, #2]
 8001216:	769a      	strb	r2, [r3, #26]
  
  ptr = SectorInfo( sectorFirst ).ptr;
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f8dd 	bl	80003e0 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh>
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	611a      	str	r2, [r3, #16]
  
  if( ptr == NULL )
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x78>
  {
    report.error( ReportID_Hw::Event::WRONG_ID );
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	330c      	adds	r3, #12
 8001238:	2107      	movs	r1, #7
 800123a:	4618      	mov	r0, r3
 800123c:	f001 ffd6 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
  }

  // calculate total memory size
  size = 0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	77fb      	strb	r3, [r7, #31]
 800124a:	e00f      	b.n	800126c <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0xa4>
  {
    size += SectorInfo( s ).size;
 800124c:	7ffa      	ldrb	r2, [r7, #31]
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f8c3 	bl	80003e0 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh>
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	441a      	add	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	3301      	adds	r3, #1
 800126a:	77fb      	strb	r3, [r7, #31]
 800126c:	7ffa      	ldrb	r2, [r7, #31]
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	429a      	cmp	r2, r3
 8001272:	d9eb      	bls.n	800124c <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x84>
  }
  dataDoubleWord = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
}
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8001284:	08009aa4 	.word	0x08009aa4
=======
 8001284:	080098b0 	.word	0x080098b0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08001288 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv>:

//-------------------------------------------------------------------
void Memory_Flash::unlock( void )
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  while( FLASH->SR & FLASH_SR_BSY );
 8001290:	bf00      	nop
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f4      	bne.n	8001292 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0xa>

  FLASH->KEYR = 0x45670123;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 80012aa:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x58>)
 80012ac:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = 0xCDEF89AB;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 80012b0:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x5c>)
 80012b2:	605a      	str	r2, [r3, #4]

  while( FLASH->SR & FLASH_SR_BSY );
 80012b4:	bf00      	nop
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f4      	bne.n	80012b6 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x2e>
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00
 80012e0:	45670123 	.word	0x45670123
 80012e4:	cdef89ab 	.word	0xcdef89ab

080012e8 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv>:

//-------------------------------------------------------------------
void Memory_Flash::lock( void )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  FLASH->CR |= FLASH_CR_LOCK;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x3c>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x3c>)
 80012f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80012fa:	6113      	str	r3, [r2, #16]
  while( FLASH->SR & FLASH_SR_BSY );
 80012fc:	bf00      	nop
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x3c>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f4      	bne.n	80012fe <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x16>
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <_ZN9EmbSysLib2Hw12Memory_Flash6getPtrEv>:

//-------------------------------------------------------------------
inline const BYTE *Memory_Flash::getPtr( void )
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return( (const BYTE*)ptr );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN9EmbSysLib2Hw12Memory_Flash5eraseEv>:

//-------------------------------------------------------------------
void Memory_Flash::erase( void )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  unlock();
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e5b      	ldrb	r3, [r3, #25]
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e007      	b.n	800136a <_ZN9EmbSysLib2Hw12Memory_Flash5eraseEv+0x2a>
  {
    erasePage( s );
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f868 	bl	8001434 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh>
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e9b      	ldrb	r3, [r3, #26]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	429a      	cmp	r2, r3
 8001372:	d9f2      	bls.n	800135a <_ZN9EmbSysLib2Hw12Memory_Flash5eraseEv+0x1a>
  }
  lock();
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3304      	adds	r3, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh>:

//-------------------------------------------------------------------
void Memory_Flash::writeByte( DWORD addr, BYTE data )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	71fb      	strb	r3, [r7, #7]
  if( addr < size )
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	d22c      	bcs.n	80013fa <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x72>
  {
    if( addr == 0 )
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d110      	bne.n	80013c8 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x40>
    {
      for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	7e5b      	ldrb	r3, [r3, #25]
 80013aa:	75fb      	strb	r3, [r7, #23]
 80013ac:	e007      	b.n	80013be <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x36>
      {
        erasePage( s );
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f83e 	bl	8001434 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh>
      for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	3301      	adds	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7e9b      	ldrb	r3, [r3, #26]
 80013c2:	7dfa      	ldrb	r2, [r7, #23]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d9f2      	bls.n	80013ae <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x26>
      }
    }

    FLASH->CR |= FLASH_CR_PG;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x88>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x88>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6113      	str	r3, [r2, #16]
    
    ptr[addr] = data;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	701a      	strb	r2, [r3, #0]
    
    while( FLASH->SR & FLASH_SR_BSY );
 80013e0:	bf00      	nop
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x88>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f4      	bne.n	80013e2 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x5a>
  }
  else
  {
    report.alert( ReportID_Hw::Event::SIZE_ERROR );
  }
}
 80013f8:	e005      	b.n	8001406 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x7e>
    report.alert( ReportID_Hw::Event::SIZE_ERROR );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	330c      	adds	r3, #12
 80013fe:	210c      	movs	r1, #12
 8001400:	4618      	mov	r0, r3
 8001402:	f001 ff17 	bl	8003234 <_ZN9EmbSysLib3Std6Report5alertEt>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <_ZN9EmbSysLib2Hw12Memory_Flash8readByteEm>:

//-------------------------------------------------------------------
BYTE Memory_Flash::readByte( DWORD addr )
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  return( ptr[addr] );
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh>:

//-------------------------------------------------------------------
void Memory_Flash::erasePage( BYTE sector )
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  FLASH->CR &= ~(FLASH_CR_STRT | FLASH_CR_SER | (0xf<<3)); // set SER-bit
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	4915      	ldr	r1, [pc, #84]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x6c>)
 8001448:	4013      	ands	r3, r2
 800144a:	610b      	str	r3, [r1, #16]
  FLASH->CR |=   FLASH_CR_SER | (sector<<3); 
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4313      	orrs	r3, r2
 8001456:	4a11      	ldr	r2, [pc, #68]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6113      	str	r3, [r2, #16]
  
  FLASH->CR |= FLASH_CR_STRT;// set STRT-bit
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001468:	6113      	str	r3, [r2, #16]
  
  while( FLASH->SR & FLASH_SR_BSY );
 800146a:	bf00      	nop
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf14      	ite	ne
 8001478:	2301      	movne	r3, #1
 800147a:	2300      	moveq	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f4      	bne.n	800146c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x38>
  
  FLASH->CR &= ~(FLASH_CR_STRT | FLASH_CR_SER | (0xf<<3)); // clr SER-bit
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	4905      	ldr	r1, [pc, #20]	@ (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x6c>)
 800148a:	4013      	ands	r3, r2
 800148c:	610b      	str	r3, [r1, #16]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00
 80014a0:	fffeff85 	.word	0xfffeff85

080014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>:
//
// Port_Mcu
//
//*******************************************************************
//-------------------------------------------------------------------
Port_Mcu::Port_Mcu( PortId portId )
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  : Port( ReportID_Hw::Module::PORT_MCU )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2110      	movs	r1, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fc3b 	bl	8003d30 <_ZN9EmbSysLib2Hw4PortC1Et>
 80014ba:	4a46      	ldr	r2, [pc, #280]	@ (80015d4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x130>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
{
  switch( portId )
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b09      	cmp	r3, #9
 80014c4:	d87a      	bhi.n	80015bc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x118>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x28>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	08001509 	.word	0x08001509
 80014d4:	0800151d 	.word	0x0800151d
 80014d8:	08001531 	.word	0x08001531
 80014dc:	08001545 	.word	0x08001545
 80014e0:	08001559 	.word	0x08001559
 80014e4:	0800156d 	.word	0x0800156d
 80014e8:	08001581 	.word	0x08001581
 80014ec:	08001595 	.word	0x08001595
 80014f0:	080015a9 	.word	0x080015a9
  {
    case PA: gpio = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a38      	ldr	r2, [pc, #224]	@ (80015d8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x134>)
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a37      	ldr	r2, [pc, #220]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	e060      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PB: gpio = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a35      	ldr	r2, [pc, #212]	@ (80015e0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x13c>)
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a32      	ldr	r2, [pc, #200]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	e056      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PC: gpio = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a31      	ldr	r2, [pc, #196]	@ (80015e4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x140>)
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a2d      	ldr	r2, [pc, #180]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	e04c      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PD: gpio = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a2d      	ldr	r2, [pc, #180]	@ (80015e8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x144>)
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	e042      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PE: gpio = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x148>)
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a23      	ldr	r2, [pc, #140]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	e038      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PF: gpio = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x14c>)
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	e02e      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PG: gpio = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x150>)
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	e024      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PH: gpio = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x154>)
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	e01a      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PI: gpio = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x158>)
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	e010      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PJ: gpio = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; break;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x15c>)
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80015b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	e006      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3304      	adds	r3, #4
 80015c0:	2107      	movs	r1, #7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fe12 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80015c8:	bf00      	nop
  }
}
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 80015d4:	08009a84 	.word	0x08009a84
=======
 80015d4:	08009890 	.word	0x08009890
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40021c00 	.word	0x40021c00
 80015fc:	40022000 	.word	0x40022000
 8001600:	40022400 	.word	0x40022400

08001604 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setMode( MTYPE mask, Mode mode )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	71fb      	strb	r3, [r7, #7]
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
 8001616:	e012      	b.n	800163e <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x3a>
  {
    if( mask & 0x01 )
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x2e>
    {
      setPinMode( i, mode );
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3304      	adds	r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	7df9      	ldrb	r1, [r7, #23]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	4798      	blx	r3
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	3301      	adds	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d9e9      	bls.n	8001618 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x14>
    }
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setPinMode( BYTE pinId, Mode mode )
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	70bb      	strb	r3, [r7, #2]
  DWORD config = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]

  if( mode & Port::Out ) config |= PinConfig::OUTPUT;
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x26>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PU  ) config |= PinConfig::PULL_UP;
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x38>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001684:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PD  ) config |= PinConfig::PULL_DOWN;
 8001686:	78bb      	ldrb	r3, [r7, #2]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x4a>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001696:	60fb      	str	r3, [r7, #12]
  if( mode & Port::OD  ) config |= PinConfig::OPEN_DRAIN;
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x5c>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]

  PinConfig::set( gpio, pinId, config );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6898      	ldr	r0, [r3, #8]
 80016ae:	78f9      	ldrb	r1, [r7, #3]
 80016b0:	2300      	movs	r3, #0
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f7ff f9f9 	bl	8000aaa <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZN9EmbSysLib2Hw8Port_Mcu3setEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask )
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
//<! \todo change BSRR to BSRRL/H in stm32*.h
  gpio->BSRR = mask;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZN9EmbSysLib2Hw8Port_Mcu3setEmm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask, MTYPE value )
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  gpio->BSRR = mask &  value;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	400a      	ands	r2, r1
 80016f4:	619a      	str	r2, [r3, #24]
  gpio->BSRR = (mask & ~value)<<16;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	43da      	mvns	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	401a      	ands	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	0412      	lsls	r2, r2, #16
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_ZN9EmbSysLib2Hw8Port_Mcu3clrEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::clr( MTYPE mask )
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  gpio->BSRR = mask<<16;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	0412      	lsls	r2, r2, #16
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_ZN9EmbSysLib2Hw8Port_Mcu3getEv>:

//-------------------------------------------------------------------
inline MTYPE Port_Mcu::get( void )
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  return( gpio->IDR );
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	691b      	ldr	r3, [r3, #16]
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void SysTick_Handler( void )
  {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;
    
    stackPointer = save_context();
 8001750:	f7fe fd80 	bl	8000254 <save_context>
 8001754:	4603      	mov	r3, r0
 8001756:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <SysTick_Handler+0x40>)
 8001758:	6013      	str	r3, [r2, #0]
    Rtos_Mcu::sysTic++;
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <SysTick_Handler+0x44>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <SysTick_Handler+0x44>)
 8001762:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, true );
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <SysTick_Handler+0x48>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <SysTick_Handler+0x40>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	4610      	mov	r0, r2
 8001770:	4798      	blx	r3
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <SysTick_Handler+0x40>)
 8001778:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 800177a:	4b04      	ldr	r3, [pc, #16]	@ (800178c <SysTick_Handler+0x40>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fd75 	bl	800026e <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 8001784:	bf00      	nop
  }
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000190 	.word	0x20000190
 8001790:	2000018c 	.word	0x2000018c
 8001794:	20000188 	.word	0x20000188

08001798 <PendSV_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void PendSV_Handler( void )
  {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;

    stackPointer = save_context();
 800179c:	f7fe fd5a 	bl	8000254 <save_context>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <PendSV_Handler+0x34>)
 80017a4:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, false );
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <PendSV_Handler+0x38>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <PendSV_Handler+0x34>)
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	2100      	movs	r1, #0
 80017b0:	4610      	mov	r0, r2
 80017b2:	4798      	blx	r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <PendSV_Handler+0x34>)
 80017ba:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <PendSV_Handler+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd54 	bl	800026e <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 80017c6:	bf00      	nop
  }
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000194 	.word	0x20000194
 80017d0:	20000188 	.word	0x20000188
 80017d4:	00000000 	.word	0x00000000

080017d8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>:
Timer_Mcu *Timer_Mcu::timerPtr_10 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_11 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_14 = 0;

//-------------------------------------------------------------------
Timer_Mcu::Timer_Mcu( TimerId timerIdIn,
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	460b      	mov	r3, r1
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	72fb      	strb	r3, [r7, #11]
                      DWORD   cycleTimeIn )

: Timer( ReportID_Hw::Module::TIMER_MCU )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2130      	movs	r1, #48	@ 0x30
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fb52 	bl	8003e94 <_ZN9EmbSysLib2Hw5TimerC1Et>
 80017f0:	4aa9      	ldr	r2, [pc, #676]	@ (8001a98 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c0>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]

{
  timerId = timerIdIn;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	7afa      	ldrb	r2, [r7, #11]
 80017fa:	751a      	strb	r2, [r3, #20]

  switch( timerId )
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7d1b      	ldrb	r3, [r3, #20]
 8001800:	3b01      	subs	r3, #1
 8001802:	2b0a      	cmp	r3, #10
 8001804:	f200 80cb 	bhi.w	800199e <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1c6>
 8001808:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x38>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800183d 	.word	0x0800183d
 8001814:	0800185d 	.word	0x0800185d
 8001818:	0800187f 	.word	0x0800187f
 800181c:	0800189f 	.word	0x0800189f
 8001820:	080018bf 	.word	0x080018bf
 8001824:	080018df 	.word	0x080018df
 8001828:	080018ff 	.word	0x080018ff
 800182c:	0800191f 	.word	0x0800191f
 8001830:	0800193f 	.word	0x0800193f
 8001834:	0800195f 	.word	0x0800195f
 8001838:	0800197f 	.word	0x0800197f
  {
   case TIM_1:
      ptr           = (TIM_TypeDef*)TIM1_BASE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a97      	ldr	r2, [pc, #604]	@ (8001a9c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c4>)
 8001840:	619a      	str	r2, [r3, #24]
      timerPtr_1    = this;
 8001842:	4a97      	ldr	r2, [pc, #604]	@ (8001aa0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c8>)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001848:	4b96      	ldr	r3, [pc, #600]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800184a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184c:	4a95      	ldr	r2, [pc, #596]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6453      	str	r3, [r2, #68]	@ 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001854:	2019      	movs	r0, #25
 8001856:	f7fe fd7b 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800185a:	e0a7      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_2:
      ptr           = (TIM_TypeDef*)TIM2_BASE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001862:	619a      	str	r2, [r3, #24]
      timerPtr_2    = this;
 8001864:	4a90      	ldr	r2, [pc, #576]	@ (8001aa8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d0>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800186a:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	4a8d      	ldr	r2, [pc, #564]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6413      	str	r3, [r2, #64]	@ 0x40
      NVIC_EnableIRQ( TIM2_IRQn );
 8001876:	201c      	movs	r0, #28
 8001878:	f7fe fd6a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800187c:	e096      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_3:
      ptr           = (TIM_TypeDef*)TIM3_BASE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a8a      	ldr	r2, [pc, #552]	@ (8001aac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d4>)
 8001882:	619a      	str	r2, [r3, #24]
      timerPtr_3    = this;
 8001884:	4a8a      	ldr	r2, [pc, #552]	@ (8001ab0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d8>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800188a:	4b86      	ldr	r3, [pc, #536]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	4a85      	ldr	r2, [pc, #532]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
      NVIC_EnableIRQ( TIM3_IRQn );
 8001896:	201d      	movs	r0, #29
 8001898:	f7fe fd5a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800189c:	e086      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_4:
      ptr           = (TIM_TypeDef*)TIM4_BASE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a84      	ldr	r2, [pc, #528]	@ (8001ab4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2dc>)
 80018a2:	619a      	str	r2, [r3, #24]
      timerPtr_4    = this;
 80018a4:	4a84      	ldr	r2, [pc, #528]	@ (8001ab8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e0>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80018aa:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6413      	str	r3, [r2, #64]	@ 0x40
      NVIC_EnableIRQ( TIM4_IRQn );
 80018b6:	201e      	movs	r0, #30
 80018b8:	f7fe fd4a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80018bc:	e076      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_5:
      ptr           = (TIM_TypeDef*)TIM5_BASE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a7e      	ldr	r2, [pc, #504]	@ (8001abc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e4>)
 80018c2:	619a      	str	r2, [r3, #24]
      timerPtr_5    = this;
 80018c4:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e8>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80018ca:	4b76      	ldr	r3, [pc, #472]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a75      	ldr	r2, [pc, #468]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
      NVIC_EnableIRQ( TIM5_IRQn );
 80018d6:	2032      	movs	r0, #50	@ 0x32
 80018d8:	f7fe fd3a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80018dc:	e066      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_7:
      ptr           = (TIM_TypeDef*)TIM7_BASE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4a78      	ldr	r2, [pc, #480]	@ (8001ac4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2ec>)
 80018e2:	619a      	str	r2, [r3, #24]
      timerPtr_7    = this;
 80018e4:	4a78      	ldr	r2, [pc, #480]	@ (8001ac8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f0>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80018ea:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
      NVIC_EnableIRQ( TIM7_IRQn );
 80018f6:	2037      	movs	r0, #55	@ 0x37
 80018f8:	f7fe fd2a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80018fc:	e056      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_8:
      ptr           = (TIM_TypeDef*)TIM8_BASE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a72      	ldr	r2, [pc, #456]	@ (8001acc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f4>)
 8001902:	619a      	str	r2, [r3, #24]
      timerPtr_8    = this;
 8001904:	4a72      	ldr	r2, [pc, #456]	@ (8001ad0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f8>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 800190a:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	4a65      	ldr	r2, [pc, #404]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6453      	str	r3, [r2, #68]	@ 0x44
      NVIC_EnableIRQ( TIM8_CC_IRQn );
 8001916:	202e      	movs	r0, #46	@ 0x2e
 8001918:	f7fe fd1a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800191c:	e046      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_9:
      ptr           = (TIM_TypeDef*)TIM9_BASE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a6c      	ldr	r2, [pc, #432]	@ (8001ad4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2fc>)
 8001922:	619a      	str	r2, [r3, #24]
      timerPtr_9    = this;
 8001924:	4a6c      	ldr	r2, [pc, #432]	@ (8001ad8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x300>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 800192a:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	4a5d      	ldr	r2, [pc, #372]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6453      	str	r3, [r2, #68]	@ 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001936:	2019      	movs	r0, #25
 8001938:	f7fe fd0a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800193c:	e036      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_10:
      ptr           = (TIM_TypeDef*)TIM10_BASE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a66      	ldr	r2, [pc, #408]	@ (8001adc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x304>)
 8001942:	619a      	str	r2, [r3, #24]
      timerPtr_10    = this;
 8001944:	4a66      	ldr	r2, [pc, #408]	@ (8001ae0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x308>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 800194a:	4b56      	ldr	r3, [pc, #344]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	4a55      	ldr	r2, [pc, #340]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001954:	6453      	str	r3, [r2, #68]	@ 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001956:	2019      	movs	r0, #25
 8001958:	f7fe fcfa 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800195c:	e026      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_11:
      ptr           = (TIM_TypeDef*)TIM11_BASE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a60      	ldr	r2, [pc, #384]	@ (8001ae4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x30c>)
 8001962:	619a      	str	r2, [r3, #24]
      timerPtr_11    = this;
 8001964:	4a60      	ldr	r2, [pc, #384]	@ (8001ae8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x310>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 800196a:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
      NVIC_EnableIRQ( TIM1_TRG_COM_TIM11_IRQn );
 8001976:	201a      	movs	r0, #26
 8001978:	f7fe fcea 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800197c:	e016      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_14:
      ptr           = (TIM_TypeDef*)TIM14_BASE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a5a      	ldr	r2, [pc, #360]	@ (8001aec <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x314>)
 8001982:	619a      	str	r2, [r3, #24]
      timerPtr_14    = this;
 8001984:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x318>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 800198a:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a45      	ldr	r2, [pc, #276]	@ (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
      NVIC_EnableIRQ( TIM8_TRG_COM_TIM14_IRQn );
 8001996:	202d      	movs	r0, #45	@ 0x2d
 8001998:	f7fe fcda 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800199c:	e006      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	330c      	adds	r3, #12
 80019a2:	2107      	movs	r1, #7
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fc21 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80019aa:	bf00      	nop
  }

  // calculate tics and prescaler
  float rawTics = 2.0*system_PCLK_TIM * cycleTimeIn * 1E-6f;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019b6:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8001a80 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>
 80019ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019be:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8001a88 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b0>
 80019c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ca:	edc7 7a05 	vstr	s15, [r7, #20]
  DWORD ps      = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	613b      	str	r3, [r7, #16]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 80019d2:	e00d      	b.n	80019f0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x218>
  {
    ps      *= 10;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	613b      	str	r3, [r7, #16]
    rawTics /= 10;
 80019e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	edc7 7a05 	vstr	s15, [r7, #20]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 80019f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001af4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x31c>
 80019f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	dce8      	bgt.n	80019d4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1fc>
  }

  tics      = (DWORD)rawTics;
 8001a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 2a90 	vmov	r2, s15
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	611a      	str	r2, [r3, #16]
  cycleTime = (DWORD)(1E6 * tics * ps / (2.0*system_PCLK_TIM) );
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a1e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8001a90 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b8>
 8001a22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a34:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001a80 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>
 8001a38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a40:	ee17 2a90 	vmov	r2, s15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	605a      	str	r2, [r3, #4]

  ptr->DIER = TIM_DIER_UIE; // update interrupt enable
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	60da      	str	r2, [r3, #12]
  ptr->EGR  = TIM_EGR_UG;   // re-initialize timer
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2201      	movs	r2, #1
 8001a56:	615a      	str	r2, [r3, #20]
  ptr->PSC  = ps   - 1;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
  ptr->ARR  = tics - 1;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  ptr->CR1  = TIM_CR1_CEN;  // counter enable
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4197d784 	.word	0x4197d784
 8001a88:	a0000000 	.word	0xa0000000
 8001a8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001a90:	00000000 	.word	0x00000000
 8001a94:	412e8480 	.word	0x412e8480
<<<<<<< HEAD
 8001a98:	08009a68 	.word	0x08009a68
=======
 8001a98:	08009874 	.word	0x08009874
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	20000198 	.word	0x20000198
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	2000019c 	.word	0x2000019c
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	200001a0 	.word	0x200001a0
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	200001a4 	.word	0x200001a4
 8001abc:	40000c00 	.word	0x40000c00
 8001ac0:	200001a8 	.word	0x200001a8
 8001ac4:	40001400 	.word	0x40001400
 8001ac8:	200001ac 	.word	0x200001ac
 8001acc:	40010400 	.word	0x40010400
 8001ad0:	200001b0 	.word	0x200001b0
 8001ad4:	40014000 	.word	0x40014000
 8001ad8:	200001b4 	.word	0x200001b4
 8001adc:	40014400 	.word	0x40014400
 8001ae0:	200001b8 	.word	0x200001b8
 8001ae4:	40014800 	.word	0x40014800
 8001ae8:	200001bc 	.word	0x200001bc
 8001aec:	40002000 	.word	0x40002000
 8001af0:	200001c0 	.word	0x200001c0
 8001af4:	47800000 	.word	0x47800000

08001af8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE>:

//-------------------------------------------------------------------
void Timer_Mcu::enablePWM( BYTE channel, Mode polarity )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	4613      	mov	r3, r2
 8001b06:	70bb      	strb	r3, [r7, #2]
  switch( timerId )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7d1b      	ldrb	r3, [r3, #20]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	f200 8198 	bhi.w	8001e44 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x34c>
 8001b14:	a201      	add	r2, pc, #4	@ (adr r2, 8001b1c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x24>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001baf 	.word	0x08001baf
 8001b24:	08001c0d 	.word	0x08001c0d
 8001b28:	08001c69 	.word	0x08001c69
 8001b2c:	08001cc5 	.word	0x08001cc5
 8001b30:	08001d21 	.word	0x08001d21
 8001b34:	08001d2f 	.word	0x08001d2f
 8001b38:	08001d97 	.word	0x08001d97
 8001b3c:	08001dcb 	.word	0x08001dcb
 8001b40:	08001df7 	.word	0x08001df7
 8001b44:	08001e23 	.word	0x08001e23
  {
    case TIM_1:
      switch( channel )
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d822      	bhi.n	8001b94 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x9c>
 8001b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b54 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x5c>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b7d 	.word	0x08001b7d
 8001b60:	08001b89 	.word	0x08001b89
      {
        case 0: PinConfig::set( PinConfig::TIM1_CH1     ); break;
 8001b64:	2100      	movs	r1, #0
 8001b66:	f44f 70b8 	mov.w	r0, #368	@ 0x170
 8001b6a:	f7ff f82b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b6e:	e017      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 1: PinConfig::set( PinConfig::TIM1_CH2     ); break;
 8001b70:	2100      	movs	r1, #0
 8001b72:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8001b76:	f7ff f825 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b7a:	e011      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 2: PinConfig::set( PinConfig::TIM1_CH3     ); break;
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f44f 70ba 	mov.w	r0, #372	@ 0x174
 8001b82:	f7ff f81f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b86:	e00b      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 3: PinConfig::set( PinConfig::TIM1_CH4     ); break;
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f44f 70bb 	mov.w	r0, #374	@ 0x176
 8001b8e:	f7ff f819 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b92:	e005      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	330c      	adds	r3, #12
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fb26 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM1->BDTR |= (1<<15); // MOE Master Output Enable
 8001ba0:	4bb9      	ldr	r3, [pc, #740]	@ (8001e88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x390>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	4ab8      	ldr	r2, [pc, #736]	@ (8001e88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x390>)
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001baa:	6453      	str	r3, [r2, #68]	@ 0x44
      break;
 8001bac:	e151      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_2:
      switch( channel )
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d823      	bhi.n	8001bfc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x104>
 8001bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xc4>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be5 	.word	0x08001be5
 8001bc8:	08001bf1 	.word	0x08001bf1
      {
        case 0: PinConfig::set( PinConfig::TIM2_CH1     ); break;
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f44f 70bc 	mov.w	r0, #376	@ 0x178
 8001bd2:	f7fe fff7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001bd6:	e018      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 1: PinConfig::set( PinConfig::TIM2_CH2     ); break;
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f240 1079 	movw	r0, #377	@ 0x179
 8001bde:	f7fe fff1 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001be2:	e012      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 2: PinConfig::set( PinConfig::TIM2_CH3     ); break;
 8001be4:	2100      	movs	r1, #0
 8001be6:	f44f 70bd 	mov.w	r0, #378	@ 0x17a
 8001bea:	f7fe ffeb 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001bee:	e00c      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 3: PinConfig::set( PinConfig::TIM2_CH4     ); break;
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f240 107b 	movw	r0, #379	@ 0x17b
 8001bf6:	f7fe ffe5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001bfa:	e006      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	330c      	adds	r3, #12
 8001c00:	2108      	movs	r1, #8
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 faf2 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001c08:	e123      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001c0a:	e122      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_3:
      switch( channel )
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d822      	bhi.n	8001c58 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x160>
 8001c12:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x120>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c35 	.word	0x08001c35
 8001c20:	08001c41 	.word	0x08001c41
 8001c24:	08001c4d 	.word	0x08001c4d
      {
        case 0: PinConfig::set( PinConfig::TIM3_CH1     ); break;
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f240 107d 	movw	r0, #381	@ 0x17d
 8001c2e:	f7fe ffc9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c32:	e018      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 1: PinConfig::set( PinConfig::TIM3_CH2     ); break;
 8001c34:	2100      	movs	r1, #0
 8001c36:	f44f 70bf 	mov.w	r0, #382	@ 0x17e
 8001c3a:	f7fe ffc3 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c3e:	e012      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 2: PinConfig::set( PinConfig::TIM3_CH3     ); break;
 8001c40:	2100      	movs	r1, #0
 8001c42:	f240 107f 	movw	r0, #383	@ 0x17f
 8001c46:	f7fe ffbd 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c4a:	e00c      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 3: PinConfig::set( PinConfig::TIM3_CH4     ); break;
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8001c52:	f7fe ffb7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c56:	e006      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fac4 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001c64:	e0f5      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001c66:	e0f4      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_4:
      switch( channel )
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d822      	bhi.n	8001cb4 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1bc>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x17c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c91 	.word	0x08001c91
 8001c7c:	08001c9d 	.word	0x08001c9d
 8001c80:	08001ca9 	.word	0x08001ca9
      {
        case 0: PinConfig::set( PinConfig::TIM4_CH1     ); break;
 8001c84:	2100      	movs	r1, #0
 8001c86:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 8001c8a:	f7fe ff9b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c8e:	e018      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 1: PinConfig::set( PinConfig::TIM4_CH2     ); break;
 8001c90:	2100      	movs	r1, #0
 8001c92:	f240 1083 	movw	r0, #387	@ 0x183
 8001c96:	f7fe ff95 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c9a:	e012      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 2: PinConfig::set( PinConfig::TIM4_CH3     ); break;
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f44f 70c2 	mov.w	r0, #388	@ 0x184
 8001ca2:	f7fe ff8f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001ca6:	e00c      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 3: PinConfig::set( PinConfig::TIM4_CH4     ); break;
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f240 1085 	movw	r0, #389	@ 0x185
 8001cae:	f7fe ff89 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001cb2:	e006      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	2108      	movs	r1, #8
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 fa96 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001cc0:	e0c7      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001cc2:	e0c6      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_5:
      switch( channel )
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d822      	bhi.n	8001d10 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x218>
 8001cca:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1d8>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001cf9 	.word	0x08001cf9
 8001cdc:	08001d05 	.word	0x08001d05
      {
        case 0: PinConfig::set( PinConfig::TIM5_CH1     ); break;
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f240 1087 	movw	r0, #391	@ 0x187
 8001ce6:	f7fe ff6d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001cea:	e018      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 1: PinConfig::set( PinConfig::TIM5_CH2     ); break;
 8001cec:	2100      	movs	r1, #0
 8001cee:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001cf2:	f7fe ff67 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001cf6:	e012      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 2: PinConfig::set( PinConfig::TIM5_CH3     ); break;
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	f240 1089 	movw	r0, #393	@ 0x189
 8001cfe:	f7fe ff61 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d02:	e00c      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 3: PinConfig::set( PinConfig::TIM5_CH4     ); break;
 8001d04:	2100      	movs	r1, #0
 8001d06:	f44f 70c5 	mov.w	r0, #394	@ 0x18a
 8001d0a:	f7fe ff5b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d0e:	e006      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	330c      	adds	r3, #12
 8001d14:	2108      	movs	r1, #8
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fa68 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001d1c:	e099      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001d1e:	e098      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_7:
      switch( channel )
      {
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	330c      	adds	r3, #12
 8001d24:	2108      	movs	r1, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fa60 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001d2c:	e091      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_8:
      switch( channel )
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d823      	bhi.n	8001d7c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x284>
 8001d34:	a201      	add	r2, pc, #4	@ (adr r2, 8001d3c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x244>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d59 	.word	0x08001d59
 8001d44:	08001d65 	.word	0x08001d65
 8001d48:	08001d71 	.word	0x08001d71
      {
        case 0: PinConfig::set( PinConfig::TIM8_CH1     ); break;
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f240 108d 	movw	r0, #397	@ 0x18d
 8001d52:	f7fe ff37 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d56:	e017      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 1: PinConfig::set( PinConfig::TIM8_CH2     ); break;
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f240 108f 	movw	r0, #399	@ 0x18f
 8001d5e:	f7fe ff31 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d62:	e011      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 2: PinConfig::set( PinConfig::TIM8_CH3     ); break;
 8001d64:	2100      	movs	r1, #0
 8001d66:	f240 1091 	movw	r0, #401	@ 0x191
 8001d6a:	f7fe ff2b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d6e:	e00b      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 3: PinConfig::set( PinConfig::TIM8_CH4     ); break;
 8001d70:	2100      	movs	r1, #0
 8001d72:	f240 1093 	movw	r0, #403	@ 0x193
 8001d76:	f7fe ff25 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d7a:	e005      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	2108      	movs	r1, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fa32 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM8->BDTR |= (1<<15); // MOE Master Output Enable
 8001d88:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x394>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e8c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x394>)
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d92:	6453      	str	r3, [r2, #68]	@ 0x44
      break;
 8001d94:	e05d      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_9:
      switch( channel )
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2aa>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d006      	beq.n	8001dae <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2b6>
 8001da0:	e00b      	b.n	8001dba <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2c2>
      {
        case 0: PinConfig::set( PinConfig::TIM9_CH1     ); break;
 8001da2:	2100      	movs	r1, #0
 8001da4:	f240 1095 	movw	r0, #405	@ 0x195
 8001da8:	f7fe ff0c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001dac:	e00c      	b.n	8001dc8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2d0>
        case 1: PinConfig::set( PinConfig::TIM9_CH2     ); break;
 8001dae:	2100      	movs	r1, #0
 8001db0:	f44f 70cb 	mov.w	r0, #406	@ 0x196
 8001db4:	f7fe ff06 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001db8:	e006      	b.n	8001dc8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2d0>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 fa13 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001dc6:	e044      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001dc8:	e043      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_10:
      switch( channel )
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2e4>
      {
        case 0: PinConfig::set( PinConfig::TIM10_CH1     ); break;
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001dd6:	f7fe fef5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001dda:	e005      	b.n	8001de8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f0>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	330c      	adds	r3, #12
 8001de0:	2108      	movs	r1, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fa02 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM10->BDTR |= (1<<15); // MOE Master Output Enable
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x398>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	4a28      	ldr	r2, [pc, #160]	@ (8001e90 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x398>)
 8001dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df2:	6453      	str	r3, [r2, #68]	@ 0x44
      break;
 8001df4:	e02d      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_11:
      switch( channel )
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x310>
      {
        case 0: PinConfig::set( PinConfig::TIM11_CH1     ); break;
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f240 1069 	movw	r0, #361	@ 0x169
 8001e02:	f7fe fedf 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e06:	e005      	b.n	8001e14 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x31c>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	330c      	adds	r3, #12
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 f9ec 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM11->BDTR |= (1<<15); // MOE Master Output Enable
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x39c>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e18:	4a1e      	ldr	r2, [pc, #120]	@ (8001e94 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x39c>)
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1e:	6453      	str	r3, [r2, #68]	@ 0x44
      break;
 8001e20:	e017      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_14:
      switch( channel )
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x33e>
      {
        case 0: PinConfig::set( PinConfig::TIM14_CH1     ); break;
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f240 106d 	movw	r0, #365	@ 0x16d
 8001e2e:	f7fe fec9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e32:	bf00      	nop
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
      }
      break;
 8001e34:	e00d      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 f9d5 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001e42:	e006      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	330c      	adds	r3, #12
 8001e48:	2107      	movs	r1, #7
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 f9ce 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001e50:	bf00      	nop
  }

  WORD ccmr =  (7<<4)  // OCxM: PWM-mode 2
 8001e52:	2378      	movs	r3, #120	@ 0x78
 8001e54:	81bb      	strh	r3, [r7, #12]
              |(1<<3); // OCxPE: preload enable

  WORD ccer = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
  if( polarity )
 8001e5a:	78bb      	ldrb	r3, [r7, #2]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x36e>
  {
   ccer =  (1<<2)  // CCxNE: enable
 8001e60:	230c      	movs	r3, #12
 8001e62:	81fb      	strh	r3, [r7, #14]
 8001e64:	e001      	b.n	8001e6a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x372>
          |(1<<3); // CCxNP: polarity active low
  }
  else
  {
   ccer =  (1<<0)  // CCxE: enable
 8001e66:	2303      	movs	r3, #3
 8001e68:	81fb      	strh	r3, [r7, #14]
          |(1<<1); // CCxP: polarity active low
  }
  switch( channel )
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d85c      	bhi.n	8001f2a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x432>
 8001e70:	a201      	add	r2, pc, #4	@ (adr r2, 8001e78 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x380>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e99 	.word	0x08001e99
 8001e7c:	08001ebb 	.word	0x08001ebb
 8001e80:	08001ee1 	.word	0x08001ee1
 8001e84:	08001f05 	.word	0x08001f05
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40010400 	.word	0x40010400
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800
  {
    case 0:
      ptr->CCMR1 |=  ccmr;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	6999      	ldr	r1, [r3, #24]
 8001e9e:	89ba      	ldrh	r2, [r7, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	6a19      	ldr	r1, [r3, #32]
 8001eae:	89fa      	ldrh	r2, [r7, #14]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	621a      	str	r2, [r3, #32]
      break;
 8001eb8:	e03e      	b.n	8001f38 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x440>

    case 1:
      ptr->CCMR1 |=  ccmr<<8;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	6999      	ldr	r1, [r3, #24]
 8001ec0:	89bb      	ldrh	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer<<4;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	6a19      	ldr	r1, [r3, #32]
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	011a      	lsls	r2, r3, #4
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	621a      	str	r2, [r3, #32]
      break;
 8001ede:	e02b      	b.n	8001f38 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x440>

    case 2:
      ptr->CCMR2 |=  ccmr;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	69d9      	ldr	r1, [r3, #28]
 8001ee6:	89ba      	ldrh	r2, [r7, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<8;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	6a19      	ldr	r1, [r3, #32]
 8001ef6:	89fb      	ldrh	r3, [r7, #14]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	621a      	str	r2, [r3, #32]
      break;
 8001f02:	e019      	b.n	8001f38 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x440>

    case 3:
      ptr->CCMR2 |=  ccmr<<8;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	69d9      	ldr	r1, [r3, #28]
 8001f0a:	89bb      	ldrh	r3, [r7, #12]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<12;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	6a19      	ldr	r1, [r3, #32]
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	031a      	lsls	r2, r3, #12
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
      break;
 8001f28:	e006      	b.n	8001f38 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x440>

    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	2108      	movs	r1, #8
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 f95b 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001f36:	bf00      	nop
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht>:

//-------------------------------------------------------------------
void Timer_Mcu::setPWM( BYTE ch, WORD value )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	803b      	strh	r3, [r7, #0]
  value = (WORD)((DWORD)value*tics >> 16);
 8001f50:	883b      	ldrh	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6912      	ldr	r2, [r2, #16]
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	803b      	strh	r3, [r7, #0]

  switch( ch )
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d81f      	bhi.n	8001fa4 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x64>
 8001f64:	a201      	add	r2, pc, #4	@ (adr r2, 8001f6c <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x2c>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001f87 	.word	0x08001f87
 8001f74:	08001f91 	.word	0x08001f91
 8001f78:	08001f9b 	.word	0x08001f9b
  {
    case 0: ptr->CCR1  = value; break;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	883a      	ldrh	r2, [r7, #0]
 8001f82:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f84:	e015      	b.n	8001fb2 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 1: ptr->CCR2  = value; break;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	883a      	ldrh	r2, [r7, #0]
 8001f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f8e:	e010      	b.n	8001fb2 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 2: ptr->CCR3  = value; break;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	883a      	ldrh	r2, [r7, #0]
 8001f96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f98:	e00b      	b.n	8001fb2 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 3: ptr->CCR4  = value; break;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	883a      	ldrh	r2, [r7, #0]
 8001fa0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fa2:	e006      	b.n	8001fb2 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	2108      	movs	r1, #8
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f91e 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001fb0:	bf00      	nop
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop

08001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>:

//-------------------------------------------------------------------
void Timer_Mcu::isr(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  // ptr->SR &= ~TIM_SR_TIF;
  ptr->SR = 0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  isrHandler();
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3310      	adds	r3, #16
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4798      	blx	r3
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <TIM1_UP_TIM10_IRQHandler>:

//-------------------------------------------------------------------
extern "C" {
  void TIM1_UP_TIM10_IRQHandler(void)
  {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    if( TIM1->SR & TIM_SR_UIF )
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <TIM1_UP_TIM10_IRQHandler+0x2a>
    {
      TIM1->SR = 0;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_1->isr();
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <TIM1_UP_TIM10_IRQHandler+0x78>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ffd7 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
    if( TIM9->SR )
 800200e:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf14      	ite	ne
 8002016:	2301      	movne	r3, #1
 8002018:	2300      	moveq	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <TIM1_UP_TIM10_IRQHandler+0x4c>
    {
      TIM9->SR=0;
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_9->isr();
 8002026:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffc6 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
    if( TIM10->SR )
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <TIM1_UP_TIM10_IRQHandler+0x6e>
    {
      TIM10->SR=0;
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_10->isr();
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <TIM1_UP_TIM10_IRQHandler+0x88>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ffb5 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	20000198 	.word	0x20000198
 8002060:	40014000 	.word	0x40014000
 8002064:	200001b4 	.word	0x200001b4
 8002068:	40014400 	.word	0x40014400
 800206c:	200001b8 	.word	0x200001b8

08002070 <TIM1_TRG_COM_TIM11_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM1_TRG_COM_TIM11_IRQHandler(void)
  {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
    if( TIM11->SR )
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    {
      TIM11->SR=0;
 8002086:	4b05      	ldr	r3, [pc, #20]	@ (800209c <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_11->isr();
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff93 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40014800 	.word	0x40014800
 80020a0:	200001bc 	.word	0x200001bc

080020a4 <TIM8_TRG_COM_TIM14_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_TRG_COM_TIM14_IRQHandler(void)
  {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    if( TIM14->SR )
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    {
      TIM14->SR=0;
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_14->isr();
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff79 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40002000 	.word	0x40002000
 80020d4:	200001c0 	.word	0x200001c0

080020d8 <TIM2_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM2_IRQHandler(void)
  {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_2->isr();
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <TIM2_IRQHandler+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff6b 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000019c 	.word	0x2000019c

080020f0 <TIM3_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM3_IRQHandler(void)
  {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_3->isr();
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <TIM3_IRQHandler+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5f 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200001a0 	.word	0x200001a0

08002108 <TIM4_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM4_IRQHandler(void)
  {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_4->isr();
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <TIM4_IRQHandler+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff53 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200001a4 	.word	0x200001a4

08002120 <TIM5_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM5_IRQHandler(void)
  {
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_5->isr();
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <TIM5_IRQHandler+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff47 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200001a8 	.word	0x200001a8

08002138 <TIM7_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM7_IRQHandler(void)
  {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_7->isr();
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <TIM7_IRQHandler+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff3b 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001ac 	.word	0x200001ac

08002150 <TIM8_CC_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_CC_IRQHandler(void)
  {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_8->isr();
 8002154:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <TIM8_CC_IRQHandler+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff2f 	bl	8001fbc <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200001b0 	.word	0x200001b0

08002168 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>:
Uart_Mcu *Uart_Mcu::uartPtr_4 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_5 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_6 = 0;

//-------------------------------------------------------------------
Uart_Mcu::Uart_Mcu( USART_Id id,
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	461a      	mov	r2, r3
 8002174:	460b      	mov	r3, r1
 8002176:	72fb      	strb	r3, [r7, #11]
 8002178:	4613      	mov	r3, r2
 800217a:	72bb      	strb	r3, [r7, #10]
                    DWORD    baud,
                    BYTE     mode,
                    WORD     sizeRxBuf,
                    WORD     sizeTxBuf )

: Uart( ReportID_Hw::Module::UART_MCU, sizeRxBuf, sizeTxBuf )
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	8bbb      	ldrh	r3, [r7, #28]
 8002180:	8b3a      	ldrh	r2, [r7, #24]
 8002182:	2120      	movs	r1, #32
 8002184:	f001 ff66 	bl	8004054 <_ZN9EmbSysLib2Hw4UartC1Ettt>
 8002188:	4aa9      	ldr	r2, [pc, #676]	@ (8002430 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2c8>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	601a      	str	r2, [r3, #0]
{
  switch( id )
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	3b01      	subs	r3, #1
 8002192:	2b05      	cmp	r3, #5
 8002194:	f200 80fc 	bhi.w	8002390 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x228>
 8002198:	a201      	add	r2, pc, #4	@ (adr r2, 80021a0 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x38>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b9 	.word	0x080021b9
 80021a4:	08002215 	.word	0x08002215
 80021a8:	08002271 	.word	0x08002271
 80021ac:	080022cd 	.word	0x080022cd
 80021b0:	08002301 	.word	0x08002301
 80021b4:	08002335 	.word	0x08002335
  {
    case USART_1:
      ptr           = (USART_TypeDef*)USART1_BASE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a9e      	ldr	r2, [pc, #632]	@ (8002434 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2cc>)
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_1     = this;
 80021be:	4a9e      	ldr	r2, [pc, #632]	@ (8002438 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d0>)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80021c4:	4b9d      	ldr	r3, [pc, #628]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	4a9c      	ldr	r2, [pc, #624]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	6453      	str	r3, [r2, #68]	@ 0x44
      PinConfig::set( PinConfig::USART1_RX, PinConfig::ALTERNATE_FUNC );
 80021d0:	2102      	movs	r1, #2
 80021d2:	f240 10af 	movw	r0, #431	@ 0x1af
 80021d6:	f7fe fcf5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART1_TX, PinConfig::ALTERNATE_FUNC );
 80021da:	2102      	movs	r1, #2
 80021dc:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 80021e0:	f7fe fcf0 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 80021e4:	7abb      	ldrb	r3, [r7, #10]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x90>
      {
        PinConfig::set( PinConfig::USART1_RTS, PinConfig::ALTERNATE_FUNC );
 80021ee:	2102      	movs	r1, #2
 80021f0:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 80021f4:	f7fe fce6 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 80021f8:	7abb      	ldrb	r3, [r7, #10]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0xa4>
      {
        PinConfig::set( PinConfig::USART1_CTS, PinConfig::ALTERNATE_FUNC );
 8002202:	2102      	movs	r1, #2
 8002204:	f44f 70d6 	mov.w	r0, #428	@ 0x1ac
 8002208:	f7fe fcdc 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART1_IRQn );
 800220c:	2025      	movs	r0, #37	@ 0x25
 800220e:	f7fe f89f 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 8002212:	e0c4      	b.n	800239e <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

  case USART_2:
      ptr           = (USART_TypeDef*)USART2_BASE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a8a      	ldr	r2, [pc, #552]	@ (8002440 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d8>)
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_2     = this;
 800221a:	4a8a      	ldr	r2, [pc, #552]	@ (8002444 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2dc>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002220:	4b86      	ldr	r3, [pc, #536]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	4a85      	ldr	r2, [pc, #532]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222a:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::USART2_RX, PinConfig::ALTERNATE_FUNC );
 800222c:	2102      	movs	r1, #2
 800222e:	f240 10b5 	movw	r0, #437	@ 0x1b5
 8002232:	f7fe fcc7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART2_TX, PinConfig::ALTERNATE_FUNC );
 8002236:	2102      	movs	r1, #2
 8002238:	f44f 70db 	mov.w	r0, #438	@ 0x1b6
 800223c:	f7fe fcc2 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 8002240:	7abb      	ldrb	r3, [r7, #10]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0xec>
      {
        PinConfig::set( PinConfig::USART2_RTS, PinConfig::ALTERNATE_FUNC );
 800224a:	2102      	movs	r1, #2
 800224c:	f44f 70da 	mov.w	r0, #436	@ 0x1b4
 8002250:	f7fe fcb8 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002254:	7abb      	ldrb	r3, [r7, #10]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x100>
      {
        PinConfig::set( PinConfig::USART2_CTS, PinConfig::ALTERNATE_FUNC );
 800225e:	2102      	movs	r1, #2
 8002260:	f44f 70d9 	mov.w	r0, #434	@ 0x1b2
 8002264:	f7fe fcae 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART2_IRQn );
 8002268:	2026      	movs	r0, #38	@ 0x26
 800226a:	f7fe f871 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800226e:	e096      	b.n	800239e <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case USART_3:
      ptr           = (USART_TypeDef*)USART3_BASE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a75      	ldr	r2, [pc, #468]	@ (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e0>)
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_3     = this;
 8002276:	4a75      	ldr	r2, [pc, #468]	@ (800244c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e4>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 800227c:	4b6f      	ldr	r3, [pc, #444]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	4a6e      	ldr	r2, [pc, #440]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002286:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::USART3_RX, PinConfig::ALTERNATE_FUNC );
 8002288:	2102      	movs	r1, #2
 800228a:	f240 10bb 	movw	r0, #443	@ 0x1bb
 800228e:	f7fe fc99 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART3_TX, PinConfig::ALTERNATE_FUNC );
 8002292:	2102      	movs	r1, #2
 8002294:	f44f 70de 	mov.w	r0, #444	@ 0x1bc
 8002298:	f7fe fc94 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 800229c:	7abb      	ldrb	r3, [r7, #10]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x148>
      {
        PinConfig::set( PinConfig::USART3_RTS, PinConfig::ALTERNATE_FUNC );
 80022a6:	2102      	movs	r1, #2
 80022a8:	f44f 70dd 	mov.w	r0, #442	@ 0x1ba
 80022ac:	f7fe fc8a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 80022b0:	7abb      	ldrb	r3, [r7, #10]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x15c>
      {
        PinConfig::set( PinConfig::USART3_CTS, PinConfig::ALTERNATE_FUNC );
 80022ba:	2102      	movs	r1, #2
 80022bc:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 80022c0:	f7fe fc80 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART3_IRQn );
 80022c4:	2027      	movs	r0, #39	@ 0x27
 80022c6:	f7fe f843 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80022ca:	e068      	b.n	800239e <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case UART_4:
      ptr           = (USART_TypeDef*)UART4_BASE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a60      	ldr	r2, [pc, #384]	@ (8002450 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e8>)
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_4     = this;
 80022d2:	4a60      	ldr	r2, [pc, #384]	@ (8002454 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2ec>)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART4EN;
 80022d8:	4b58      	ldr	r3, [pc, #352]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	4a57      	ldr	r2, [pc, #348]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80022de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022e2:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::UART4_RX, PinConfig::ALTERNATE_FUNC );
 80022e4:	2102      	movs	r1, #2
 80022e6:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80022ea:	f7fe fc6b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::UART4_TX, PinConfig::ALTERNATE_FUNC );
 80022ee:	2102      	movs	r1, #2
 80022f0:	f240 109b 	movw	r0, #411	@ 0x19b
 80022f4:	f7fe fc66 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      // no RTS/CTS
      NVIC_EnableIRQ( UART4_IRQn );
 80022f8:	2034      	movs	r0, #52	@ 0x34
 80022fa:	f7fe f829 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80022fe:	e04e      	b.n	800239e <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case UART_5:
      ptr           = (USART_TypeDef*)UART5_BASE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a55      	ldr	r2, [pc, #340]	@ (8002458 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f0>)
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_5     = this;
 8002306:	4a55      	ldr	r2, [pc, #340]	@ (800245c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f4>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART5EN;
 800230c:	4b4b      	ldr	r3, [pc, #300]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	4a4a      	ldr	r2, [pc, #296]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002316:	6413      	str	r3, [r2, #64]	@ 0x40
      PinConfig::set( PinConfig::UART5_RX, PinConfig::ALTERNATE_FUNC );
 8002318:	2102      	movs	r1, #2
 800231a:	f240 109f 	movw	r0, #415	@ 0x19f
 800231e:	f7fe fc51 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::UART5_TX, PinConfig::ALTERNATE_FUNC );
 8002322:	2102      	movs	r1, #2
 8002324:	f44f 70d0 	mov.w	r0, #416	@ 0x1a0
 8002328:	f7fe fc4c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      // no RTS/CTS
      NVIC_EnableIRQ( UART5_IRQn );
 800232c:	2035      	movs	r0, #53	@ 0x35
 800232e:	f7fe f80f 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 8002332:	e034      	b.n	800239e <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case USART_6:
      ptr           = (USART_TypeDef*)USART6_BASE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a4a      	ldr	r2, [pc, #296]	@ (8002460 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f8>)
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24
      uartPtr_6     = this;
 800233a:	4a4a      	ldr	r2, [pc, #296]	@ (8002464 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2fc>)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002344:	4a3d      	ldr	r2, [pc, #244]	@ (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	6453      	str	r3, [r2, #68]	@ 0x44
      PinConfig::set( PinConfig::USART6_RX, PinConfig::ALTERNATE_FUNC );
 800234c:	2102      	movs	r1, #2
 800234e:	f240 10c1 	movw	r0, #449	@ 0x1c1
 8002352:	f7fe fc37 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART6_TX, PinConfig::ALTERNATE_FUNC );
 8002356:	2102      	movs	r1, #2
 8002358:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800235c:	f7fe fc32 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 8002360:	7abb      	ldrb	r3, [r7, #10]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x20c>
      {
        PinConfig::set( PinConfig::USART6_RTS, PinConfig::ALTERNATE_FUNC );
 800236a:	2102      	movs	r1, #2
 800236c:	f44f 70e0 	mov.w	r0, #448	@ 0x1c0
 8002370:	f7fe fc28 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002374:	7abb      	ldrb	r3, [r7, #10]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x220>
      {
        PinConfig::set( PinConfig::USART6_CTS, PinConfig::ALTERNATE_FUNC );
 800237e:	2102      	movs	r1, #2
 8002380:	f44f 70df 	mov.w	r0, #446	@ 0x1be
 8002384:	f7fe fc1e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART6_IRQn );
 8002388:	2047      	movs	r0, #71	@ 0x47
 800238a:	f7fd ffe1 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800238e:	e006      	b.n	800239e <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	331e      	adds	r3, #30
 8002394:	2107      	movs	r1, #7
 8002396:	4618      	mov	r0, r3
 8002398:	f000 ff28 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 800239c:	bf00      	nop

  }

  ptr->CR2 |=  ((MTYPE)0<<12); // 0: 1 stop bit
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	605a      	str	r2, [r3, #4]

  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x258>
 80023ba:	f04f 2110 	mov.w	r1, #268439552	@ 0x10001000
 80023be:	e000      	b.n	80023c2 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x25a>
 80023c0:	2100      	movs	r1, #0
                     |  ((mode&(EVEN|ODD))?USART_CR1_PCE:0)  //  parity
 80023c2:	7abb      	ldrb	r3, [r7, #10]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x26a>
 80023cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023d0:	e000      	b.n	80023d4 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x26c>
 80023d2:	2300      	movs	r3, #0
 80023d4:	4319      	orrs	r1, r3
                     |  ((mode&      ODD )?USART_CR1_PS :0)  // 0: even
 80023d6:	7abb      	ldrb	r3, [r7, #10]
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023de:	430b      	orrs	r3, r1
  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f042 020c 	orr.w	r2, r2, #12
 80023ea:	601a      	str	r2, [r3, #0]
                     |  USART_CR1_RE   // RX mode
                     |  USART_CR1_TE );// TX mode

  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	6899      	ldr	r1, [r3, #8]
 80023f2:	7abb      	ldrb	r3, [r7, #10]
 80023f4:	015b      	lsls	r3, r3, #5
 80023f6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
                | ((mode&CTS)?USART_CR3_CTSE:0) ); // set hardware flow control
 80023fa:	7abb      	ldrb	r3, [r7, #10]
 80023fc:	01db      	lsls	r3, r3, #7
 80023fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002402:	431a      	orrs	r2, r3
  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

  setBaudrate( baud );
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f84a 	bl	80024a8 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>

  ptr->CR1 |= (  USART_CR1_UE       // Enable USART
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	f042 0261 	orr.w	r2, r2, #97	@ 0x61
 8002422:	601a      	str	r2, [r3, #0]
               | USART_CR1_TCIE     // Transm. complete interr. enable
               | USART_CR1_RXNEIE );// Receive reg. not empty interr. enable
}
<<<<<<< HEAD
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	080099f4 	.word	0x080099f4
 8002434:	40011000 	.word	0x40011000
 8002438:	200001c4 	.word	0x200001c4
 800243c:	40023800 	.word	0x40023800
 8002440:	40004400 	.word	0x40004400
 8002444:	200001c8 	.word	0x200001c8
 8002448:	40004800 	.word	0x40004800
 800244c:	200001cc 	.word	0x200001cc
 8002450:	40004c00 	.word	0x40004c00
 8002454:	200001d0 	.word	0x200001d0
 8002458:	40005000 	.word	0x40005000
 800245c:	200001d4 	.word	0x200001d4
 8002460:	40011400 	.word	0x40011400
 8002464:	200001d8 	.word	0x200001d8
=======
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08009800 	.word	0x08009800
 8002440:	40011000 	.word	0x40011000
 8002444:	200001c4 	.word	0x200001c4
 8002448:	40023800 	.word	0x40023800
 800244c:	40004400 	.word	0x40004400
 8002450:	200001c8 	.word	0x200001c8
 8002454:	40004800 	.word	0x40004800
 8002458:	200001cc 	.word	0x200001cc
 800245c:	40004c00 	.word	0x40004c00
 8002460:	200001d0 	.word	0x200001d0
 8002464:	40005000 	.word	0x40005000
 8002468:	200001d4 	.word	0x200001d4
 800246c:	40011400 	.word	0x40011400
 8002470:	200001d8 	.word	0x200001d8
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08002468 <_ZN9EmbSysLib2Hw8Uart_Mcu7getByteEv>:

//-------------------------------------------------------------------
inline BYTE Uart_Mcu::getByte( void )
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return( ptr->RDR );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	b2db      	uxtb	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_ZN9EmbSysLib2Hw8Uart_Mcu7setByteEh>:

//-------------------------------------------------------------------
inline void Uart_Mcu::setByte( BYTE c )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  ptr->TDR = c;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	0000      	movs	r0, r0
	...

080024a8 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>:
//            fck                         fck
//   div = ---------  =>  BRR = 16*div = ------
//         16 x baud                      baud
//
void Uart_Mcu::setBaudrate( DWORD baud )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  if( baud > 1500)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d923      	bls.n	8002504 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x5c>
  {
    DWORD brr = (WORD)(2.0*system_PCLK_UART / baud);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80024c6:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8002538 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x90>
 80024ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024d2:	ee17 3a90 	vmov	r3, s15
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	60bb      	str	r3, [r7, #8]
    ptr->BRR  = (brr&0XFFF0) | ((brr>>1)&0x0007);
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80024e0:	4013      	ands	r3, r2
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	0852      	lsrs	r2, r2, #1
 80024e6:	f002 0107 	and.w	r1, r2, #7
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ee:	430b      	orrs	r3, r1
 80024f0:	60d3      	str	r3, [r2, #12]
    ptr->CR1 |= USART_CR1_OVER8;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002500:	601a      	str	r2, [r3, #0]
  {
    DWORD brr = (WORD)(system_PCLK_UART / baud);
    ptr->BRR  = brr;
    ptr->CR1 &= ~USART_CR1_OVER8;
  }
}
 8002502:	e011      	b.n	8002528 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x80>
    DWORD brr = (WORD)(system_PCLK_UART / baud);
 8002504:	4a0e      	ldr	r2, [pc, #56]	@ (8002540 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x98>)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	60fb      	str	r3, [r7, #12]
    ptr->BRR  = brr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	60da      	str	r2, [r3, #12]
    ptr->CR1 &= ~USART_CR1_OVER8;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	f3af 8000 	nop.w
 8002538:	00000000 	.word	0x00000000
 800253c:	4197d784 	.word	0x4197d784
 8002540:	02faf080 	.word	0x02faf080

08002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>:

//-------------------------------------------------------------------
void Uart_Mcu::isr( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if( ptr->ISR & USART_ISR_RXNE ) // Receive data register not empty?
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x2e>
  {
    isrRx();
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	331c      	adds	r3, #28
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4610      	mov	r0, r2
 8002570:	4798      	blx	r3
  }
  if( ptr->ISR & USART_ISR_TC ) // Transmission complete?
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x64>
  {
    ptr->ICR |= USART_ICR_TCCF;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002598:	621a      	str	r2, [r3, #32]
    isrTx();
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3320      	adds	r3, #32
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4610      	mov	r0, r2
 80025a6:	4798      	blx	r3
  }
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <USART1_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART1_IRQHandler(void)
  {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_1->isr();
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <USART1_IRQHandler+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ffc3 	bl	8002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200001c4 	.word	0x200001c4

080025c8 <USART2_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART2_IRQHandler(void)
  {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_2->isr();
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <USART2_IRQHandler+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ffb7 	bl	8002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200001c8 	.word	0x200001c8

080025e0 <USART3_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART3_IRQHandler(void)
  {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_3->isr();
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <USART3_IRQHandler+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ffab 	bl	8002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200001cc 	.word	0x200001cc

080025f8 <UART4_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART4_IRQHandler(void)
  {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_4->isr();
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <UART4_IRQHandler+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff9f 	bl	8002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200001d0 	.word	0x200001d0

08002610 <UART5_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART5_IRQHandler(void)
  {
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_5->isr();
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <UART5_IRQHandler+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff93 	bl	8002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200001d4 	.word	0x200001d4

08002628 <USART6_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART6_IRQHandler(void)
  {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_6->isr();
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <USART6_IRQHandler+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff87 	bl	8002544 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200001d8 	.word	0x200001d8

08002640 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth>:
  fifo = (__IO DWORD                 *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE         + (num)*USB_OTG_FIFO_SIZE   );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::config( WORD epMPS, BYTE epType )
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  txBuf.maxpacket = epMPS;
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83

  if( num == 0 )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0
 8002662:	2300      	movs	r3, #0
 8002664:	807b      	strh	r3, [r7, #2]
  }
  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (num)));
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x90>)
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	2301      	movs	r3, #1
 8002672:	408b      	lsls	r3, r1
 8002674:	b29b      	uxth	r3, r3
 8002676:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x90>)
 8002678:	4313      	orrs	r3, r2
 800267a:	61cb      	str	r3, [r1, #28]

  if( !(inep->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x82>
  {
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ )
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                      | (epType << 18 )
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	049b      	lsls	r3, r3, #18
 80026a8:	4319      	orrs	r1, r3
                      | (num    << 22 )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	059b      	lsls	r3, r3, #22
 80026b0:	430b      	orrs	r3, r1
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ )
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x94>)
 80026be:	430b      	orrs	r3, r1
 80026c0:	6013      	str	r3, [r2, #0]
                      | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
                      | USB_OTG_DIEPCTL_USBAEP );
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	50000800 	.word	0x50000800
 80026d4:	10008000 	.word	0x10008000

080026d8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>:
  return( len );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::writeToFifo( void )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  WORD len = MIN( txBuf.size, txBuf.maxpacket );
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f003 f884 	bl	80057fc <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 80026f4:	4603      	mov	r3, r0
 80026f6:	823b      	strh	r3, [r7, #16]
  WORD cnt = (len + 3) / 4;
 80026f8:	8a3b      	ldrh	r3, [r7, #16]
 80026fa:	3303      	adds	r3, #3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	da00      	bge.n	8002702 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x2a>
 8002700:	3303      	adds	r3, #3
 8002702:	109b      	asrs	r3, r3, #2
 8002704:	81fb      	strh	r3, [r7, #14]

  if( (inep->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= cnt )
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	b29a      	uxth	r2, r3
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	429a      	cmp	r2, r3
 8002714:	bf2c      	ite	cs
 8002716:	2301      	movcs	r3, #1
 8002718:	2300      	movcc	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01d      	beq.n	800275c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x84>
  {
    DWORD *src = (DWORD *)&txBuf.data[0];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]

    txBuf.size = 0;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    txBuf.flag = false;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    for( WORD i = 0; i < cnt; i++, src ++)
 8002736:	2300      	movs	r3, #0
 8002738:	827b      	strh	r3, [r7, #18]
 800273a:	e00b      	b.n	8002754 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x7c>
    {
      *fifo = *src;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	601a      	str	r2, [r3, #0]
    for( WORD i = 0; i < cnt; i++, src ++)
 8002748:	8a7b      	ldrh	r3, [r7, #18]
 800274a:	3301      	adds	r3, #1
 800274c:	827b      	strh	r3, [r7, #18]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3304      	adds	r3, #4
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	8a7a      	ldrh	r2, [r7, #18]
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	429a      	cmp	r2, r3
 800275a:	d3ef      	bcc.n	800273c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x64>
    }
  }

  if( len <= 0 )
 800275c:	8a3b      	ldrh	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10b      	bne.n	800277a <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xa2>
  {
    USB_DEVICE->DIEPEMPMSK &= ~(0x1 << num);
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xac>)
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	4611      	mov	r1, r2
 800276c:	2201      	movs	r2, #1
 800276e:	408a      	lsls	r2, r1
 8002770:	43d2      	mvns	r2, r2
 8002772:	4611      	mov	r1, r2
 8002774:	4a03      	ldr	r2, [pc, #12]	@ (8002784 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xac>)
 8002776:	400b      	ands	r3, r1
 8002778:	6353      	str	r3, [r2, #52]	@ 0x34
  }
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	50000800 	.word	0x50000800

08002788 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::transmit( bool flag )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  WORD mps  = txBuf.maxpacket;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800279a:	81fb      	strh	r3, [r7, #14]
  WORD len  = MIN( txBuf.size, txBuf.maxpacket );
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f003 f826 	bl	80057fc <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 80027b0:	4603      	mov	r3, r0
 80027b2:	81bb      	strh	r3, [r7, #12]

  if( !txBuf.flag )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0x3e>
  {
    transmitZLP();
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f840 	bl	8002844 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>
    return;
 80027c4:	e037      	b.n	8002836 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xae>
  }

  if( len == 0 ) // Zero Length Packet?
 80027c6:	89bb      	ldrh	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0x52>
  {
    if( flag )
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d031      	beq.n	8002836 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xae>
    {
      transmitZLP();
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f836 	bl	8002844 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>
 80027d8:	e02d      	b.n	8002836 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xae>
    }
  }
  else
  {
    BYTE pktCnt =  ((len + mps -1)/ mps);
 80027da:	89ba      	ldrh	r2, [r7, #12]
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	4413      	add	r3, r2
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	89fb      	ldrh	r3, [r7, #14]
 80027e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80027e8:	72fb      	strb	r3, [r7, #11]

    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 4160 	and.w	r1, r3, #3758096384	@ 0xe0000000
                                             | USB_OTG_DIEPTSIZ_XFRSIZ ) )
                      | ((   USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	04da      	lsls	r2, r3, #19
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb4>)
 80027fc:	4013      	ands	r3, r2
                           |(USB_OTG_DIEPTSIZ_XFRSIZ & len           ));
 80027fe:	89ba      	ldrh	r2, [r7, #12]
 8002800:	431a      	orrs	r2, r3
    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
                      | ((   USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 8002808:	430a      	orrs	r2, r1
    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 800280a:	611a      	str	r2, [r3, #16]

    USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb8>)
 800280e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	4611      	mov	r1, r2
 8002816:	2201      	movs	r2, #1
 8002818:	408a      	lsls	r2, r1
 800281a:	4611      	mov	r1, r2
 800281c:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb8>)
 800281e:	430b      	orrs	r3, r1
 8002820:	6353      	str	r3, [r2, #52]	@ 0x34

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002830:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002834:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
  }
}
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	1ff80000 	.word	0x1ff80000
 8002840:	50000800 	.word	0x50000800

08002844 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::transmitZLP( void )
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
    inep->DIEPTSIZ =  ( inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
                                            | USB_OTG_DIEPTSIZ_XFRSIZ ) )
                      | (   USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19) );
 800285e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
    inep->DIEPTSIZ =  ( inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002862:	611a      	str	r2, [r3, #16]

 //   USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002872:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002876:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::EndpointIN::getInterrupt( void )
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  DWORD msk = USB_DEVICE->DIEPMSK | (((USB_DEVICE->DIEPEMPMSK >> num) & 0x1) << 7);
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv+0x38>)
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv+0x38>)
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	7809      	ldrb	r1, [r1, #0]
 8002898:	40cb      	lsrs	r3, r1
 800289a:	01db      	lsls	r3, r3, #7
 800289c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  return( inep->DIEPINT & msk );
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	50000800 	.word	0x50000800

080028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::clrInterrupt( DWORD interruptID )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  inep->DIEPINT |= interruptID; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth>:
  fifo  = (__IO DWORD                  *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE                                     );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::config( WORD epMPS, BYTE epType )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  rxBuf.maxpacket = epMPS;
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83

  if( num == 0 )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0
 800290e:	2300      	movs	r3, #0
 8002910:	807b      	strh	r3, [r7, #2]
  }

  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (num)) << 16);
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x94>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	4611      	mov	r1, r2
 800291c:	2201      	movs	r2, #1
 800291e:	408a      	lsls	r2, r1
 8002920:	0412      	lsls	r2, r2, #16
 8002922:	4611      	mov	r1, r2
 8002924:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x94>)
 8002926:	430b      	orrs	r3, r1
 8002928:	61d3      	str	r3, [r2, #28]

  if( !(outep->DOEPCTL & USB_OTG_DOEPCTL_USBAEP) )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d011      	beq.n	8002968 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x7c>
  {
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                       | (epType << 18 )
 8002952:	787b      	ldrb	r3, [r7, #1]
 8002954:	049b      	lsls	r3, r3, #18
 8002956:	430b      	orrs	r3, r1
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ )
 8002958:	ea42 0103 	orr.w	r1, r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x98>)
 8002964:	430b      	orrs	r3, r1
 8002966:	6013      	str	r3, [r2, #0]
                       | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)
                       | (USB_OTG_DOEPCTL_USBAEP));
  }

  if( num > 0 )
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x8a>
  {
    receive();
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f83d 	bl	80029f0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
  }
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	50000800 	.word	0x50000800
 8002984:	10008000 	.word	0x10008000

08002988 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>:
  return( len );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::readFromFifo( WORD len )
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  WORD cnt = (len + 3) / 4;
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	3303      	adds	r3, #3
 8002998:	2b00      	cmp	r3, #0
 800299a:	da00      	bge.n	800299e <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x16>
 800299c:	3303      	adds	r3, #3
 800299e:	109b      	asrs	r3, r3, #2
 80029a0:	813b      	strh	r3, [r7, #8]

  DWORD *dest = (DWORD *)&rxBuf.data[0];
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]

  rxBuf.size = len;
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  rxBuf.flag = true;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

  for( WORD  i = 0; i < cnt; i++, dest++ )
 80029ba:	2300      	movs	r3, #0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	e00b      	b.n	80029d8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x50>
  {
    *dest = *fifo;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]
  for( WORD  i = 0; i < cnt; i++, dest++ )
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	3301      	adds	r3, #1
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	897a      	ldrh	r2, [r7, #10]
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3ef      	bcc.n	80029c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x38>
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::receive( void )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  WORD mps = rxBuf.maxpacket;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80029fe:	81fb      	strh	r3, [r7, #14]
  WORD len = MIN( rxBuf.size, rxBuf.maxpacket );
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f002 fef4 	bl	80057fc <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 8002a14:	4603      	mov	r3, r0
 8002a16:	81bb      	strh	r3, [r7, #12]

  if( len == 0 )
 8002a18:	89bb      	ldrh	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0x36>
  {
    receiveZLP();
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f83a 	bl	8002a98 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) );

    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
                          | USB_OTG_DOEPCTL_EPENA );  // Enable EP
  }
}
 8002a24:	e032      	b.n	8002a8c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0x9c>
   BYTE pktcnt = (rxBuf.size + mps -1)/ mps;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	4413      	add	r3, r2
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	89fb      	ldrh	r3, [r7, #14]
 8002a36:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a3a:	72fb      	strb	r3, [r7, #11]
   outep->DOEPTSIZ  &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a4a:	f002 4260 	and.w	r2, r2, #3758096384	@ 0xe0000000
 8002a4e:	611a      	str	r2, [r3, #16]
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	04da      	lsls	r2, r3, #19
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0xa4>)
 8002a5e:	4013      	ands	r3, r2
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) );
 8002a60:	89fa      	ldrh	r2, [r7, #14]
 8002a62:	7af8      	ldrb	r0, [r7, #11]
 8002a64:	fb00 f202 	mul.w	r2, r0, r2
 8002a68:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002a6c:	431a      	orrs	r2, r3
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a74:	430a      	orrs	r2, r1
 8002a76:	611a      	str	r2, [r3, #16]
    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a86:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002a8a:	601a      	str	r2, [r3, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	1ff80000 	.word	0x1ff80000

08002a98 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::receiveZLP()
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  outep->DOEPTSIZ &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aae:	f002 4260 	and.w	r2, r2, #3758096384	@ 0xe0000000
 8002ab2:	611a      	str	r2, [r3, #16]
                        | USB_OTG_DOEPTSIZ_XFRSIZ );

  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aba:	691b      	ldr	r3, [r3, #16]
                      |  (USB_OTG_DOEPTSIZ_XFRSIZ & rxBuf.maxpacket) );
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	f892 2083 	ldrb.w	r2, [r2, #131]	@ 0x83
  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aca:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002ace:	611a      	str	r2, [r3, #16]

  outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ade:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8002ae2:	601a      	str	r2, [r3, #0]
                        | USB_OTG_DOEPCTL_EPENA );  // Enable EP
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::EndpointOUT::getInterrupt( void )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return( outep->DOEPINT & USB_DEVICE->DOEPMSK );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv+0x24>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4013      	ands	r3, r2
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	50000800 	.word	0x50000800

08002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::clrInterrupt( DWORD interruptID )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  outep->DOEPINT |= interruptID;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>:
  USB_OTG_FS->GAHBCFG |=  USB_OTG_GAHBCFG_GINT;      // enable USB interrupts
}

//-------------------------------------------------------------------
inline void USBdevice_Mcu::isr(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	@ 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  // Current mode of operation = Host mode ?
  if( USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_CMOD )
 8002b4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 82a7 	bne.w	80030b4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x570>
  {
    return;
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_MMIS ) )
 8002b66:	2102      	movs	r1, #2
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 facf 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x42>
  {
    // incorrect mode
    clrInterrupt( USB_OTG_GINTSTS_MMIS);
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fadd 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OEPINT ) )
 8002b86:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fabe 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8092 	beq.w	8002cc6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x182>
  {
    DWORD interruptBits = getOutInterrupt();
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa9e 	bl	80030e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv>
 8002ba8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    DWORD interruptType = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    BYTE  epNum         = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    while ( interruptBits )
 8002bb4:	e083      	b.n	8002cbe <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x17a>
    {
      if( interruptBits & 0x1 )
 8002bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d076      	beq.n	8002cae <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x16a>
      {
        interruptType = epOUT[epNum].getInterrupt();
 8002bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bc4:	228c      	movs	r2, #140	@ 0x8c
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff8c 	bl	8002af0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv>
 8002bd8:	61f8      	str	r0, [r7, #28]

        if( interruptType & USB_OTG_DOEPINT_XFRC )
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0xe2>
        {
          // OUT-package received, non-control
          epOUT[epNum].receive();
 8002be4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002be8:	228c      	movs	r2, #140	@ 0x8c
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fefa 	bl	80029f0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
          eventHandler( epNum, false );
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4798      	blx	r3
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_XFRC );
 8002c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c10:	228c      	movs	r2, #140	@ 0x8c
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff79 	bl	8002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DOEPINT_STUP )
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02c      	beq.n	8002c8a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x146>
        {
          // Setup-package received
          epOUT[epNum].receive();
 8002c30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c34:	228c      	movs	r2, #140	@ 0x8c
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fed4 	bl	80029f0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
          eventHandler( epNum, true );
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8002c54:	2201      	movs	r2, #1
 8002c56:	4798      	blx	r3
          epIN[epNum].transmit(true);
 8002c58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c5c:	228c      	movs	r2, #140	@ 0x8c
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	3350      	adds	r3, #80	@ 0x50
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fd8c 	bl	8002788 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>
          // epIN[0].writeToFifo();
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_STUP );
 8002c70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c74:	228c      	movs	r2, #140	@ 0x8c
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	2108      	movs	r1, #8
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff47 	bl	8002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DOEPINT_OTEPDIS )
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x16a>
        {
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_OTEPDIS);
 8002c94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c98:	228c      	movs	r2, #140	@ 0x8c
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff35 	bl	8002b18 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8002cae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      interruptBits >>= 1;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while ( interruptBits )
 8002cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af78 	bne.w	8002bb6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x72>
    }
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_IEPINT ) )
 8002cc6:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa1e 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80d7 	beq.w	8002e90 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x34c>
  {
    DWORD interruptBits = getInInterrupt();
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9ec 	bl	80030c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv>
 8002ce8:	6278      	str	r0, [r7, #36]	@ 0x24
    DWORD interruptType = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
    BYTE  epNum         = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    while( interruptBits )
 8002cf4:	e0c8      	b.n	8002e88 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x344>
    {
      if( interruptBits & 0x1 )
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80bb 	beq.w	8002e78 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x334>
      {
        interruptType = epIN[epNum].getInterrupt( );
 8002d02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d06:	228c      	movs	r2, #140	@ 0x8c
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	3350      	adds	r3, #80	@ 0x50
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fdb6 	bl	8002884 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv>
 8002d18:	61b8      	str	r0, [r7, #24]

        if( interruptType & USB_OTG_DIEPINT_XFRC )
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03e      	beq.n	8002da2 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x25e>
        {
          // USB_DEVICE->DIEPEMPMSK = ~(0x1 << epNum);
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 8002d24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d28:	228c      	movs	r2, #140	@ 0x8c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	3350      	adds	r3, #80	@ 0x50
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fdc2 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
          epOUT[epNum].receiveZLP();
 8002d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d40:	228c      	movs	r2, #140	@ 0x8c
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fea2 	bl	8002a98 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>
          eventHandler( epNum | 0x80, true );
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d64:	b2d1      	uxtb	r1, r2
 8002d66:	2201      	movs	r2, #1
 8002d68:	4798      	blx	r3

          // todo interrupt handling not correct for interrupt or ctrl transfers
          // workaround:
          if( epNum > 0 )
 8002d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x246>
            epIN[epNum].transmit( false );
 8002d72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d76:	228c      	movs	r2, #140	@ 0x8c
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	3350      	adds	r3, #80	@ 0x50
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fcff 	bl	8002788 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 8002d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d8e:	228c      	movs	r2, #140	@ 0x8c
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	3350      	adds	r3, #80	@ 0x50
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fd8f 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_TOC )
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x280>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TOC );
 8002dac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002db0:	228c      	movs	r2, #140	@ 0x8c
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	3350      	adds	r3, #80	@ 0x50
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fd7e 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_ITTXFE )
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2b8>
        {
          epIN[epNum].writeToFifo();
 8002dce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dd2:	228c      	movs	r2, #140	@ 0x8c
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	3350      	adds	r3, #80	@ 0x50
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fc7a 	bl	80026d8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_ITTXFE );
 8002de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002de8:	228c      	movs	r2, #140	@ 0x8c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	3350      	adds	r3, #80	@ 0x50
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	2110      	movs	r1, #16
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fd62 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_INEPNE )
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2da>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_INEPNE );
 8002e06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e0a:	228c      	movs	r2, #140	@ 0x8c
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	3350      	adds	r3, #80	@ 0x50
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	2140      	movs	r1, #64	@ 0x40
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fd51 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_EPDISD )
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2fc>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_EPDISD );
 8002e28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e2c:	228c      	movs	r2, #140	@ 0x8c
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	3350      	adds	r3, #80	@ 0x50
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fd40 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_TXFE )
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x334>
        {
          epIN[epNum].writeToFifo();
 8002e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e4e:	228c      	movs	r2, #140	@ 0x8c
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	3350      	adds	r3, #80	@ 0x50
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fc3c 	bl	80026d8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TXFE );
 8002e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e64:	228c      	movs	r2, #140	@ 0x8c
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	3350      	adds	r3, #80	@ 0x50
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fd24 	bl	80028c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8002e78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      interruptBits >>= 1;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    while( interruptBits )
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f af33 	bne.w	8002cf6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x1b2>
    }
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_WKUINT ) )
 8002e90:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f939 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x37c>
  {
    USB_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eaa:	4b84      	ldr	r3, [pc, #528]	@ (80030bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a83      	ldr	r2, [pc, #524]	@ (80030bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
    clrInterrupt( USB_OTG_GINTSTS_WKUINT );
 8002eb6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f940 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBSUSP ) )
 8002ec0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f921 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x3a0>
  {
    clrInterrupt( USB_OTG_GINTSTS_USBSUSP );
 8002eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f92e 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBRST ) )
 8002ee4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f90f 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x3d0>
  {
    reset();
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
    clrInterrupt( USB_OTG_GINTSTS_USBRST );
 8002f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f916 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_ENUMDNE ) )
 8002f14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8f7 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d029      	beq.n	8002f82 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x43e>
  {
    USB_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002f2e:	4b63      	ldr	r3, [pc, #396]	@ (80030bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a62      	ldr	r2, [pc, #392]	@ (80030bc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6053      	str	r3, [r2, #4]

    USB_OTG_FS->GUSBCFG &= ~(  USB_OTG_GUSBCFG_TRDT );
 8002f3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002f44:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002f48:	60d3      	str	r3, [r2, #12]
    USB_OTG_FS->GUSBCFG |=  (  USB_OTG_GUSBCFG_TRDT_0
 8002f4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002f54:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002f58:	60d3      	str	r3, [r2, #12]
                             | USB_OTG_GUSBCFG_TRDT_2 );

    epOUT[0].config( MAX_EP0_SIZE );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f60:	2200      	movs	r2, #0
 8002f62:	2140      	movs	r1, #64	@ 0x40
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fcc1 	bl	80028ec <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth>
    epIN [0].config( MAX_EP0_SIZE );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3350      	adds	r3, #80	@ 0x50
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2140      	movs	r1, #64	@ 0x40
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fb64 	bl	8002640 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth>

    clrInterrupt( USB_OTG_GINTSTS_ENUMDNE );
 8002f78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8df 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_RXFLVL ) )
 8002f82:	2110      	movs	r1, #16
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8c1 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d04d      	beq.n	8003036 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4f2>
  {
    USB_OTG_FS->GINTMSK &= ~(USB_OTG_GINTMSK_RXFLVLM);
 8002f9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002fa4:	f023 0310 	bic.w	r3, r3, #16
 8002fa8:	6193      	str	r3, [r2, #24]

    DWORD temp = USB_OTG_FS->GRXSTSP;
 8002faa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]

    BYTE epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	74fb      	strb	r3, [r7, #19]

    if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  2 ) // Packet status = OUT data packet received
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	0c5b      	lsrs	r3, r3, #17
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d118      	bne.n	8002ffa <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4b6>
    {
      if( temp & USB_OTG_GRXSTSP_BCNT )
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d024      	beq.n	800301e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
      {
        epOUT[epnum].readFromFifo( (temp & USB_OTG_GRXSTSP_BCNT) >> 4 );
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	228c      	movs	r2, #140	@ 0x8c
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f7ff fcc8 	bl	8002988 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>
 8002ff8:	e011      	b.n	800301e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
      }
    }
    else if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  6 ) // Packet status = Setup data packet received
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	0c5b      	lsrs	r3, r3, #17
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	2b06      	cmp	r3, #6
 8003004:	d10b      	bne.n	800301e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
    {
      epOUT[epnum].readFromFifo( 8 );
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	228c      	movs	r2, #140	@ 0x8c
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	2108      	movs	r1, #8
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fcb5 	bl	8002988 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>
    }
    USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_RXFLVLM);
 800301e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6193      	str	r3, [r2, #24]
    clrInterrupt( USB_OTG_GINTSTS_RXFLVL );
 800302e:	2110      	movs	r1, #16
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f885 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SOF ) )
 8003036:	2108      	movs	r1, #8
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f867 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x512>
  {
    clrInterrupt( USB_OTG_GINTSTS_SOF );
 800304e:	2108      	movs	r1, #8
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f875 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SRQINT ) )
 8003056:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f856 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x536>
  {
    clrInterrupt( USB_OTG_GINTSTS_SRQINT );
 8003070:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f863 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OTGINT ) )
 800307a:	2104      	movs	r1, #4
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f845 	bl	800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x572>
  {
    DWORD temp = USB_OTG_FS->GOTGINT;
 8003092:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
    USB_OTG_FS->GOTGINT |= temp;
 800309a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]

    clrInterrupt( USB_OTG_GINTSTS_OTGINT );
 80030aa:	2104      	movs	r1, #4
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f847 	bl	8003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
 80030b2:	e000      	b.n	80030b6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x572>
    return;
 80030b4:	bf00      	nop
  }
}
 80030b6:	3730      	adds	r7, #48	@ 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	50000800 	.word	0x50000800

080030c0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv>:
  return true;
}

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::getInInterrupt( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  return(    USB_DEVICE->DAINT
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv+0x20>)
 80030ca:	699a      	ldr	r2, [r3, #24]
           & USB_DEVICE->DAINTMSK
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv+0x20>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4013      	ands	r3, r2
           & 0xFFFF               );
 80030d2:	b29b      	uxth	r3, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	50000800 	.word	0x50000800

080030e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::getOutInterrupt( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return( (   USB_DEVICE->DAINT
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv+0x24>)
 80030ee:	699a      	ldr	r2, [r3, #24]
            & USB_DEVICE->DAINTMSK
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv+0x24>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4013      	ands	r3, r2
            & 0xFFFF0000           ) >> 16);
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	b29b      	uxth	r3, r3
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	50000800 	.word	0x50000800

0800310c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>:

//-------------------------------------------------------------------
BYTE USBdevice_Mcu::isInterruptPending( DWORD interuptID )
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  return( (   USB_OTG_FS->GINTSTS
 8003116:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800311a:	695a      	ldr	r2, [r3, #20]
            & USB_OTG_FS->GINTMSK
 800311c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	401a      	ands	r2, r3
            & interuptID          ) == interuptID );
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4013      	ands	r3, r2
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::clrInterrupt( DWORD interuptID )
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  USB_OTG_FS->GINTSTS |= interuptID;
 800314a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	614b      	str	r3, [r1, #20]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <OTG_FS_IRQHandler>:
//*******************************************************************
//-------------------------------------------------------------------
extern "C"
{
  void OTG_FS_IRQHandler(void)
  {
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
    USBdevice_Mcu::usbPtr->isr();
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <OTG_FS_IRQHandler+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fce7 	bl	8002b44 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>
  }
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200001dc 	.word	0x200001dc

08003180 <_ZN9EmbSysLib3Std6ReportC1Et>:
Report::Handler *Report::msgHandler   = 0;
WORD             Report::globalCode   = 0;
WORD             Report::globalModule = 0;

//-------------------------------------------------------------------
Report::Report( WORD moduleId_In )
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
{
  moduleId  = moduleId_In;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	805a      	strh	r2, [r3, #2]
  localCode = 0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	801a      	strh	r2, [r3, #0]
}
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <_ZN9EmbSysLib3Std6Report5storeEt>:

//-------------------------------------------------------------------
void Report::store( const WORD code )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  if( localCode == 0 )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <_ZN9EmbSysLib3Std6Report5storeEt+0x1a>
  {
    localCode = code;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	801a      	strh	r2, [r3, #0]
  }
  if( globalCode == 0 )
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <_ZN9EmbSysLib3Std6Report5storeEt+0x30>
  {
    globalCode = code;
 80031ca:	4a06      	ldr	r2, [pc, #24]	@ (80031e4 <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	8013      	strh	r3, [r2, #0]
    globalModule = moduleId;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	885a      	ldrh	r2, [r3, #2]
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <_ZN9EmbSysLib3Std6Report5storeEt+0x40>)
 80031d6:	801a      	strh	r2, [r3, #0]
  }
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	200001e4 	.word	0x200001e4
 80031e8:	200001e6 	.word	0x200001e6

080031ec <_ZN9EmbSysLib3Std6Report5errorEt>:

//-------------------------------------------------------------------
void Report::error( const WORD code )
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
  store( code );
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ffd3 	bl	80031a8 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <_ZN9EmbSysLib3Std6Report5errorEt+0x36>
  {
    msgHandler->onReport( code, moduleId, true );
 800320a:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681c      	ldr	r4, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	885a      	ldrh	r2, [r3, #2]
 800321a:	8879      	ldrh	r1, [r7, #2]
 800321c:	2301      	movs	r3, #1
 800321e:	47a0      	blx	r4
  }
  else
  {
    Hw::System::reset();
  }
}
 8003220:	e001      	b.n	8003226 <_ZN9EmbSysLib3Std6Report5errorEt+0x3a>
    Hw::System::reset();
 8003222:	f7fd fa89 	bl	8000738 <_ZN9EmbSysLib2Hw6System5resetEv>
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bd90      	pop	{r4, r7, pc}
 800322e:	bf00      	nop
 8003230:	200001e0 	.word	0x200001e0

08003234 <_ZN9EmbSysLib3Std6Report5alertEt>:

//-------------------------------------------------------------------
void Report::alert( const WORD code )
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
  store( code );
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ffaf 	bl	80031a8 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <_ZN9EmbSysLib3Std6Report5alertEt+0x34>
  {
    msgHandler->onReport( code, moduleId, false );
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681c      	ldr	r4, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	885a      	ldrh	r2, [r3, #2]
 8003262:	8879      	ldrh	r1, [r7, #2]
 8003264:	2300      	movs	r3, #0
 8003266:	47a0      	blx	r4
  }
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	200001e0 	.word	0x200001e0

08003274 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>:
//
// Report::Handler
//
//*******************************************************************
//-------------------------------------------------------------------
Report::Handler::Handler()
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	4a06      	ldr	r2, [pc, #24]	@ (8003298 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x24>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	601a      	str	r2, [r3, #0]
{
  Report::msgHandler = this;
 8003282:	4a06      	ldr	r2, [pc, #24]	@ (800329c <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x28>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6013      	str	r3, [r2, #0]
}
<<<<<<< HEAD
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	08009bbc 	.word	0x08009bbc
 800329c:	200001e0 	.word	0x200001e0
=======
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	080099c8 	.word	0x080099c8
 80032ac:	200001e0 	.word	0x200001e0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080032a0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>:

//-------------------------------------------------------------------
Report::Handler::~Handler()
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x2c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
{
  if( this == Report::msgHandler )
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d102      	bne.n	80032be <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x1e>
  {
    Report::msgHandler = 0;
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
  }
}
<<<<<<< HEAD
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	08009bbc 	.word	0x08009bbc
 80032d0:	200001e0 	.word	0x200001e0
=======
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	080099c8 	.word	0x080099c8
 80032e0:	200001e0 	.word	0x200001e0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080032d4 <_ZN9EmbSysLib2Hw4FontC1EPKh>:
  this->data     = data;
  this->selected = data;  // default is first character
}

//-------------------------------------------------------------------
Font::Font( const BYTE *ptr )
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
{
  this->header = (Font::Header*)ptr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	601a      	str	r2, [r3, #0]
  this->data   = (BYTE*)(ptr + sizeof(Font::Header));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	1d5a      	adds	r2, r3, #5
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]
}
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>:

//-------------------------------------------------------------------
 BYTE Font::getCharWidth( void ) const
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(header->charWidth) );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78db      	ldrb	r3, [r3, #3]
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>:

//-------------------------------------------------------------------
BYTE Font::getCharHeight( void ) const
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(header->charHeight) );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	791b      	ldrb	r3, [r3, #4]
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <_ZN9EmbSysLib2Hw4Font7setCharEh>:

//-------------------------------------------------------------------
void Font::setChar( BYTE c )
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	70fb      	strb	r3, [r7, #3]
  BYTE id = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]

  if(         GET_BYTE_PROGMEM(header->firstId) <= c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	429a      	cmp	r2, r3
 8003348:	d30b      	bcc.n	8003362 <_ZN9EmbSysLib2Hw4Font7setCharEh+0x34>
      && c <= GET_BYTE_PROGMEM(header->lastId)        ) // is char c defined?
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	429a      	cmp	r2, r3
 8003354:	d805      	bhi.n	8003362 <_ZN9EmbSysLib2Hw4Font7setCharEh+0x34>
  {
    id = c - GET_BYTE_PROGMEM(header->firstId);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	73fb      	strb	r3, [r7, #15]
  }
  selected = data + (WORD)id * GET_BYTE_PROGMEM(header->bytePerChar);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	7889      	ldrb	r1, [r1, #2]
 800336e:	fb01 f202 	mul.w	r2, r1, r2
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <_ZN9EmbSysLib2Hw4Font8getPixelEhh>:

//-------------------------------------------------------------------
BYTE Font::getPixel( BYTE x, BYTE y )
{                                                 // calc pixel number
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
 8003390:	4613      	mov	r3, r2
 8003392:	70bb      	strb	r3, [r7, #2]
  WORD pixel  = ( (WORD)x + (WORD)y * getCharWidth() );
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	b29c      	uxth	r4, r3
 8003398:	78bb      	ldrb	r3, [r7, #2]
 800339a:	b29d      	uxth	r5, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ffac 	bl	80032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	fb15 f303 	smulbb	r3, r5, r3
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4423      	add	r3, r4
 80033ac:	81fb      	strh	r3, [r7, #14]

                                                // get pixel value
  BYTE ret = GET_BYTE_PROGMEM_PTR(selected+(pixel>>3)) & ( 0x80>>(pixel&0x07) );
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	89fa      	ldrh	r2, [r7, #14]
 80033b4:	08d2      	lsrs	r2, r2, #3
 80033b6:	b292      	uxth	r2, r2
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b25a      	sxtb	r2, r3
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	2180      	movs	r1, #128	@ 0x80
 80033c6:	fa41 f303 	asr.w	r3, r1, r3
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	4013      	ands	r3, r2
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	737b      	strb	r3, [r7, #13]
  pixel++;
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	3301      	adds	r3, #1
 80033d6:	81fb      	strh	r3, [r7, #14]
  return( ret ? true : false );
 80033d8:	7b7b      	ldrb	r3, [r7, #13]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bdb0      	pop	{r4, r5, r7, pc}

080033ec <_ZN9EmbSysLib2Hw6BitmapC1EPKh>:
  this->header = header;
  this->data   = data;
}

//-------------------------------------------------------------------
Bitmap::Bitmap( const BYTE *ptr )
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
{
  this->header = (Bitmap::Header*)ptr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	601a      	str	r2, [r3, #0]
  this->data   = (WORD*)(ptr + sizeof(Bitmap::Header));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	1d9a      	adds	r2, r3, #6
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]
}
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>:

//-------------------------------------------------------------------
WORD Bitmap::getWidth( void ) const
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return( header->width );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	881b      	ldrh	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZNK9EmbSysLib2Hw6Bitmap9getHeightEv>:

//-------------------------------------------------------------------
WORD Bitmap::getHeight( void ) const
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return( header->height );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	885b      	ldrh	r3, [r3, #2]
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_ZN9EmbSysLib2Hw6Bitmap8getPixelEtt>:

//-------------------------------------------------------------------
WORD Bitmap::getPixel( WORD x, WORD y )
{
 8003446:	b5b0      	push	{r4, r5, r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]
 8003452:	4613      	mov	r3, r2
 8003454:	803b      	strh	r3, [r7, #0]
  DWORD pixel  = (DWORD)x + (DWORD)y * getWidth();
 8003456:	887c      	ldrh	r4, [r7, #2]
 8003458:	883d      	ldrh	r5, [r7, #0]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffd9 	bl	8003412 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>
 8003460:	4603      	mov	r3, r0
 8003462:	fb05 f303 	mul.w	r3, r5, r3
 8003466:	4423      	add	r3, r4
 8003468:	60fb      	str	r3, [r7, #12]

  return( data[pixel] );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003480 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>:
//
// DisplayChar
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayChar::DisplayChar( WORD moduleId,
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	807b      	strh	r3, [r7, #2]
 8003492:	460b      	mov	r3, r1
 8003494:	707b      	strb	r3, [r7, #1]
 8003496:	4613      	mov	r3, r2
 8003498:	703b      	strb	r3, [r7, #0]
	                        BYTE numberOfLines,
                          BYTE numberOfColumns )
: report( moduleId ) 
 800349a:	4a0b      	ldr	r2, [pc, #44]	@ (80034c8 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh+0x48>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3308      	adds	r3, #8
 80034a4:	887a      	ldrh	r2, [r7, #2]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fe69 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->numberOfLines   = numberOfLines;
 80034ae:	787b      	ldrb	r3, [r7, #1]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	809a      	strh	r2, [r3, #4]
  this->numberOfColumns = numberOfColumns;
 80034b6:	783b      	ldrb	r3, [r7, #0]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	80da      	strh	r2, [r3, #6]
}
<<<<<<< HEAD
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	080099d0 	.word	0x080099d0
=======
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	080097dc 	.word	0x080097dc
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080034cc <_ZN9EmbSysLib2Hw11DisplayChar16getNumberOfLinesEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfLines( void )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return( numberOfLines );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	889b      	ldrh	r3, [r3, #4]
 80034d8:	b2db      	uxtb	r3, r3
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <_ZN9EmbSysLib2Hw11DisplayChar18getNumberOfColumnsEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfColumns( void )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  return( numberOfColumns );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	88db      	ldrh	r3, [r3, #6]
 80034f2:	b2db      	uxtb	r3, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc>:

//-------------------------------------------------------------------
void DisplayChar::putString( const char *str )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  while( *str != 0 )
 800350a:	e00b      	b.n	8003524 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0x24>
  {
    putChar( *str );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	4611      	mov	r1, r2
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
    str++;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	603b      	str	r3, [r7, #0]
  while( *str != 0 )
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ef      	bne.n	800350c <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0xc>
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh>:
//
// DisplayGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayGraphic::DisplayGraphic( WORD moduleId,
 8003538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	4608      	mov	r0, r1
 8003544:	4611      	mov	r1, r2
 8003546:	461a      	mov	r2, r3
 8003548:	4603      	mov	r3, r0
 800354a:	817b      	strh	r3, [r7, #10]
 800354c:	460b      	mov	r3, r1
 800354e:	813b      	strh	r3, [r7, #8]
 8003550:	4613      	mov	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]
: DisplayChar( moduleId,
               height/((WORD)zoom*font.getCharHeight()),
               width /((WORD)zoom*font.getCharWidth() ) )
, font  ( font )
, zoom  ( zoom )
, report( moduleId )
 8003554:	68fe      	ldr	r6, [r7, #12]
               height/((WORD)zoom*font.getCharHeight()),
 8003556:	88fc      	ldrh	r4, [r7, #6]
 8003558:	f897 5034 	ldrb.w	r5, [r7, #52]	@ 0x34
 800355c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003560:	f7ff fed8 	bl	8003314 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003564:	4603      	mov	r3, r0
 8003566:	fb05 f303 	mul.w	r3, r5, r3
 800356a:	fb94 f3f3 	sdiv	r3, r4, r3
, report( moduleId )
 800356e:	fa5f f883 	uxtb.w	r8, r3
               width /((WORD)zoom*font.getCharWidth() ) )
 8003572:	893c      	ldrh	r4, [r7, #8]
 8003574:	f897 5034 	ldrb.w	r5, [r7, #52]	@ 0x34
 8003578:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800357c:	f7ff febd 	bl	80032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003580:	4603      	mov	r3, r0
 8003582:	fb05 f303 	mul.w	r3, r5, r3
 8003586:	fb94 f3f3 	sdiv	r3, r4, r3
, report( moduleId )
 800358a:	b2db      	uxtb	r3, r3
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	4642      	mov	r2, r8
 8003590:	4630      	mov	r0, r6
 8003592:	f7ff ff75 	bl	8003480 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>
 8003596:	4a21      	ldr	r2, [pc, #132]	@ (800361c <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh+0xe4>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]
, font  ( font )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3314      	adds	r3, #20
 80035a0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80035a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
, zoom  ( zoom )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80035b0:	f883 2020 	strb.w	r2, [r3, #32]
, report( moduleId )
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3328      	adds	r3, #40	@ 0x28
 80035b8:	897a      	ldrh	r2, [r7, #10]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fddf 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  Hsize = width;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	893a      	ldrh	r2, [r7, #8]
 80035c6:	821a      	strh	r2, [r3, #16]
  Vsize = height;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	825a      	strh	r2, [r3, #18]

  BackColor  = RGB2color(  0,  0,  0);  // Black
 80035ce:	2200      	movs	r2, #0
 80035d0:	2100      	movs	r1, #0
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fc ffce 	bl	8000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	845a      	strh	r2, [r3, #34]	@ 0x22
  PaintColor = RGB2color(128,128,128);  // Gray
 80035e0:	2280      	movs	r2, #128	@ 0x80
 80035e2:	2180      	movs	r1, #128	@ 0x80
 80035e4:	2080      	movs	r0, #128	@ 0x80
 80035e6:	f7fc ffc5 	bl	8000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	849a      	strh	r2, [r3, #36]	@ 0x24
  TextColor  = RGB2color(255,255,255);  // White
 80035f2:	22ff      	movs	r2, #255	@ 0xff
 80035f4:	21ff      	movs	r1, #255	@ 0xff
 80035f6:	20ff      	movs	r0, #255	@ 0xff
 80035f8:	f7fc ffbc 	bl	8000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	84da      	strh	r2, [r3, #38]	@ 0x26

  xPos = 0;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	819a      	strh	r2, [r3, #12]
  yPos = 0;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	81da      	strh	r2, [r3, #14]
}
<<<<<<< HEAD
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361c:	08009974 	.word	0x08009974
=======
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362c:	08009780 	.word	0x08009780
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003620 <_ZN9EmbSysLib2Hw14DisplayGraphic7setFontENS0_4FontEh>:

//-------------------------------------------------------------------
void DisplayGraphic::setFont( Font font,
                              BYTE zoom )
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4638      	mov	r0, r7
 800362a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  this->font = font;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3314      	adds	r3, #20
 8003632:	463a      	mov	r2, r7
 8003634:	ca07      	ldmia	r2, {r0, r1, r2}
 8003636:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  this->zoom = zoom;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	7e3a      	ldrb	r2, [r7, #24]
 800363e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_ZN9EmbSysLib2Hw14DisplayGraphic7setZoomEh>:

//-------------------------------------------------------------------
void DisplayGraphic::setZoom( BYTE zoom )
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	70fb      	strb	r3, [r7, #3]
  this->zoom = zoom;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_ZN9EmbSysLib2Hw14DisplayGraphic12setBackColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setBackColor( WORD color )
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
  BackColor = color;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	887a      	ldrh	r2, [r7, #2]
 800367e:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_ZN9EmbSysLib2Hw14DisplayGraphic13setPaintColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setPaintColor( WORD color )
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
  PaintColor = color;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZN9EmbSysLib2Hw14DisplayGraphic12setTextColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setTextColor( WORD color )
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
  TextColor = color;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	84da      	strh	r2, [r3, #38]	@ 0x26
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <_ZN9EmbSysLib2Hw14DisplayGraphic12gotoPixelPosEtt>:

//---------------------------------------------------------------
void DisplayGraphic::gotoPixelPos( WORD x, WORD y )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	803b      	strh	r3, [r7, #0]
  xPos = x;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	819a      	strh	r2, [r3, #12]
  yPos = y;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	883a      	ldrh	r2, [r7, #0]
 80036e2:	81da      	strh	r2, [r3, #14]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_ZN9EmbSysLib2Hw14DisplayGraphic11gotoTextPosEhh>:

//---------------------------------------------------------------
void DisplayGraphic::gotoTextPos( BYTE line, BYTE colum )
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
 80036fc:	4613      	mov	r3, r2
 80036fe:	70bb      	strb	r3, [r7, #2]
  xPos = (WORD)colum * zoom * font.getCharWidth();
 8003700:	78bb      	ldrb	r3, [r7, #2]
 8003702:	b29b      	uxth	r3, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f892 2020 	ldrb.w	r2, [r2, #32]
 800370a:	fb13 f302 	smulbb	r3, r3, r2
 800370e:	b29c      	uxth	r4, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3314      	adds	r3, #20
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fdf0 	bl	80032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 800371a:	4603      	mov	r3, r0
 800371c:	fb14 f303 	smulbb	r3, r4, r3
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	819a      	strh	r2, [r3, #12]
  yPos = (WORD)line  * zoom * font.getCharHeight();
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	b29b      	uxth	r3, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003730:	fb13 f302 	smulbb	r3, r3, r2
 8003734:	b29c      	uxth	r4, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3314      	adds	r3, #20
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fdea 	bl	8003314 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003740:	4603      	mov	r3, r0
 8003742:	fb14 f303 	smulbb	r3, r4, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	81da      	strh	r2, [r3, #14]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}

08003754 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc>:

//---------------------------------------------------------------
void DisplayGraphic::putChar( char ch )
{
 8003754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003758:	b087      	sub	sp, #28
 800375a:	af02      	add	r7, sp, #8
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]
  font.setChar( ch );                                       // select char
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3314      	adds	r3, #20
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fddf 	bl	800332e <_ZN9EmbSysLib2Hw4Font7setCharEh>

  setArea( xPos,                                            // set painting area
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3348      	adds	r3, #72	@ 0x48
 8003776:	681c      	ldr	r4, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	899d      	ldrh	r5, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	89de      	ldrh	r6, [r3, #14]
           yPos,
           zoom*font.getCharWidth(),
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	4698      	mov	r8, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3314      	adds	r3, #20
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fdb4 	bl	80032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003792:	4603      	mov	r3, r0
  setArea( xPos,                                            // set painting area
 8003794:	fb18 f303 	smulbb	r3, r8, r3
 8003798:	fa1f f883 	uxth.w	r8, r3
           zoom*font.getCharHeight() );
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a2:	4699      	mov	r9, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3314      	adds	r3, #20
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fdb3 	bl	8003314 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 80037ae:	4603      	mov	r3, r0
  setArea( xPos,                                            // set painting area
 80037b0:	fb19 f303 	smulbb	r3, r9, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4643      	mov	r3, r8
 80037ba:	4632      	mov	r2, r6
 80037bc:	4629      	mov	r1, r5
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	47a0      	blx	r4

  for( BYTE py = 0; py < font.getCharHeight(); py++ )       // scan vert.
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e047      	b.n	8003858 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x104>
  {
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 80037c8:	2300      	movs	r3, #0
 80037ca:	73bb      	strb	r3, [r7, #14]
 80037cc:	e03b      	b.n	8003846 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xf2>
     {
        for( BYTE px = 0 ; px < font.getCharWidth(); px++ ) // scan hor.
 80037ce:	2300      	movs	r3, #0
 80037d0:	737b      	strb	r3, [r7, #13]
 80037d2:	e026      	b.n	8003822 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xce>
        {
          BYTE pixel = font.getPixel( px, py );             // what color?
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3314      	adds	r3, #20
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	7b79      	ldrb	r1, [r7, #13]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fdd1 	bl	8003384 <_ZN9EmbSysLib2Hw4Font8getPixelEhh>
 80037e2:	4603      	mov	r3, r0
 80037e4:	72fb      	strb	r3, [r7, #11]
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 80037e6:	2300      	movs	r3, #0
 80037e8:	733b      	strb	r3, [r7, #12]
 80037ea:	e011      	b.n	8003810 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xbc>
          {
            setPixel( (pixel) ? TextColor : BackColor );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3350      	adds	r3, #80	@ 0x50
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	7afb      	ldrb	r3, [r7, #11]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xac>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037fe:	e001      	b.n	8003804 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4790      	blx	r2
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 800380a:	7b3b      	ldrb	r3, [r7, #12]
 800380c:	3301      	adds	r3, #1
 800380e:	733b      	strb	r3, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003816:	7b3a      	ldrb	r2, [r7, #12]
 8003818:	429a      	cmp	r2, r3
 800381a:	d3e7      	bcc.n	80037ec <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x98>
        for( BYTE px = 0 ; px < font.getCharWidth(); px++ ) // scan hor.
 800381c:	7b7b      	ldrb	r3, [r7, #13]
 800381e:	3301      	adds	r3, #1
 8003820:	737b      	strb	r3, [r7, #13]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3314      	adds	r3, #20
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fd67 	bl	80032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	7b7b      	ldrb	r3, [r7, #13]
 8003832:	4293      	cmp	r3, r2
 8003834:	bf34      	ite	cc
 8003836:	2301      	movcc	r3, #1
 8003838:	2300      	movcs	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1c9      	bne.n	80037d4 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x80>
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	3301      	adds	r3, #1
 8003844:	73bb      	strb	r3, [r7, #14]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384c:	7bba      	ldrb	r2, [r7, #14]
 800384e:	429a      	cmp	r2, r3
 8003850:	d3bd      	bcc.n	80037ce <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x7a>
  for( BYTE py = 0; py < font.getCharHeight(); py++ )       // scan vert.
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3301      	adds	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3314      	adds	r3, #20
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fd59 	bl	8003314 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4293      	cmp	r3, r2
 800386a:	bf34      	ite	cc
 800386c:	2301      	movcc	r3, #1
 800386e:	2300      	movcs	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1a8      	bne.n	80037c8 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x74>
          }
        }
     }
  }
  xPos += (WORD)zoom*font.getCharWidth();                   // emulate cursor increment
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387c:	461c      	mov	r4, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3314      	adds	r3, #20
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fd39 	bl	80032fa <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003888:	4603      	mov	r3, r0
 800388a:	fb03 f104 	mul.w	r1, r3, r4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	899a      	ldrh	r2, [r3, #12]
 8003892:	b28b      	uxth	r3, r1
 8003894:	4413      	add	r3, r2
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	819a      	strh	r2, [r3, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080038a6 <_ZN9EmbSysLib2Hw14DisplayGraphic8putPixelEtt>:

//---------------------------------------------------------------
void DisplayGraphic::putPixel( WORD x, WORD y )
{
 80038a6:	b590      	push	{r4, r7, lr}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	807b      	strh	r3, [r7, #2]
 80038b2:	4613      	mov	r3, r2
 80038b4:	803b      	strh	r3, [r7, #0]
  setPixel( PaintColor, x, y );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	334c      	adds	r3, #76	@ 0x4c
 80038bc:	681c      	ldr	r4, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 80038c2:	883b      	ldrh	r3, [r7, #0]
 80038c4:	887a      	ldrh	r2, [r7, #2]
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	47a0      	blx	r4
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}

080038d2 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt>:
//---------------------------------------------------------------
void DisplayGraphic::putRectangle( WORD x,
                                   WORD y,
                                   WORD w,
                                   WORD h )
{
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b089      	sub	sp, #36	@ 0x24
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	4608      	mov	r0, r1
 80038dc:	4611      	mov	r1, r2
 80038de:	461a      	mov	r2, r3
 80038e0:	4603      	mov	r3, r0
 80038e2:	817b      	strh	r3, [r7, #10]
 80038e4:	460b      	mov	r3, r1
 80038e6:	813b      	strh	r3, [r7, #8]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
  setArea( x, y, w, h );             // set painting area
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3348      	adds	r3, #72	@ 0x48
 80038f2:	681c      	ldr	r4, [r3, #0]
 80038f4:	88f8      	ldrh	r0, [r7, #6]
 80038f6:	893a      	ldrh	r2, [r7, #8]
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	4603      	mov	r3, r0
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	47a0      	blx	r4

  for( WORD py = 0; py < h; py++ )   // scan vert.
 8003904:	2300      	movs	r3, #0
 8003906:	82fb      	strh	r3, [r7, #22]
 8003908:	e015      	b.n	8003936 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x64>
  {
    for( WORD px = 0; px < w; px++ ) // scan hor.
 800390a:	2300      	movs	r3, #0
 800390c:	82bb      	strh	r3, [r7, #20]
 800390e:	e00b      	b.n	8003928 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x56>
    {
      setPixel( PaintColor );        // draw pixel
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3350      	adds	r3, #80	@ 0x50
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800391c:	4611      	mov	r1, r2
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	4798      	blx	r3
    for( WORD px = 0; px < w; px++ ) // scan hor.
 8003922:	8abb      	ldrh	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	82bb      	strh	r3, [r7, #20]
 8003928:	8aba      	ldrh	r2, [r7, #20]
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3ef      	bcc.n	8003910 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x3e>
  for( WORD py = 0; py < h; py++ )   // scan vert.
 8003930:	8afb      	ldrh	r3, [r7, #22]
 8003932:	3301      	adds	r3, #1
 8003934:	82fb      	strh	r3, [r7, #22]
 8003936:	8afa      	ldrh	r2, [r7, #22]
 8003938:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800393a:	429a      	cmp	r2, r3
 800393c:	d3e5      	bcc.n	800390a <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x38>
    }
  }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}

08003948 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE>:

//---------------------------------------------------------------
void DisplayGraphic::putBitmap( WORD   x,
                                WORD   y,
                                Bitmap bitmap )
{
 8003948:	b082      	sub	sp, #8
 800394a:	b590      	push	{r4, r7, lr}
 800394c:	b087      	sub	sp, #28
 800394e:	af02      	add	r7, sp, #8
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	803b      	strh	r3, [r7, #0]
  WORD w = bitmap.getWidth();
 800395c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fd56 	bl	8003412 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>
 8003966:	4603      	mov	r3, r0
 8003968:	817b      	strh	r3, [r7, #10]
  WORD h = bitmap.getHeight();
 800396a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fd5c 	bl	800342c <_ZNK9EmbSysLib2Hw6Bitmap9getHeightEv>
 8003974:	4603      	mov	r3, r0
 8003976:	813b      	strh	r3, [r7, #8]

  setArea( x, y, w, h );                   // set painting area
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3348      	adds	r3, #72	@ 0x48
 800397e:	681c      	ldr	r4, [r3, #0]
 8003980:	8978      	ldrh	r0, [r7, #10]
 8003982:	883a      	ldrh	r2, [r7, #0]
 8003984:	8879      	ldrh	r1, [r7, #2]
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	4603      	mov	r3, r0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	47a0      	blx	r4

  for( WORD py = 0; py < h; py++ )         // scan vert.
 8003990:	2300      	movs	r3, #0
 8003992:	81fb      	strh	r3, [r7, #14]
 8003994:	e01b      	b.n	80039ce <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x86>
  {
    for( WORD px = 0; px < w; px++ )       // scan hor.
 8003996:	2300      	movs	r3, #0
 8003998:	81bb      	strh	r3, [r7, #12]
 800399a:	e011      	b.n	80039c0 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x78>
    {
      setPixel( bitmap.getPixel(px,py) );  // draw pixel and set to next
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3350      	adds	r3, #80	@ 0x50
 80039a2:	681c      	ldr	r4, [r3, #0]
 80039a4:	89fa      	ldrh	r2, [r7, #14]
 80039a6:	89b9      	ldrh	r1, [r7, #12]
 80039a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fd4a 	bl	8003446 <_ZN9EmbSysLib2Hw6Bitmap8getPixelEtt>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	47a0      	blx	r4
    for( WORD px = 0; px < w; px++ )       // scan hor.
 80039ba:	89bb      	ldrh	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	81bb      	strh	r3, [r7, #12]
 80039c0:	89ba      	ldrh	r2, [r7, #12]
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3e9      	bcc.n	800399c <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x54>
  for( WORD py = 0; py < h; py++ )         // scan vert.
 80039c8:	89fb      	ldrh	r3, [r7, #14]
 80039ca:	3301      	adds	r3, #1
 80039cc:	81fb      	strh	r3, [r7, #14]
 80039ce:	89fa      	ldrh	r2, [r7, #14]
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d3df      	bcc.n	8003996 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x4e>
    }
  }
}
 80039d6:	bf00      	nop
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039e2:	b002      	add	sp, #8
 80039e4:	4770      	bx	lr
	...

080039e8 <_ZN9EmbSysLib2Hw9I2CmasterC1Et>:
//
// I2Cmaster
//
//*******************************************************************
//-------------------------------------------------------------------
I2Cmaster::I2Cmaster( WORD moduleId )
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
: report( moduleId ) 
 80039f4:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <_ZN9EmbSysLib2Hw9I2CmasterC1Et+0x30>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3306      	adds	r3, #6
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fbbc 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  isHardwareOK = true;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	711a      	strb	r2, [r3, #4]
}
<<<<<<< HEAD
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	08009b30 	.word	0x08009b30
=======
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	0800993c 	.word	0x0800993c
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003a1c <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h>:
BYTE I2Cmaster::write( BYTE  hwAddr,
                       BYTE *adr,
                       BYTE  sizeAdr,
                       BYTE *data,
                       BYTE  sizeData )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	72fb      	strb	r3, [r7, #11]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	711a      	strb	r2, [r3, #4]

  if( sizeAdr || sizeData )
 8003a3a:	7abb      	ldrb	r3, [r7, #10]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x2c>
 8003a40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d03e      	beq.n	8003ac6 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0xaa>
  {
    start( sizeAdr + sizeData );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	7ab9      	ldrb	r1, [r7, #10]
 8003a52:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003a56:	440a      	add	r2, r1
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3310      	adds	r3, #16
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	7afa      	ldrb	r2, [r7, #11]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]
 8003a74:	e00d      	b.n	8003a92 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x76>
    {
       writeByte( adr[i] );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	7dfa      	ldrb	r2, [r7, #23]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	440a      	add	r2, r1
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	4611      	mov	r1, r2
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
 8003a92:	7dfa      	ldrb	r2, [r7, #23]
 8003a94:	7abb      	ldrb	r3, [r7, #10]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3ed      	bcc.n	8003a76 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x5a>
    }
    for( i=0; i< sizeData; i++ )
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
 8003a9e:	e00d      	b.n	8003abc <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0xa0>
    {
       writeByte( data[i] );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	7dfa      	ldrb	r2, [r7, #23]
 8003aaa:	6a39      	ldr	r1, [r7, #32]
 8003aac:	440a      	add	r2, r1
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	4798      	blx	r3
    for( i=0; i< sizeData; i++ )
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
 8003abc:	7dfa      	ldrb	r2, [r7, #23]
 8003abe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3ec      	bcc.n	8003aa0 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x84>
    }
  }
  stop();
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	4798      	blx	r3
  return( !isHardwareOK );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h>:
BYTE I2Cmaster::read( BYTE  hwAddr,
                      BYTE *adr,
                      BYTE  sizeAdr,
                      BYTE *data,
                      BYTE  sizeData )
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	460b      	mov	r3, r1
 8003af6:	72fb      	strb	r3, [r7, #11]
 8003af8:	4613      	mov	r3, r2
 8003afa:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	711a      	strb	r2, [r3, #4]

  if( sizeAdr )
 8003b06:	7abb      	ldrb	r3, [r7, #10]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d024      	beq.n	8003b56 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x6e>
  {
    start( sizeAdr );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	7aba      	ldrb	r2, [r7, #10]
 8003b16:	4611      	mov	r1, r2
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3310      	adds	r3, #16
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	7afa      	ldrb	r2, [r7, #11]
 8003b26:	4611      	mov	r1, r2
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	75fb      	strb	r3, [r7, #23]
 8003b30:	e00d      	b.n	8003b4e <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x66>
    {
      writeByte( adr[i] );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	7dfa      	ldrb	r2, [r7, #23]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	440a      	add	r2, r1
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	4611      	mov	r1, r2
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
 8003b4e:	7dfa      	ldrb	r2, [r7, #23]
 8003b50:	7abb      	ldrb	r3, [r7, #10]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3ed      	bcc.n	8003b32 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x4a>
    }
  }
  if( sizeData )
 8003b56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d035      	beq.n	8003bca <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xe2>
  {
    start(sizeData);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	4798      	blx	r3
    sendAddr( hwAddr | 0x01 ); // master read
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3310      	adds	r3, #16
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	7afa      	ldrb	r2, [r7, #11]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	4798      	blx	r3
    for( i=0; i < sizeData - 1; i++ )
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]
 8003b8a:	e00d      	b.n	8003ba8 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xc0>
    {
      data[i] = readByteAck();
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3318      	adds	r3, #24
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	7dfa      	ldrb	r2, [r7, #23]
 8003b96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b98:	188c      	adds	r4, r1, r2
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	4798      	blx	r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	7023      	strb	r3, [r4, #0]
    for( i=0; i < sizeData - 1; i++ )
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
 8003ba8:	7dfa      	ldrb	r2, [r7, #23]
 8003baa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	dbeb      	blt.n	8003b8c <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xa4>
    }
    data[i] = readByteNack();
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	331c      	adds	r3, #28
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	7dfa      	ldrb	r2, [r7, #23]
 8003bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc0:	188c      	adds	r4, r1, r2
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	4798      	blx	r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	7023      	strb	r3, [r4, #0]
  }
  stop();
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	4798      	blx	r3
  return( !isHardwareOK );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	791b      	ldrb	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd90      	pop	{r4, r7, pc}

08003bec <_ZN9EmbSysLib2Hw6MemoryC1Etmhb>:
//
// Memory
//
//*******************************************************************
//-------------------------------------------------------------------
Memory::Memory( WORD moduleId, DWORD size, BYTE def, bool isFlashFlag )
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	817b      	strh	r3, [r7, #10]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	727b      	strb	r3, [r7, #9]
: def        ( def         )
, isFlashFlag( isFlashFlag )
, report     ( moduleId    )
 8003c00:	4a0b      	ldr	r2, [pc, #44]	@ (8003c30 <_ZN9EmbSysLib2Hw6MemoryC1Etmhb+0x44>)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	601a      	str	r2, [r3, #0]
: def        ( def         )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	7a7a      	ldrb	r2, [r7, #9]
 8003c0a:	711a      	strb	r2, [r3, #4]
, isFlashFlag( isFlashFlag )
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	7e3a      	ldrb	r2, [r7, #24]
 8003c10:	715a      	strb	r2, [r3, #5]
, report     ( moduleId    )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	330c      	adds	r3, #12
 8003c16:	897a      	ldrh	r2, [r7, #10]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fab0 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->size        = size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]
}
<<<<<<< HEAD
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08009ad4 	.word	0x08009ad4
=======
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	080098e0 	.word	0x080098e0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003c34 <_ZN9EmbSysLib2Hw6Memory5writeEmh>:

//-------------------------------------------------------------------
inline void Memory::write( DWORD addr, BYTE data )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
  if( addr < size )          // valid address?
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d208      	bcs.n	8003c5e <_ZN9EmbSysLib2Hw6Memory5writeEmh+0x2a>
  {
    writeByte( addr, data ); // write data byte
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3320      	adds	r3, #32
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	79fa      	ldrb	r2, [r7, #7]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	4798      	blx	r3
  }
  else
  {
    report.error( ReportID_Hw::Event::WRITE_ERROR );
  }
}
 8003c5c:	e005      	b.n	8003c6a <_ZN9EmbSysLib2Hw6Memory5writeEmh+0x36>
    report.error( ReportID_Hw::Event::WRITE_ERROR );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	330c      	adds	r3, #12
 8003c62:	210b      	movs	r1, #11
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fac1 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_ZN9EmbSysLib2Hw6Memory4readEm>:

//-------------------------------------------------------------------
inline BYTE Memory::read( DWORD addr )
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  if( addr < size )           // valid address?
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d208      	bcs.n	8003c98 <_ZN9EmbSysLib2Hw6Memory4readEm+0x26>
  {
    return( readByte(addr) ); // read data byte
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3324      	adds	r3, #36	@ 0x24
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6839      	ldr	r1, [r7, #0]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
 8003c94:	4603      	mov	r3, r0
 8003c96:	e007      	b.n	8003ca8 <_ZN9EmbSysLib2Hw6Memory4readEm+0x36>
  }
  else
  {
    report.error( ReportID_Hw::Event::READ_ERROR );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	210a      	movs	r1, #10
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff faa4 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
    return( def );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	791b      	ldrb	r3, [r3, #4]
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_ZN9EmbSysLib2Hw6Memory5eraseEv>:

//-------------------------------------------------------------------
inline void Memory::erase( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  unlock();
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
  for( DWORD i = 0; i < size; i++ )  // write default to all addresses
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e00b      	b.n	8003ce0 <_ZN9EmbSysLib2Hw6Memory5eraseEv+0x30>
  {
    writeByte( i, def );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3320      	adds	r3, #32
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	7912      	ldrb	r2, [r2, #4]
 8003cd4:	68f9      	ldr	r1, [r7, #12]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
  for( DWORD i = 0; i < size; i++ )  // write default to all addresses
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3ee      	bcc.n	8003cc8 <_ZN9EmbSysLib2Hw6Memory5eraseEv+0x18>
  }
  lock();
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_ZNK9EmbSysLib2Hw6Memory7getSizeEv>:

//-------------------------------------------------------------------
inline DWORD Memory::getSize( void ) const
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return( size );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <_ZNK9EmbSysLib2Hw6Memory7isFlashEv>:

//-------------------------------------------------------------------
inline bool Memory::isFlash( void ) const
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return( isFlashFlag );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	795b      	ldrb	r3, [r3, #5]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <_ZN9EmbSysLib2Hw4PortC1Et>:
//
// Port
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Port( WORD moduleId )
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8003d3c:	4a07      	ldr	r2, [pc, #28]	@ (8003d5c <_ZN9EmbSysLib2Hw4PortC1Et+0x2c>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fa18 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
<<<<<<< HEAD
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	08009b58 	.word	0x08009b58
=======
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	08009964 	.word	0x08009964
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003d60 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>:
//
// Port::Pin
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Pin::Pin( Port &port, BYTE pinId )
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	71fb      	strb	r3, [r7, #7]
: pinId  ( pinId    )
, pinMask( 1<<pinId )
, port   ( port     )
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d9c <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h+0x3c>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]
: pinId  ( pinId    )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	79fa      	ldrb	r2, [r7, #7]
 8003d78:	711a      	strb	r2, [r3, #4]
, pinMask( 1<<pinId )
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]
, port   ( port     )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
{
}
<<<<<<< HEAD
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	08009b78 	.word	0x08009b78
=======
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	08009984 	.word	0x08009984
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003da0 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>:
  port.setPinMode( pinId, mode );
}

//-------------------------------------------------------------------
inline void Port::Pin::setMode( Mode mode )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  port.setPinMode( pinId, mode );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68d8      	ldr	r0, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3304      	adds	r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	7911      	ldrb	r1, [r2, #4]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	4798      	blx	r3
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_ZN9EmbSysLib2Hw4Port3Pin3setEv>:

//-------------------------------------------------------------------
inline void Port::Pin::set( void )
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  port.set( pinMask );
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68d8      	ldr	r0, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6892      	ldr	r2, [r2, #8]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4798      	blx	r3
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>:

//-------------------------------------------------------------------
inline void Port::Pin::set( bool value )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  if( value )  port.set( pinMask );
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x2a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68d8      	ldr	r0, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6892      	ldr	r2, [r2, #8]
 8003e14:	4611      	mov	r1, r2
 8003e16:	4798      	blx	r3
  else         port.clr( pinMask );
}
 8003e18:	e00a      	b.n	8003e30 <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x40>
  else         port.clr( pinMask );
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68d8      	ldr	r0, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3310      	adds	r3, #16
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4798      	blx	r3
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_ZN9EmbSysLib2Hw4Port3Pin3clrEv>:

//-------------------------------------------------------------------
inline void Port::Pin::clr( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  port.clr( pinMask );
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68d8      	ldr	r0, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3310      	adds	r3, #16
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6892      	ldr	r2, [r2, #8]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4798      	blx	r3
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_ZN9EmbSysLib2Hw4Port3Pin3getEv>:

//-------------------------------------------------------------------
inline bool Port::Pin::get( void )
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  return( (port.get() & pinMask) != 0 );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4610      	mov	r0, r2
 8003e76:	4798      	blx	r3
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <_ZN9EmbSysLib2Hw5TimerC1Et>:
//
// Timer
//
//*******************************************************************
//-------------------------------------------------------------------
Timer::Timer( WORD moduleId )
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8003ea0:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <_ZN9EmbSysLib2Hw5TimerC1Et+0x34>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fcbb 	bl	8005826 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	887a      	ldrh	r2, [r7, #2]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff f961 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
<<<<<<< HEAD
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	08009b94 	.word	0x08009b94
=======
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	080099a0 	.word	0x080099a0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003ecc <_ZN9EmbSysLib2Hw5Timer12getCycleTimeEv>:

//-------------------------------------------------------------------
DWORD Timer::getCycleTime( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  return( cycleTime );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN9EmbSysLib2Hw5Timer3addEPNS1_4TaskE>:

//-------------------------------------------------------------------
void Timer::add( Timer::Task *ptr )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  isrSeq.add( ptr );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fca4 	bl	8005842 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv>:

//-------------------------------------------------------------------
inline void Timer::isrHandler( void )
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  Task *ptr = isrSeq.getFirst();
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fcc3 	bl	800589a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>
 8003f14:	60f8      	str	r0, [r7, #12]
  while( ptr )
 8003f16:	e00a      	b.n	8003f2e <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x2c>
  {
    ptr->update();
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	4798      	blx	r3
    ptr = ptr->getNext();
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 fcc3 	bl	80058b2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>
 8003f2c:	60f8      	str	r0, [r7, #12]
  while( ptr )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f1      	bne.n	8003f18 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x16>
  }
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <_ZN9EmbSysLib2Hw5TouchC1EtttNS1_11OrientationE>:
//
// Touch
//
//*******************************************************************
//-------------------------------------------------------------------
Touch::Touch( WORD        moduleId, 
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
              WORD        width, 
              WORD        height, 
              Orientation orientation )
: report( moduleId )
 8003f5a:	4a10      	ldr	r2, [pc, #64]	@ (8003f9c <_ZN9EmbSysLib2Hw5TouchC1EtttNS1_11OrientationE+0x5c>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3310      	adds	r3, #16
 8003f64:	897a      	ldrh	r2, [r7, #10]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff f909 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->width       = width;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	893a      	ldrh	r2, [r7, #8]
 8003f72:	815a      	strh	r2, [r3, #10]
  this->height      = height;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	819a      	strh	r2, [r3, #12]
  this->orientation = orientation;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	7e3a      	ldrb	r2, [r7, #24]
 8003f7e:	739a      	strb	r2, [r3, #14]
  
  xPos          = 0;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	809a      	strh	r2, [r3, #4]
  yPos          = 0;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	80da      	strh	r2, [r3, #6]
  isTouchedFlag = false;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	721a      	strb	r2, [r3, #8]
}
<<<<<<< HEAD
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	0800995c 	.word	0x0800995c
=======
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	08009768 	.word	0x08009768
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08003fa0 <_ZN9EmbSysLib2Hw5Touch7getPosXEv>:

//-------------------------------------------------------------------
inline WORD Touch::getPosX( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  switch( orientation )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7b9b      	ldrb	r3, [r3, #14]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d012      	beq.n	8003fd6 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x36>
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	dc03      	bgt.n	8003fbc <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x1c>
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d004      	beq.n	8003fc2 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x22>
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d005      	beq.n	8003fc8 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x28>
  {
    default:
    case Touch::ROTATION_0  : return( xPos );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	889b      	ldrh	r3, [r3, #4]
 8003fc0:	e00f      	b.n	8003fe2 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x42>
    case Touch::ROTATION_90 : return( yPos );
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	88db      	ldrh	r3, [r3, #6]
 8003fc6:	e00c      	b.n	8003fe2 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x42>
    case Touch::ROTATION_180: return( width-xPos );
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	895a      	ldrh	r2, [r3, #10]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	889b      	ldrh	r3, [r3, #4]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	e005      	b.n	8003fe2 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x42>
    case Touch::ROTATION_270: return( height-yPos );
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	899a      	ldrh	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	88db      	ldrh	r3, [r3, #6]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b29b      	uxth	r3, r3
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <_ZN9EmbSysLib2Hw5Touch7getPosYEv>:

//-------------------------------------------------------------------
inline WORD Touch::getPosY( void )
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  switch( orientation )
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7b9b      	ldrb	r3, [r3, #14]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d016      	beq.n	800402c <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x3e>
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	dc03      	bgt.n	800400a <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x1c>
 8004002:	2b01      	cmp	r3, #1
 8004004:	d004      	beq.n	8004010 <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x22>
 8004006:	2b02      	cmp	r3, #2
 8004008:	d009      	beq.n	800401e <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x30>
  {
    default:
    case Touch::ROTATION_0  : return( yPos );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	88db      	ldrh	r3, [r3, #6]
 800400e:	e00f      	b.n	8004030 <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x42>
    case Touch::ROTATION_90 : return( width-xPos );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	895a      	ldrh	r2, [r3, #10]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	889b      	ldrh	r3, [r3, #4]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	e008      	b.n	8004030 <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x42>
    case Touch::ROTATION_180: return( height-yPos );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	899a      	ldrh	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	88db      	ldrh	r3, [r3, #6]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	b29b      	uxth	r3, r3
 800402a:	e001      	b.n	8004030 <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x42>
    case Touch::ROTATION_270: return( xPos );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	889b      	ldrh	r3, [r3, #4]
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_ZN9EmbSysLib2Hw5Touch9isTouchedEv>:

//-------------------------------------------------------------------
inline BYTE Touch::isTouched( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  return( isTouchedFlag );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7a1b      	ldrb	r3, [r3, #8]
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <_ZN9EmbSysLib2Hw4UartC1Ettt>:
//
// Uart
//
//*******************************************************************
//-------------------------------------------------------------------
Uart::Uart( WORD moduleId, WORD sizeRxBuf, WORD sizeTxBuf )
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	460b      	mov	r3, r1
 8004068:	813b      	strh	r3, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]

: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
, dataTxBuf( sizeTxBuf )
, report( moduleId )
 800406e:	4a1f      	ldr	r2, [pc, #124]	@ (80040ec <_ZN9EmbSysLib2Hw4UartC1Ettt+0x98>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	601a      	str	r2, [r3, #0]
: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3304      	adds	r3, #4
 8004078:	893a      	ldrh	r2, [r7, #8]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fc24 	bl	80058ca <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, dataTxBuf( sizeTxBuf )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3310      	adds	r3, #16
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fc1d 	bl	80058ca <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, report( moduleId )
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	331e      	adds	r3, #30
 8004094:	897a      	ldrh	r2, [r7, #10]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff f871 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  if(   dataRxBuf.getSize() != sizeRxBuf
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fc3c 	bl	8005920 <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
     || dataTxBuf.getSize() != sizeTxBuf )
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d109      	bne.n	80040c6 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x72>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3310      	adds	r3, #16
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fc32 	bl	8005920 <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d001      	beq.n	80040ca <_ZN9EmbSysLib2Hw4UartC1Ettt+0x76>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <_ZN9EmbSysLib2Hw4UartC1Ettt+0x78>
 80040ca:	2300      	movs	r3, #0
  if(   dataRxBuf.getSize() != sizeRxBuf
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <_ZN9EmbSysLib2Hw4UartC1Ettt+0x88>
  {
    report.error( ReportID_Hw::Event::MEMORY_ALLOCTION_ERROR );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	331e      	adds	r3, #30
 80040d4:	2105      	movs	r1, #5
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f888 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
  }
  txReady = true;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	771a      	strb	r2, [r3, #28]
}
<<<<<<< HEAD
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	08009a30 	.word	0x08009a30
=======
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	0800983c 	.word	0x0800983c
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080040f0 <_ZN9EmbSysLib2Hw4Uart5isrRxEv>:

//-------------------------------------------------------------------
void Uart::isrRx( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  BYTE data = getByte(); // read data from hardware
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	332c      	adds	r3, #44	@ 0x2c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]

  dataRxBuf << data;     // pipe data into FIFO
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	f107 020f 	add.w	r2, r7, #15
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fc10 	bl	8005938 <_ZN9EmbSysLib3Std4FifoIhElsERKh>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZN9EmbSysLib2Hw4Uart5isrTxEv>:

//-------------------------------------------------------------------
inline void Uart::isrTx( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  BYTE data = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]

  if( !dataTxBuf.isEmpty() ) // data to been sent?
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fc37 	bl	80059a4 <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>
 8004136:	4603      	mov	r3, r0
 8004138:	f083 0301 	eor.w	r3, r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x4a>
  {
    dataTxBuf >> data;       // read data from FIFO
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3310      	adds	r3, #16
 8004146:	f107 020f 	add.w	r2, r7, #15
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fc3d 	bl	80059cc <_ZN9EmbSysLib3Std4FifoIhErsERh>
    txReady = false;         // set flag before setByte() because
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
                             // some hardware doesn't support
                             // interrupts and isrTx is called recursiv
    setByte( data );         // write data to hardware
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3328      	adds	r3, #40	@ 0x28
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	4611      	mov	r1, r2
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
  }
  else
  {
    txReady = true;          // we are ready
  }
}
 8004168:	e002      	b.n	8004170 <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x50>
    txReady = true;          // we are ready
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh>:

//-------------------------------------------------------------------
void Uart::transmitByte( BYTE data )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 8004184:	e00a      	b.n	800419c <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
  {
    if( txReady )             // this case is an error:
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7f1b      	ldrb	r3, [r3, #28]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
                              //   FIFO is full,
                              //   but isrTx is not running
    {
      isrTx();                // call isrTx explicit
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3320      	adds	r3, #32
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3310      	adds	r3, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 fc47 	bl	8005a34 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ec      	bne.n	8004186 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0xe>
    }
                              // else: Data transfer is running,
                              //       we have to wait until complete
  }

  dataTxBuf << data;          // pipe data into FIFO
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3310      	adds	r3, #16
 80041b0:	1cfa      	adds	r2, r7, #3
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fbbf 	bl	8005938 <_ZN9EmbSysLib3Std4FifoIhElsERKh>

  if( txReady )               // at first time, isrTx has to be
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7f1b      	ldrb	r3, [r3, #28]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x58>
                              // called explicit without interrupt
  {
    isrTx();
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3320      	adds	r3, #32
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
  }
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_ZN9EmbSysLib2Hw4Uart3setEh>:

//-------------------------------------------------------------------
void Uart::set( BYTE data )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  transmitByte( data );
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3324      	adds	r3, #36	@ 0x24
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	4611      	mov	r1, r2
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZN9EmbSysLib2Hw4Uart3setEPKht>:

//-------------------------------------------------------------------
void Uart::set( const BYTE *data, WORD length )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
  while( length-- )
 800420a:	e00a      	b.n	8004222 <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x26>
  {
    transmitByte( *(data++ ) ); // put a character and set pointer to next
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3324      	adds	r3, #36	@ 0x24
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	4790      	blx	r2
  while( length-- )
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	80fa      	strh	r2, [r7, #6]
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ea      	bne.n	800420c <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x10>
  }
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN9EmbSysLib2Hw4Uart3setEPKc>:

//-------------------------------------------------------------------
void Uart::set( const char *str )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  while( *str )                // until end of null terminated string
 800424a:	e00a      	b.n	8004262 <_ZN9EmbSysLib2Hw4Uart3setEPKc+0x22>
  {
    transmitByte( *(str++ ) ); // put a character and set pointer to next
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3324      	adds	r3, #36	@ 0x24
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	1c59      	adds	r1, r3, #1
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4790      	blx	r2
  while( *str )                // until end of null terminated string
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <_ZN9EmbSysLib2Hw4Uart3setEPKc+0xc>
  }
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_ZN9EmbSysLib2Hw4Uart14isTxBufferFullEv>:

//-------------------------------------------------------------------
inline bool Uart::isTxBufferFull( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.isFull() );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3310      	adds	r3, #16
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fbd7 	bl	8005a34 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZN9EmbSysLib2Hw4Uart20getFifoRemainingSizeEv>:

//-------------------------------------------------------------------
inline WORD Uart::getFifoRemainingSize( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.getFree() );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3310      	adds	r3, #16
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fbdf 	bl	8005a60 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_ZN9EmbSysLib2Hw4Uart3getERh>:

//-------------------------------------------------------------------
bool Uart::get( BYTE &data )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  BYTE tmp = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]

  if( dataRxBuf >> tmp )   // is there a data byte in the FIFO?
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	f107 020f 	add.w	r2, r7, #15
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 fb81 	bl	80059cc <_ZN9EmbSysLib3Std4FifoIhErsERh>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <_ZN9EmbSysLib2Hw4Uart3getERh+0x2e>
  {
    data = tmp;            // copy data byte to pointer
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
    return( true );        // yes, we received a data byte
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <_ZN9EmbSysLib2Hw4Uart3getERh+0x30>
  }
  else
  {
    return( false );       // no data byte received
 80042da:	2300      	movs	r3, #0
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <_ZN9EmbSysLib2Hw4Uart3getEv>:

//-------------------------------------------------------------------
BYTE Uart::get( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  BYTE tmp = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]

  if( get(tmp) )    // is there a data byte in the FIFO?
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f107 020f 	add.w	r2, r7, #15
 80042fc:	4611      	mov	r1, r2
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <_ZN9EmbSysLib2Hw4Uart3getEv+0x28>
  {
    return( tmp );  // yes, we received a data byte
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	e000      	b.n	800430e <_ZN9EmbSysLib2Hw4Uart3getEv+0x2a>
  }
  else
  {
    return( 0 );    // no data byte received
 800430c:	2300      	movs	r3, #0
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>:
//
// Digital
//
//*******************************************************************
//-------------------------------------------------------------------
Digital::Digital( Port  &port,
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	460b      	mov	r3, r1
 8004328:	71fb      	strb	r3, [r7, #7]
 800432a:	4613      	mov	r3, r2
 800432c:	71bb      	strb	r3, [r7, #6]
                  BYTE   pinId,
                  Mode   mode,
                  bool   def )
: pin( port, pinId )
 800432e:	4a13      	ldr	r2, [pc, #76]	@ (800437c <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb+0x64>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3308      	adds	r3, #8
 8004338:	79fa      	ldrb	r2, [r7, #7]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fd0f 	bl	8003d60 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
{
  valueIn    = 0;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	711a      	strb	r2, [r3, #4]
  valueOut   = 0;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	715a      	strb	r2, [r3, #5]
  pinDefault = def;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	7e3a      	ldrb	r2, [r7, #24]
 8004352:	719a      	strb	r2, [r3, #6]

  pin.set( def );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3308      	adds	r3, #8
 8004358:	7e3a      	ldrb	r2, [r7, #24]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fd47 	bl	8003df0 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
  pin.setMode( (Port::Mode)mode );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3308      	adds	r3, #8
 8004366:	79ba      	ldrb	r2, [r7, #6]
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fd18 	bl	8003da0 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
<<<<<<< HEAD
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	0800992c 	.word	0x0800992c
=======
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	08009738 	.word	0x08009738
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08004380 <_ZN9EmbSysLib3Dev7Digital7setModeENS1_4ModeE>:

//-------------------------------------------------------------------
void Digital::setMode( Mode mode )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  pin.setMode( (Port::Mode)mode );
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3308      	adds	r3, #8
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fd03 	bl	8003da0 <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZN9EmbSysLib3Dev7Digital3setEb>:

//-------------------------------------------------------------------
void Digital::set( bool value )
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]
  valueOut = value;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	715a      	strb	r2, [r3, #5]
  pin.set( value ^ pinDefault );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 0008 	add.w	r0, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7ff fd10 	bl	8003df0 <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZN9EmbSysLib3Dev7Digital3getEv>:

//-------------------------------------------------------------------
bool Digital::get( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  return( pin.get() != pinDefault );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3308      	adds	r3, #8
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fd3a 	bl	8003e5e <_ZN9EmbSysLib2Hw4Port3Pin3getEv>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	799b      	ldrb	r3, [r3, #6]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>:
//
// ScreenChar
//
//*******************************************************************
//-------------------------------------------------------------------
ScreenChar::ScreenChar( DisplayChar &display )
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]

: display( display )
 800440e:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE+0x54>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	605a      	str	r2, [r3, #4]

{
  maxStrLength = display.getNumberOfColumns();
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3318      	adds	r3, #24
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	4798      	blx	r3
 8004426:	4603      	mov	r3, r0
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	721a      	strb	r2, [r3, #8]
  str = new char[maxStrLength+1];
<<<<<<< HEAD
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7a1b      	ldrb	r3, [r3, #8]
 8004432:	3301      	adds	r3, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f004 fb89 	bl	8008b4c <_Znaj>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]
=======
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7a1b      	ldrb	r3, [r3, #8]
 800444e:	3301      	adds	r3, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f004 fabd 	bl	80089d0 <_Znaj>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  display.clear();
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6838      	ldr	r0, [r7, #0]
 800444a:	4798      	blx	r3
}
<<<<<<< HEAD
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	08009918 	.word	0x08009918
=======
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	08009724 	.word	0x08009724
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

0800445c <_ZN9EmbSysLib3Dev10ScreenChar5clearEv>:

//-------------------------------------------------------------------
void ScreenChar::clear(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  display.clear();
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>:

//-------------------------------------------------------------------
void ScreenChar::refresh(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  display.refresh();
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3304      	adds	r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4610      	mov	r0, r2
 8004494:	4798      	blx	r3
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>:
//-------------------------------------------------------------------
void ScreenChar::printf( BYTE        line,
                         BYTE        column,
                         const char *format,
                         ... )
{
 800449e:	b408      	push	{r3}
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	70fb      	strb	r3, [r7, #3]
 80044ac:	4613      	mov	r3, r2
 80044ae:	70bb      	strb	r3, [r7, #2]
  va_list argzeiger;
  va_start ( argzeiger, format );
 80044b0:	f107 0320 	add.w	r3, r7, #32
 80044b4:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
<<<<<<< HEAD
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68d8      	ldr	r0, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7a1b      	ldrb	r3, [r3, #8]
 80044be:	3301      	adds	r3, #1
 80044c0:	4619      	mov	r1, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f004 fc69 	bl	8008d9c <vsniprintf>
=======
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68d8      	ldr	r0, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7a1b      	ldrb	r3, [r3, #8]
 80044da:	3301      	adds	r3, #1
 80044dc:	4619      	mov	r1, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f004 fb9b 	bl	8008c1c <vsniprintf>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  va_end   ( argzeiger );

  display.gotoTextPos( line, column );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6858      	ldr	r0, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	78ba      	ldrb	r2, [r7, #2]
 80044da:	78f9      	ldrb	r1, [r7, #3]
 80044dc:	4798      	blx	r3
  display.putString( str );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6858      	ldr	r0, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3310      	adds	r3, #16
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68d2      	ldr	r2, [r2, #12]
 80044f0:	4611      	mov	r1, r2
 80044f2:	4798      	blx	r3
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044fe:	b001      	add	sp, #4
 8004500:	4770      	bx	lr
	...

08004504 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>:
//
// ScreenGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
ScreenGraphic::ScreenGraphic( DisplayGraphic &display )
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

: display( display )
 800450e:	4a11      	ldr	r2, [pc, #68]	@ (8004554 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE+0x50>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	605a      	str	r2, [r3, #4]

{
  maxStrLength = display.getNumberOfColumns();
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3318      	adds	r3, #24
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4610      	mov	r0, r2
 8004526:	4798      	blx	r3
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	721a      	strb	r2, [r3, #8]
  str = new char[maxStrLength+1];
<<<<<<< HEAD
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7a1b      	ldrb	r3, [r3, #8]
 8004534:	3301      	adds	r3, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f004 fb08 	bl	8008b4c <_Znaj>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]
=======
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7a1b      	ldrb	r3, [r3, #8]
 8004550:	3301      	adds	r3, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f004 fa3c 	bl	80089d0 <_Znaj>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  clear();
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f807 	bl	8004558 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>
}
<<<<<<< HEAD
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	080098d4 	.word	0x080098d4
=======
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	080096e0 	.word	0x080096e0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08004558 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>:


//-------------------------------------------------------------------
void ScreenGraphic::clear( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  display.clear();
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	461a      	mov	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4610      	mov	r0, r2
 8004570:	4798      	blx	r3
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>:

//-------------------------------------------------------------------
void ScreenGraphic::refresh( void )
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  display.refresh();
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4610      	mov	r0, r2
 8004592:	4798      	blx	r3
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_ZN9EmbSysLib3Dev13ScreenGraphic6printfEhhPKcz>:
//-------------------------------------------------------------------
void ScreenGraphic::printf( BYTE        line,
                            BYTE        column,
                            const char *format,
                            ... )
{
 800459c:	b408      	push	{r3}
 800459e:	b580      	push	{r7, lr}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
 80045aa:	4613      	mov	r3, r2
 80045ac:	70bb      	strb	r3, [r7, #2]
  va_list argzeiger;
  va_start( argzeiger, format );
 80045ae:	f107 0320 	add.w	r3, r7, #32
 80045b2:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
<<<<<<< HEAD
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68d8      	ldr	r0, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7a1b      	ldrb	r3, [r3, #8]
 80045bc:	3301      	adds	r3, #1
 80045be:	4619      	mov	r1, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	f004 fbea 	bl	8008d9c <vsniprintf>
=======
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68d8      	ldr	r0, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7a1b      	ldrb	r3, [r3, #8]
 80045d8:	3301      	adds	r3, #1
 80045da:	4619      	mov	r1, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	f004 fb1c 	bl	8008c1c <vsniprintf>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  va_end  ( argzeiger );

  display.gotoTextPos( line, column );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6858      	ldr	r0, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	78ba      	ldrb	r2, [r7, #2]
 80045d8:	78f9      	ldrb	r1, [r7, #3]
 80045da:	4798      	blx	r3
  display.putString( str );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3310      	adds	r3, #16
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68d2      	ldr	r2, [r2, #12]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4798      	blx	r3
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045fe:	b001      	add	sp, #4
 8004600:	4770      	bx	lr

08004602 <_ZN9EmbSysLib3Dev13ScreenGraphic7setFontENS_2Hw4FontEh>:

//-------------------------------------------------------------------
void ScreenGraphic::setFont( Font font, BYTE zoom )
{
 8004602:	b590      	push	{r4, r7, lr}
 8004604:	b087      	sub	sp, #28
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	4638      	mov	r0, r7
 800460c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  display.setFont( font, zoom );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6858      	ldr	r0, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	331c      	adds	r3, #28
 800461c:	681c      	ldr	r4, [r3, #0]
 800461e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	463b      	mov	r3, r7
 8004626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004628:	47a0      	blx	r4
};
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bd90      	pop	{r4, r7, pc}

08004632 <_ZN9EmbSysLib3Dev13ScreenGraphic7setZoomEh>:

//-------------------------------------------------------------------
void ScreenGraphic::setZoom( BYTE zoom )
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	70fb      	strb	r3, [r7, #3]
  display.setZoom( zoom );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3320      	adds	r3, #32
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	78f9      	ldrb	r1, [r7, #3]
 800464e:	4610      	mov	r0, r2
 8004650:	4798      	blx	r3
};
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <_ZN9EmbSysLib3Dev13ScreenGraphic12setBackColorEt>:

//-------------------------------------------------------------------
void ScreenGraphic::setBackColor( WORD color )
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	807b      	strh	r3, [r7, #2]
  display.setBackColor( color );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3324      	adds	r3, #36	@ 0x24
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	8879      	ldrh	r1, [r7, #2]
 8004676:	4610      	mov	r0, r2
 8004678:	4798      	blx	r3
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ZN9EmbSysLib3Dev13ScreenGraphic12setTextColorEt>:

//-------------------------------------------------------------------
void ScreenGraphic::setTextColor( WORD color )
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	807b      	strh	r3, [r7, #2]
  display.setTextColor( color );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	332c      	adds	r3, #44	@ 0x2c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	8879      	ldrh	r1, [r7, #2]
 800469e:	4610      	mov	r0, r2
 80046a0:	4798      	blx	r3
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>:
//-------------------------------------------------------------------
void ScreenGraphic::drawText( WORD        x,
                              WORD        y,
                              const char *format,
                              ... )
{
 80046aa:	b408      	push	{r3}
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
 80046b8:	4613      	mov	r3, r2
 80046ba:	803b      	strh	r3, [r7, #0]
  va_list argzeiger;
  va_start( argzeiger, format );
 80046bc:	f107 0320 	add.w	r3, r7, #32
 80046c0:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
<<<<<<< HEAD
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68d8      	ldr	r0, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7a1b      	ldrb	r3, [r3, #8]
 80046ca:	3301      	adds	r3, #1
 80046cc:	4619      	mov	r1, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	f004 fb63 	bl	8008d9c <vsniprintf>
=======
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68d8      	ldr	r0, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7a1b      	ldrb	r3, [r3, #8]
 80046e6:	3301      	adds	r3, #1
 80046e8:	4619      	mov	r1, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	f004 fa95 	bl	8008c1c <vsniprintf>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  va_end  ( argzeiger );

  display.gotoPixelPos( x, y );
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6858      	ldr	r0, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3330      	adds	r3, #48	@ 0x30
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	883a      	ldrh	r2, [r7, #0]
 80046e6:	8879      	ldrh	r1, [r7, #2]
 80046e8:	4798      	blx	r3
  display.putString( str );
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3310      	adds	r3, #16
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68d2      	ldr	r2, [r2, #12]
 80046fe:	4611      	mov	r1, r2
 8004700:	4798      	blx	r3
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470c:	b001      	add	sp, #4
 800470e:	4770      	bx	lr

08004710 <_ZN9EmbSysLib3Dev13ScreenGraphic9drawPixelEttt>:

//-------------------------------------------------------------------
void ScreenGraphic::drawPixel( WORD x, WORD y, WORD color )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	817b      	strh	r3, [r7, #10]
 8004722:	460b      	mov	r3, r1
 8004724:	813b      	strh	r3, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3328      	adds	r3, #40	@ 0x28
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	88f9      	ldrh	r1, [r7, #6]
 800473a:	4610      	mov	r0, r2
 800473c:	4798      	blx	r3
   display.putPixel( x, y );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6858      	ldr	r0, [r3, #4]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3334      	adds	r3, #52	@ 0x34
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	893a      	ldrh	r2, [r7, #8]
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	4798      	blx	r3
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <_ZN9EmbSysLib3Dev13ScreenGraphic13drawRectangleEttttt>:
void ScreenGraphic::drawRectangle( WORD x,
                                   WORD y,
                                   WORD w,
                                   WORD h,
                                   WORD color )
{
 800475a:	b5b0      	push	{r4, r5, r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af02      	add	r7, sp, #8
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	461a      	mov	r2, r3
 8004768:	4603      	mov	r3, r0
 800476a:	817b      	strh	r3, [r7, #10]
 800476c:	460b      	mov	r3, r1
 800476e:	813b      	strh	r3, [r7, #8]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3328      	adds	r3, #40	@ 0x28
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004784:	4610      	mov	r0, r2
 8004786:	4798      	blx	r3
   display.putRectangle( x, y, w, h );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6858      	ldr	r0, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3338      	adds	r3, #56	@ 0x38
 8004794:	681c      	ldr	r4, [r3, #0]
 8004796:	88fd      	ldrh	r5, [r7, #6]
 8004798:	893a      	ldrh	r2, [r7, #8]
 800479a:	8979      	ldrh	r1, [r7, #10]
 800479c:	8c3b      	ldrh	r3, [r7, #32]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	462b      	mov	r3, r5
 80047a2:	47a0      	blx	r4
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bdb0      	pop	{r4, r5, r7, pc}

080047ac <_ZN9EmbSysLib3Dev13ScreenGraphic13drawRectangleEtttttt>:
                                   WORD y,
                                   WORD w,
                                   WORD h,
                                   WORD th,
                                   WORD color )
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	817b      	strh	r3, [r7, #10]
 80047be:	460b      	mov	r3, r1
 80047c0:	813b      	strh	r3, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  th = MIN( th, MIN(h,w) );
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	8c3b      	ldrh	r3, [r7, #32]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 ffe4 	bl	800579a <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 ffdd 	bl	800579a <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 80047e0:	4603      	mov	r3, r0
 80047e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // horizontal
  drawRectangle( x, y     , w, th, color );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3324      	adds	r3, #36	@ 0x24
 80047ea:	681c      	ldr	r4, [r3, #0]
 80047ec:	88f8      	ldrh	r0, [r7, #6]
 80047ee:	893a      	ldrh	r2, [r7, #8]
 80047f0:	8979      	ldrh	r1, [r7, #10]
 80047f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4603      	mov	r3, r0
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	47a0      	blx	r4
  drawRectangle( x, y+h-th, w, th, color );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3324      	adds	r3, #36	@ 0x24
 8004806:	681c      	ldr	r4, [r3, #0]
 8004808:	893a      	ldrh	r2, [r7, #8]
 800480a:	8c3b      	ldrh	r3, [r7, #32]
 800480c:	4413      	add	r3, r2
 800480e:	b29a      	uxth	r2, r3
 8004810:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	b29a      	uxth	r2, r3
 8004816:	88f8      	ldrh	r0, [r7, #6]
 8004818:	8979      	ldrh	r1, [r7, #10]
 800481a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	4603      	mov	r3, r0
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	47a0      	blx	r4

  // vertikal
  drawRectangle( x,      y, th, h, color );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3324      	adds	r3, #36	@ 0x24
 800482e:	681c      	ldr	r4, [r3, #0]
 8004830:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8004832:	893a      	ldrh	r2, [r7, #8]
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	8c3b      	ldrh	r3, [r7, #32]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4603      	mov	r3, r0
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	47a0      	blx	r4
  drawRectangle( x+w-th, y, th, h, color );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3324      	adds	r3, #36	@ 0x24
 800484a:	681c      	ldr	r4, [r3, #0]
 800484c:	897a      	ldrh	r2, [r7, #10]
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	4413      	add	r3, r2
 8004852:	b29a      	uxth	r2, r3
 8004854:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b299      	uxth	r1, r3
 800485a:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800485c:	893a      	ldrh	r2, [r7, #8]
 800485e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	8c3b      	ldrh	r3, [r7, #32]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	4603      	mov	r3, r0
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	47a0      	blx	r4
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt>:
void ScreenGraphic::drawCircle( WORD x0,
                                WORD y0,
                                WORD r,
                                WORD th,
                                WORD color)
{
 8004874:	b5b0      	push	{r4, r5, r7, lr}
 8004876:	b08a      	sub	sp, #40	@ 0x28
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	460b      	mov	r3, r1
 8004888:	813b      	strh	r3, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  if( th >= r ) // filled circle?
 800488e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	429a      	cmp	r2, r3
 8004894:	d30c      	bcc.n	80048b0 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x3c>
  {
    drawCircle( x0, y0, r, color );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3330      	adds	r3, #48	@ 0x30
 800489c:	681c      	ldr	r4, [r3, #0]
 800489e:	88f8      	ldrh	r0, [r7, #6]
 80048a0:	893a      	ldrh	r2, [r7, #8]
 80048a2:	8979      	ldrh	r1, [r7, #10]
 80048a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4603      	mov	r3, r0
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	47a0      	blx	r4
    return;
 80048ae:	e130      	b.n	8004b12 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x29e>
  }

  display.setPaintColor( color );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3328      	adds	r3, #40	@ 0x28
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3

  // Inner circle
  short fi  = 1 - (r-th);
 80048c4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	83fb      	strh	r3, [r7, #30]
  short dyi = -2*(r-th);
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	03d2      	lsls	r2, r2, #15
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	83bb      	strh	r3, [r7, #28]
  short yi  = r-th;
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	837b      	strh	r3, [r7, #26]

  // Outer circle
  short f  = 1 - r;
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	f1c3 0301 	rsb	r3, r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	833b      	strh	r3, [r7, #24]
  short dy = -2 * r;
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	461a      	mov	r2, r3
 80048fe:	03d2      	lsls	r2, r2, #15
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	82fb      	strh	r3, [r7, #22]
  short y  = r;
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	82bb      	strh	r3, [r7, #20]

  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 800490c:	2300      	movs	r3, #0
 800490e:	827b      	strh	r3, [r7, #18]
 8004910:	2302      	movs	r3, #2
 8004912:	823b      	strh	r3, [r7, #16]
 8004914:	e0f6      	b.n	8004b04 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x290>
  {
                                                             // Sector:
    display.putRectangle(x0 - x,      y0 - y,      1,  th ); // N->NW
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6858      	ldr	r0, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3338      	adds	r3, #56	@ 0x38
 8004922:	681c      	ldr	r4, [r3, #0]
 8004924:	8a7b      	ldrh	r3, [r7, #18]
 8004926:	897a      	ldrh	r2, [r7, #10]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	b299      	uxth	r1, r3
 800492c:	8abb      	ldrh	r3, [r7, #20]
 800492e:	893a      	ldrh	r2, [r7, #8]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b29a      	uxth	r2, r3
 8004934:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2301      	movs	r3, #1
 800493a:	47a0      	blx	r4
    display.putRectangle(x0 + x,      y0 - y,      1,  th ); // N->NE
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6858      	ldr	r0, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3338      	adds	r3, #56	@ 0x38
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	8a7a      	ldrh	r2, [r7, #18]
 800494c:	897b      	ldrh	r3, [r7, #10]
 800494e:	4413      	add	r3, r2
 8004950:	b299      	uxth	r1, r3
 8004952:	8abb      	ldrh	r3, [r7, #20]
 8004954:	893a      	ldrh	r2, [r7, #8]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	b29a      	uxth	r2, r3
 800495a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	47a0      	blx	r4
    display.putRectangle(x0 + y-th+1, y0 - x,      th, 1  ); // E->NE
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6858      	ldr	r0, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3338      	adds	r3, #56	@ 0x38
 800496e:	681c      	ldr	r4, [r3, #0]
 8004970:	8aba      	ldrh	r2, [r7, #20]
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	4413      	add	r3, r2
 8004976:	b29a      	uxth	r2, r3
 8004978:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	b29b      	uxth	r3, r3
 800497e:	3301      	adds	r3, #1
 8004980:	b299      	uxth	r1, r3
 8004982:	8a7b      	ldrh	r3, [r7, #18]
 8004984:	893a      	ldrh	r2, [r7, #8]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	b29a      	uxth	r2, r3
 800498a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800498c:	2501      	movs	r5, #1
 800498e:	9500      	str	r5, [sp, #0]
 8004990:	47a0      	blx	r4
    display.putRectangle(x0 + y-th+1, y0 + x,      th, 1  ); // E->SE
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6858      	ldr	r0, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3338      	adds	r3, #56	@ 0x38
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	8aba      	ldrh	r2, [r7, #20]
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	4413      	add	r3, r2
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	b299      	uxth	r1, r3
 80049b2:	8a7a      	ldrh	r2, [r7, #18]
 80049b4:	893b      	ldrh	r3, [r7, #8]
 80049b6:	4413      	add	r3, r2
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80049bc:	2501      	movs	r5, #1
 80049be:	9500      	str	r5, [sp, #0]
 80049c0:	47a0      	blx	r4
    display.putRectangle(x0 + x,      y0 + y-th+1, 1,  th ); // S->SE
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6858      	ldr	r0, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3338      	adds	r3, #56	@ 0x38
 80049ce:	681c      	ldr	r4, [r3, #0]
 80049d0:	8a7a      	ldrh	r2, [r7, #18]
 80049d2:	897b      	ldrh	r3, [r7, #10]
 80049d4:	4413      	add	r3, r2
 80049d6:	b299      	uxth	r1, r3
 80049d8:	8aba      	ldrh	r2, [r7, #20]
 80049da:	893b      	ldrh	r3, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	b29a      	uxth	r2, r3
 80049e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2301      	movs	r3, #1
 80049f0:	47a0      	blx	r4
    display.putRectangle(x0 - x,      y0 + y-th+1, 1,  th ); // S->SW
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6858      	ldr	r0, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3338      	adds	r3, #56	@ 0x38
 80049fe:	681c      	ldr	r4, [r3, #0]
 8004a00:	8a7b      	ldrh	r3, [r7, #18]
 8004a02:	897a      	ldrh	r2, [r7, #10]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	b299      	uxth	r1, r3
 8004a08:	8aba      	ldrh	r2, [r7, #20]
 8004a0a:	893b      	ldrh	r3, [r7, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2301      	movs	r3, #1
 8004a20:	47a0      	blx	r4
    display.putRectangle(x0 - y,      y0 + x,      th, 1  ); // W->SW
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6858      	ldr	r0, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3338      	adds	r3, #56	@ 0x38
 8004a2e:	681c      	ldr	r4, [r3, #0]
 8004a30:	8abb      	ldrh	r3, [r7, #20]
 8004a32:	897a      	ldrh	r2, [r7, #10]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	b299      	uxth	r1, r3
 8004a38:	8a7a      	ldrh	r2, [r7, #18]
 8004a3a:	893b      	ldrh	r3, [r7, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a42:	2501      	movs	r5, #1
 8004a44:	9500      	str	r5, [sp, #0]
 8004a46:	47a0      	blx	r4
    display.putRectangle(x0 - y,      y0 - x,      th, 1  ); // W->NW
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6858      	ldr	r0, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3338      	adds	r3, #56	@ 0x38
 8004a54:	681c      	ldr	r4, [r3, #0]
 8004a56:	8abb      	ldrh	r3, [r7, #20]
 8004a58:	897a      	ldrh	r2, [r7, #10]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	b299      	uxth	r1, r3
 8004a5e:	8a7b      	ldrh	r3, [r7, #18]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a68:	2501      	movs	r5, #1
 8004a6a:	9500      	str	r5, [sp, #0]
 8004a6c:	47a0      	blx	r4

    // Inner circle
    if (fi >= 0)
 8004a6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db0c      	blt.n	8004a90 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x21c>
    {
      yi  -= 1;
 8004a76:	8b7b      	ldrh	r3, [r7, #26]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	837b      	strh	r3, [r7, #26]
      dyi += 2;
 8004a7e:	8bbb      	ldrh	r3, [r7, #28]
 8004a80:	3302      	adds	r3, #2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	83bb      	strh	r3, [r7, #28]
      fi  += dyi;
 8004a86:	8bfa      	ldrh	r2, [r7, #30]
 8004a88:	8bbb      	ldrh	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	83fb      	strh	r3, [r7, #30]
    }
    fi += dx + 1;
 8004a90:	8a3a      	ldrh	r2, [r7, #16]
 8004a92:	8bfb      	ldrh	r3, [r7, #30]
 8004a94:	4413      	add	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	83fb      	strh	r3, [r7, #30]

    // Outer circle
    if (f >= 0)
 8004a9e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db0c      	blt.n	8004ac0 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x24c>
    {
      y  -= 1;
 8004aa6:	8abb      	ldrh	r3, [r7, #20]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	82bb      	strh	r3, [r7, #20]
      dy += 2;
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	82fb      	strh	r3, [r7, #22]
      f  += dy;
 8004ab6:	8b3a      	ldrh	r2, [r7, #24]
 8004ab8:	8afb      	ldrh	r3, [r7, #22]
 8004aba:	4413      	add	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	833b      	strh	r3, [r7, #24]
    }
    f += dx + 1;
 8004ac0:	8a3a      	ldrh	r2, [r7, #16]
 8004ac2:	8b3b      	ldrh	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	833b      	strh	r3, [r7, #24]

    // length of line from inner to outer circle
    if( yi<x)
 8004ace:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	da06      	bge.n	8004ae8 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x274>
      th = y - x + 1;
 8004ada:	8aba      	ldrh	r2, [r7, #20]
 8004adc:	8a7b      	ldrh	r3, [r7, #18]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	863b      	strh	r3, [r7, #48]	@ 0x30
 8004ae6:	e003      	b.n	8004af0 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x27c>
    else
      th = y - yi;
 8004ae8:	8aba      	ldrh	r2, [r7, #20]
 8004aea:	8b7b      	ldrh	r3, [r7, #26]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	863b      	strh	r3, [r7, #48]	@ 0x30
  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	827b      	strh	r3, [r7, #18]
 8004afc:	8a3b      	ldrh	r3, [r7, #16]
 8004afe:	3302      	adds	r3, #2
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	823b      	strh	r3, [r7, #16]
 8004b04:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004b08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f77f af02 	ble.w	8004916 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0xa2>
    }
}
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bdb0      	pop	{r4, r5, r7, pc}

08004b18 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt>:
//
void ScreenGraphic::drawCircle( WORD x0,
                                WORD y0,
                                WORD r,
                                WORD color )
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b08b      	sub	sp, #44	@ 0x2c
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	813b      	strh	r3, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  short f  = 1 - r;
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	f1c3 0301 	rsb	r3, r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	83fb      	strh	r3, [r7, #30]
  short dy = -2 * r;
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	03d2      	lsls	r2, r2, #15
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	83bb      	strh	r3, [r7, #28]
  short y  = r;
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	837b      	strh	r3, [r7, #26]

  display.setPaintColor( color );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3328      	adds	r3, #40	@ 0x28
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4798      	blx	r3

  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004b62:	2300      	movs	r3, #0
 8004b64:	833b      	strh	r3, [r7, #24]
 8004b66:	2302      	movs	r3, #2
 8004b68:	82fb      	strh	r3, [r7, #22]
 8004b6a:	e075      	b.n	8004c58 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x140>
  {
    display.putRectangle ( x0+x, y0-y, 1, y+y );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6858      	ldr	r0, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3338      	adds	r3, #56	@ 0x38
 8004b78:	681c      	ldr	r4, [r3, #0]
 8004b7a:	8b3a      	ldrh	r2, [r7, #24]
 8004b7c:	897b      	ldrh	r3, [r7, #10]
 8004b7e:	4413      	add	r3, r2
 8004b80:	b299      	uxth	r1, r3
 8004b82:	8b7b      	ldrh	r3, [r7, #26]
 8004b84:	893a      	ldrh	r2, [r7, #8]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	8b7b      	ldrh	r3, [r7, #26]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	2301      	movs	r3, #1
 8004b94:	47a0      	blx	r4
    display.putRectangle ( x0-x, y0-y, 1, y+y );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6858      	ldr	r0, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3338      	adds	r3, #56	@ 0x38
 8004ba2:	681c      	ldr	r4, [r3, #0]
 8004ba4:	8b3b      	ldrh	r3, [r7, #24]
 8004ba6:	897a      	ldrh	r2, [r7, #10]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	b299      	uxth	r1, r3
 8004bac:	8b7b      	ldrh	r3, [r7, #26]
 8004bae:	893a      	ldrh	r2, [r7, #8]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	8b7b      	ldrh	r3, [r7, #26]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	47a0      	blx	r4
    display.putRectangle ( x0+y, y0-x, 1, x+x );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6858      	ldr	r0, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3338      	adds	r3, #56	@ 0x38
 8004bcc:	681c      	ldr	r4, [r3, #0]
 8004bce:	8b7a      	ldrh	r2, [r7, #26]
 8004bd0:	897b      	ldrh	r3, [r7, #10]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b299      	uxth	r1, r3
 8004bd6:	8b3b      	ldrh	r3, [r7, #24]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	8b3b      	ldrh	r3, [r7, #24]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	47a0      	blx	r4
    display.putRectangle ( x0-y, y0-x, 1, x+x );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6858      	ldr	r0, [r3, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3338      	adds	r3, #56	@ 0x38
 8004bf6:	681c      	ldr	r4, [r3, #0]
 8004bf8:	8b7b      	ldrh	r3, [r7, #26]
 8004bfa:	897a      	ldrh	r2, [r7, #10]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	8b3b      	ldrh	r3, [r7, #24]
 8004c02:	893a      	ldrh	r2, [r7, #8]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	8b3b      	ldrh	r3, [r7, #24]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2301      	movs	r3, #1
 8004c12:	47a0      	blx	r4

    if (f >= 0)
 8004c14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0c      	blt.n	8004c36 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x11e>
    {
      y  -= 1;
 8004c1c:	8b7b      	ldrh	r3, [r7, #26]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	837b      	strh	r3, [r7, #26]
      dy += 2;
 8004c24:	8bbb      	ldrh	r3, [r7, #28]
 8004c26:	3302      	adds	r3, #2
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	83bb      	strh	r3, [r7, #28]
      f  += dy;
 8004c2c:	8bfa      	ldrh	r2, [r7, #30]
 8004c2e:	8bbb      	ldrh	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	83fb      	strh	r3, [r7, #30]
    }
    f += dx + 1;
 8004c36:	8afa      	ldrh	r2, [r7, #22]
 8004c38:	8bfb      	ldrh	r3, [r7, #30]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	83fb      	strh	r3, [r7, #30]
  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004c44:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	833b      	strh	r3, [r7, #24]
 8004c50:	8afb      	ldrh	r3, [r7, #22]
 8004c52:	3302      	adds	r3, #2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	82fb      	strh	r3, [r7, #22]
 8004c58:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004c5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	dd83      	ble.n	8004b6c <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x54>
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3724      	adds	r7, #36	@ 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd90      	pop	{r4, r7, pc}

08004c6e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>:
                              WORD y0,
                              WORD x1,
                              WORD y1,
                              WORD th,
                              WORD color )
{
 8004c6e:	b5b0      	push	{r4, r5, r7, lr}
 8004c70:	b08e      	sub	sp, #56	@ 0x38
 8004c72:	af02      	add	r7, sp, #8
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	817b      	strh	r3, [r7, #10]
 8004c80:	460b      	mov	r3, r1
 8004c82:	813b      	strh	r3, [r7, #8]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
  long t;
  int  x;
  int  y;
  int  dx = (int)x1-x0;
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	623b      	str	r3, [r7, #32]
  int  dy = (int)y1-y0;
 8004c90:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004c94:	893b      	ldrh	r3, [r7, #8]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	61fb      	str	r3, [r7, #28]

  if( dy == 0 ) // horizontal
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d12e      	bne.n	8004cfe <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x90>
  {
    x0 = (x0 < x1) ? x0 : x1;
 8004ca0:	897a      	ldrh	r2, [r7, #10]
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d201      	bcs.n	8004cac <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x3e>
 8004ca8:	897b      	ldrh	r3, [r7, #10]
 8004caa:	e000      	b.n	8004cae <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x40>
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8004cb0:	893a      	ldrh	r2, [r7, #8]
 8004cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d201      	bcs.n	8004cbe <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x50>
 8004cba:	893b      	ldrh	r3, [r7, #8]
 8004cbc:	e001      	b.n	8004cc2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x54>
 8004cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cc2:	813b      	strh	r3, [r7, #8]
    drawRectangle( x0, y0-th/2, abs(dx)+1, th, color );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3324      	adds	r3, #36	@ 0x24
 8004cca:	681c      	ldr	r4, [r3, #0]
 8004ccc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	893a      	ldrh	r2, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfb8      	it	lt
 8004ce0:	425b      	neglt	r3, r3
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b298      	uxth	r0, r3
 8004ce8:	8979      	ldrh	r1, [r7, #10]
 8004cea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	47a0      	blx	r4
      {
        drawPixel( x, y+i, color );
      }
    }
  }
}
 8004cfc:	e0c4      	b.n	8004e88 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
  else if( dx == 0 ) // vertikal
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d12f      	bne.n	8004d64 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xf6>
    x0 = (x0 < x1) ? x0 : x1;
 8004d04:	897a      	ldrh	r2, [r7, #10]
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d201      	bcs.n	8004d10 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xa2>
 8004d0c:	897b      	ldrh	r3, [r7, #10]
 8004d0e:	e000      	b.n	8004d12 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xa4>
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8004d14:	893a      	ldrh	r2, [r7, #8]
 8004d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d201      	bcs.n	8004d22 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xb4>
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	e001      	b.n	8004d26 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xb8>
 8004d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d26:	813b      	strh	r3, [r7, #8]
    drawRectangle(x0-th/2, y0, th, abs(dy)+1, color );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3324      	adds	r3, #36	@ 0x24
 8004d2e:	681c      	ldr	r4, [r3, #0]
 8004d30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	897a      	ldrh	r2, [r7, #10]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bfb8      	it	lt
 8004d44:	425b      	neglt	r3, r3
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 8004d50:	8938      	ldrh	r0, [r7, #8]
 8004d52:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004d56:	9201      	str	r2, [sp, #4]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	47a0      	blx	r4
}
 8004d62:	e091      	b.n	8004e88 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
  else if( abs(dx) <= abs(dy) )
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004d6a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bfb8      	it	lt
 8004d74:	425b      	neglt	r3, r3
 8004d76:	429a      	cmp	r2, r3
 8004d78:	dc43      	bgt.n	8004e02 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x194>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bfb8      	it	lt
 8004d80:	425b      	neglt	r3, r3
 8004d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d84:	e039      	b.n	8004dfa <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x18c>
      x = x0 + t*dx/abs(dy)-th/2;    // x = x0+dx downto x0
 8004d86:	897a      	ldrh	r2, [r7, #10]
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	6a39      	ldr	r1, [r7, #32]
 8004d8c:	fb03 f101 	mul.w	r1, r3, r1
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfb8      	it	lt
 8004d96:	425b      	neglt	r3, r3
 8004d98:	fb91 f3f3 	sdiv	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8004da2:	0852      	lsrs	r2, r2, #1
 8004da4:	b292      	uxth	r2, r2
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
      y = y0 + ( (dy>0) ? +t : -t ); // y = y0+dy downto y0
 8004daa:	893a      	ldrh	r2, [r7, #8]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	dc02      	bgt.n	8004db8 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x14a>
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	425b      	negs	r3, r3
 8004db6:	e000      	b.n	8004dba <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x14c>
 8004db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dba:	4413      	add	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
      for( int i = th-1; i >= 0; i-- )
 8004dbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc6:	e012      	b.n	8004dee <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x180>
        drawPixel( x+i, y, color );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3320      	adds	r3, #32
 8004dce:	681c      	ldr	r4, [r3, #0]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	b299      	uxth	r1, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	47a0      	blx	r4
      for( int i = th-1; i >= 0; i-- )
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dae9      	bge.n	8004dc8 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x15a>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 8004df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df6:	3b01      	subs	r3, #1
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dac2      	bge.n	8004d86 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x118>
}
 8004e00:	e042      	b.n	8004e88 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bfb8      	it	lt
 8004e08:	425b      	neglt	r3, r3
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e0c:	e039      	b.n	8004e82 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x214>
      x = x0 + ( (dx>0) ? +t : -t ); // x = x0+dx downto x0
 8004e0e:	897a      	ldrh	r2, [r7, #10]
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dc02      	bgt.n	8004e1c <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1ae>
 8004e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e18:	425b      	negs	r3, r3
 8004e1a:	e000      	b.n	8004e1e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1b0>
 8004e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1e:	4413      	add	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
      y = y0 + t*dy/abs(dx)-th/2;    // y = y0+dy downto y0
 8004e22:	893a      	ldrh	r2, [r7, #8]
 8004e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e26:	69f9      	ldr	r1, [r7, #28]
 8004e28:	fb03 f101 	mul.w	r1, r3, r1
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bfb8      	it	lt
 8004e32:	425b      	neglt	r3, r3
 8004e34:	fb91 f3f3 	sdiv	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8004e3e:	0852      	lsrs	r2, r2, #1
 8004e40:	b292      	uxth	r2, r2
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
      for( int i = th-1; i >= 0; i-- )
 8004e46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4e:	e012      	b.n	8004e76 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x208>
        drawPixel( x, y+i, color );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3320      	adds	r3, #32
 8004e56:	681c      	ldr	r4, [r3, #0]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	b299      	uxth	r1, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	47a0      	blx	r4
      for( int i = th-1; i >= 0; i-- )
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	3b01      	subs	r3, #1
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	dae9      	bge.n	8004e50 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1e2>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dac2      	bge.n	8004e0e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1a0>
}
 8004e88:	bf00      	nop
 8004e8a:	3730      	adds	r7, #48	@ 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdb0      	pop	{r4, r5, r7, pc}

08004e90 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawBitmapEttRNS_2Hw6BitmapE>:

//-------------------------------------------------------------------
void ScreenGraphic::drawBitmap( WORD    x,
                                WORD    y,
                                Bitmap &bitmap )
{
 8004e90:	b5b0      	push	{r4, r5, r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	813b      	strh	r3, [r7, #8]
  display.putBitmap( x, y, bitmap );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6858      	ldr	r0, [r3, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	333c      	adds	r3, #60	@ 0x3c
 8004eae:	681c      	ldr	r4, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	893d      	ldrh	r5, [r7, #8]
 8004eb4:	8979      	ldrh	r1, [r7, #10]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	9200      	str	r2, [sp, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	47a0      	blx	r4
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bdb0      	pop	{r4, r5, r7, pc}

08004ec8 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>:
//
// Pointer
//
//*******************************************************************
//-------------------------------------------------------------------
Pointer::Pointer( Touch &touchIn )
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]

: touch( touchIn )
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f04 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE+0x3c>)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	605a      	str	r2, [r3, #4]

{
  data.flags = Data::NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	751a      	strb	r2, [r3, #20]
  data.posX  = 0;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	819a      	strh	r2, [r3, #12]
  data.posY  = 0;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	81da      	strh	r2, [r3, #14]
  data.delta = 0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
}
<<<<<<< HEAD
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	080098c8 	.word	0x080098c8
=======
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	080096d4 	.word	0x080096d4
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08004f08 <_ZN9EmbSysLib3Dev7Pointer3getEv>:

//-------------------------------------------------------------------
Pointer::Data Pointer::get( void )
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b089      	sub	sp, #36	@ 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  touch.update();
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4798      	blx	r3

  int x = RANGE( (short)touch.getPosX(), (short)0, (short)0x7FFF );
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
 8004f34:	4603      	mov	r3, r0
 8004f36:	b21b      	sxth	r3, r3
 8004f38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fdaa 	bl	8005a98 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>
 8004f44:	4603      	mov	r3, r0
 8004f46:	61fb      	str	r3, [r7, #28]
  int y = RANGE( (short)touch.getPosY(), (short)0, (short)0x7FFF );
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4610      	mov	r0, r2
 8004f58:	4798      	blx	r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	b21b      	sxth	r3, r3
 8004f5e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fd97 	bl	8005a98 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	61bb      	str	r3, [r7, #24]
  BYTE isTouched = touch.isTouched();
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
 8004f80:	4603      	mov	r3, r0
 8004f82:	75fb      	strb	r3, [r7, #23]

  if( isTouched && !isTouchedPrev )
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d018      	beq.n	8004fbc <_ZN9EmbSysLib3Dev7Pointer3getEv+0xb4>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	7a1b      	ldrb	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d114      	bne.n	8004fbc <_ZN9EmbSysLib3Dev7Pointer3getEv+0xb4>
  {
    data.flags = Data::CTRL_DWN;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2210      	movs	r2, #16
 8004f96:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	611a      	str	r2, [r3, #16]
    posXprev   = x;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	619a      	str	r2, [r3, #24]
    posYprev   = y;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	61da      	str	r2, [r3, #28]
 8004fba:	e078      	b.n	80050ae <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
  else if( !isTouched  && isTouchedPrev )
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d112      	bne.n	8004fe8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xe0>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	7a1b      	ldrb	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00e      	beq.n	8004fe8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xe0>
  {
    data.flags = Data::CTRL_UP;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e062      	b.n	80050ae <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
  else if( isTouched  && isTouchedPrev )
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d057      	beq.n	800509e <_ZN9EmbSysLib3Dev7Pointer3getEv+0x196>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	7a1b      	ldrb	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d053      	beq.n	800509e <_ZN9EmbSysLib3Dev7Pointer3getEv+0x196>
  {
    data.flags = Data::PRESSED;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	b29a      	uxth	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]

    if( x != posXprev || y != posYprev )
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	429a      	cmp	r2, r3
 800501a:	d104      	bne.n	8005026 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x11e>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	429a      	cmp	r2, r3
 8005024:	d042      	beq.n	80050ac <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
    {
      if( abs(posXprev-x) > 15 || abs(posYprev-y) > 15 )
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfb8      	it	lt
 8005032:	425b      	neglt	r3, r3
 8005034:	2b0f      	cmp	r3, #15
 8005036:	dc08      	bgt.n	800504a <_ZN9EmbSysLib3Dev7Pointer3getEv+0x142>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	bfb8      	it	lt
 8005044:	425b      	neglt	r3, r3
 8005046:	2b0f      	cmp	r3, #15
 8005048:	dd30      	ble.n	80050ac <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
      {
        int deltaX = x-posXprev;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	613b      	str	r3, [r7, #16]
        int deltaY = y-posYprev;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	60fb      	str	r3, [r7, #12]
        if( abs(deltaX) > abs(deltaY) )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005064:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfb8      	it	lt
 800506e:	425b      	neglt	r3, r3
 8005070:	429a      	cmp	r2, r3
 8005072:	dd06      	ble.n	8005082 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x17a>
        {
          data.flags = Data::MOVE_X;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2203      	movs	r2, #3
 8005078:	751a      	strb	r2, [r3, #20]
          data.delta = deltaX;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	611a      	str	r2, [r3, #16]
 8005080:	e006      	b.n	8005090 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x188>
        }
        else
        {
          data.flags = Data::MOVE_Y;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2205      	movs	r2, #5
 8005086:	751a      	strb	r2, [r3, #20]
          data.delta = -deltaY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	425a      	negs	r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	611a      	str	r2, [r3, #16]
        }
        posXprev = x;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	619a      	str	r2, [r3, #24]
        posYprev = y;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	61da      	str	r2, [r3, #28]
      }
    }
  }
 800509c:	e006      	b.n	80050ac <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
  else
  {
    data.flags = Data::NONE;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2200      	movs	r2, #0
 80050a2:	751a      	strb	r2, [r3, #20]
    data.delta = 0;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
 80050aa:	e000      	b.n	80050ae <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
 80050ac:	bf00      	nop
  }
  isTouchedPrev = isTouched ;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	7dfa      	ldrb	r2, [r7, #23]
 80050b2:	721a      	strb	r2, [r3, #8]
  return( data );
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4614      	mov	r4, r2
 80050ba:	330c      	adds	r3, #12
 80050bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	3724      	adds	r7, #36	@ 0x24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd90      	pop	{r4, r7, pc}

080050cc <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>:
//
// Terminal
//
//*******************************************************************
//-------------------------------------------------------------------
Terminal::Terminal( Uart       &uart,
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4611      	mov	r1, r2
 80050d8:	461a      	mov	r2, r3
 80050da:	460b      	mov	r3, r1
 80050dc:	80fb      	strh	r3, [r7, #6]
 80050de:	4613      	mov	r3, r2
 80050e0:	80bb      	strh	r3, [r7, #4]
                    WORD        inBufSize,
                    WORD        outBufSize,
                    const char *key,
                    const char *eos )
: uart( uart )
 80050e2:	4a1e      	ldr	r2, [pc, #120]	@ (800515c <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_+0x90>)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	605a      	str	r2, [r3, #4]

{
  this->inBufSize  = inBufSize;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	811a      	strh	r2, [r3, #8]
  this->outBufSize = outBufSize;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	88ba      	ldrh	r2, [r7, #4]
 80050f8:	815a      	strh	r2, [r3, #10]
  this->key        = key;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	60da      	str	r2, [r3, #12]
  this->eos        = eos;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	611a      	str	r2, [r3, #16]
  strIn            = new char[ inBufSize  + 1 ];
<<<<<<< HEAD
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	3301      	adds	r3, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f003 fd1e 	bl	8008b4c <_Znaj>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	615a      	str	r2, [r3, #20]
  strOut           = new char[ outBufSize + 1 ];
 8005118:	88bb      	ldrh	r3, [r7, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f003 fd15 	bl	8008b4c <_Znaj>
 8005122:	4603      	mov	r3, r0
 8005124:	461a      	mov	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	619a      	str	r2, [r3, #24]
=======
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	3301      	adds	r3, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f003 fc52 	bl	80089d0 <_Znaj>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	615a      	str	r2, [r3, #20]
  strOut           = new char[ outBufSize + 1 ];
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	3301      	adds	r3, #1
 8005138:	4618      	mov	r0, r3
 800513a:	f003 fc49 	bl	80089d0 <_Znaj>
 800513e:	4603      	mov	r3, r0
 8005140:	461a      	mov	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	619a      	str	r2, [r3, #24]
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  idx              = 0;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
  escape           = 0;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	775a      	strb	r2, [r3, #29]
  last             = 0;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	779a      	strb	r2, [r3, #30]
  pending          = 0;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	849a      	strh	r2, [r3, #36]	@ 0x24
  ctrl             = 0;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	841a      	strh	r2, [r3, #32]
  num              = 0;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
<<<<<<< HEAD
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	080098b0 	.word	0x080098b0
=======
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	080096bc 	.word	0x080096bc
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08005160 <_ZN9EmbSysLib3Dev8Terminal6printfEPKcz>:
  return( 0 );
}

//-------------------------------------------------------------------
void Terminal::printf( const char *format, ... )
{
 8005160:	b40e      	push	{r1, r2, r3}
 8005162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  va_list argzeiger;

  va_start ( argzeiger, format );
 800516a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800516e:	60fb      	str	r3, [r7, #12]
  vsnprintf( strOut, outBufSize, format, argzeiger );
<<<<<<< HEAD
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6998      	ldr	r0, [r3, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	895b      	ldrh	r3, [r3, #10]
 8005178:	4619      	mov	r1, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517e:	f003 fe0d 	bl	8008d9c <vsniprintf>
=======
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6998      	ldr	r0, [r3, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	895b      	ldrh	r3, [r3, #10]
 8005194:	4619      	mov	r1, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	f003 fd3f 	bl	8008c1c <vsniprintf>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  va_end   ( argzeiger );

  // Set output
  uart.set( (BYTE*)strOut, strlen(strOut) );
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685d      	ldr	r5, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3304      	adds	r3, #4
 800518e:	681c      	ldr	r4, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699e      	ldr	r6, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fb f87f 	bl	800029c <strlen>
 800519e:	4603      	mov	r3, r0
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47a0      	blx	r4
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80051b4:	b003      	add	sp, #12
 80051b6:	4770      	bx	lr

080051b8 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>:
    //*******************************************************************
    /*!
    \class Task
    \brief Base class for a Task
    */
    class Task : public Timer::Task
<<<<<<< HEAD
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb f8f8 	bl	80003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 80051c8:	4a03      	ldr	r2, [pc, #12]	@ (80051d8 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev+0x20>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	080098bc 	.word	0x080098bc
=======
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb f8ea 	bl	80003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 80051e4:	4a03      	ldr	r2, [pc, #12]	; (80051f4 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev+0x20>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	080096c8 	.word	0x080096c8
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080051dc <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>:
//
// DigitalButton
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalButton::DigitalButton( Digital     &digital,
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	807b      	strh	r3, [r7, #2]
                              TaskManager &taskManager,
                              WORD         timeDebounce,
                              WORD         timeLong )
: digital     ( digital )
, timeDebounce( (DWORD)timeDebounce*1000/taskManager.getCycleTime() )
, timeLong    ( (DWORD)timeLong    *1000/taskManager.getCycleTime() )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ffe3 	bl	80051b8 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 80051f2:	4a20      	ldr	r2, [pc, #128]	@ (8005274 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt+0x98>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	601a      	str	r2, [r3, #0]
: digital     ( digital )
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	609a      	str	r2, [r3, #8]
, timeDebounce( (DWORD)timeDebounce*1000/taskManager.getCycleTime() )
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005204:	fb02 f403 	mul.w	r4, r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
 8005214:	4603      	mov	r3, r0
 8005216:	fbb4 f3f3 	udiv	r3, r4, r3
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	819a      	strh	r2, [r3, #12]
, timeLong    ( (DWORD)timeLong    *1000/taskManager.getCycleTime() )
 8005220:	8c3b      	ldrh	r3, [r7, #32]
 8005222:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005226:	fb02 f403 	mul.w	r4, r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
 8005236:	4603      	mov	r3, r0
 8005238:	fbb4 f3f3 	udiv	r3, r4, r3
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	81da      	strh	r2, [r3, #14]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3316      	adds	r3, #22
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fc48 	bl	8005ade <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEC1ES4_>
{
  timeOut = 0;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	821a      	strh	r2, [r3, #16]
  time    = 0;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	825a      	strh	r2, [r3, #18]
  taskManager.add(this);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3304      	adds	r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4611      	mov	r1, r2
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
}
<<<<<<< HEAD
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}
 8005274:	080098a4 	.word	0x080098a4
=======
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}
 8005290:	080096b0 	.word	0x080096b0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08005278 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv>:

//-------------------------------------------------------------------
void DigitalButton::update( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  // debounce: get new value after timeOut only
  if( timeOut == 0 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8a1b      	ldrh	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d117      	bne.n	80052b8 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x40>
  {
    bool in = digital.get();
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4610      	mov	r0, r2
 8005298:	4798      	blx	r3
 800529a:	4603      	mov	r3, r0
 800529c:	73fb      	strb	r3, [r7, #15]
    if( in != value )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7d1b      	ldrb	r3, [r3, #20]
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d00d      	beq.n	80052c4 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x4c>
    {
      value   = in;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	751a      	strb	r2, [r3, #20]
      timeOut = timeDebounce;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	899a      	ldrh	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	821a      	strh	r2, [r3, #16]
 80052b6:	e005      	b.n	80052c4 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x4c>
    }
  }
  else
  {
    timeOut--;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8a1b      	ldrh	r3, [r3, #16]
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	821a      	strh	r2, [r3, #16]
  }

  // Edge detection
  if( value != valuePre )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7d1a      	ldrb	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7d5b      	ldrb	r3, [r3, #21]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d025      	beq.n	800531c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xa4>
  {
    if( value ) // rising edge
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7d1b      	ldrb	r3, [r3, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x7c>
    {
      time = 0;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	825a      	strh	r2, [r3, #18]
      action = ACTIVATED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3316      	adds	r3, #22
 80052e2:	2201      	movs	r2, #1
 80052e4:	733a      	strb	r2, [r7, #12]
 80052e6:	f107 020c 	add.w	r2, r7, #12
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fc09 	bl	8005b04 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
 80052f2:	e00f      	b.n	8005314 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x9c>
    }
    else // falling edge
    {
      if( time < timeLong )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8a5a      	ldrh	r2, [r3, #18]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	89db      	ldrh	r3, [r3, #14]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d209      	bcs.n	8005314 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x9c>
      {
        action = SHORT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3316      	adds	r3, #22
 8005304:	2202      	movs	r2, #2
 8005306:	737a      	strb	r2, [r7, #13]
 8005308:	f107 020d 	add.w	r2, r7, #13
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fbf8 	bl	8005b04 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
      }
    }
    valuePre = value;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7d1a      	ldrb	r2, [r3, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	755a      	strb	r2, [r3, #21]
  }

  // time measurement
  if( value )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7d1b      	ldrb	r3, [r3, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01b      	beq.n	800535c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
  {
    if( time < timeLong )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8a5a      	ldrh	r2, [r3, #18]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	89db      	ldrh	r3, [r3, #14]
 800532c:	429a      	cmp	r2, r3
 800532e:	d215      	bcs.n	800535c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
    {
      time++;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8a5b      	ldrh	r3, [r3, #18]
 8005334:	3301      	adds	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	825a      	strh	r2, [r3, #18]
      if( time == timeLong )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8a5a      	ldrh	r2, [r3, #18]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	89db      	ldrh	r3, [r3, #14]
 8005344:	429a      	cmp	r2, r3
 8005346:	d109      	bne.n	800535c <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
      {
        action = LONG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3316      	adds	r3, #22
 800534c:	2203      	movs	r2, #3
 800534e:	73ba      	strb	r2, [r7, #14]
 8005350:	f107 020e 	add.w	r2, r7, #14
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fbd4 	bl	8005b04 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
      }
    }
  }
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalEncoder
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoder::DigitalEncoder( Digital *btnCtrlIn,
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
                          TaskManager    &taskManager )

: btnCtrl( btnCtrlIn )
, fifo   ( 20 )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff20 	bl	80051b8 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8005378:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE+0x48>)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	601a      	str	r2, [r3, #0]
: btnCtrl( btnCtrlIn )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]
, fifo   ( 20 )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	330c      	adds	r3, #12
 8005388:	2114      	movs	r1, #20
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fbc9 	bl	8005b22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>

{
  taskManager.add(this);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3304      	adds	r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4611      	mov	r1, r2
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	4798      	blx	r3
}
<<<<<<< HEAD
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08009890 	.word	0x08009890
=======
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800969c 	.word	0x0800969c
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

080053b0 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv>:
  }
}

//-------------------------------------------------------------------
void DigitalEncoder::update( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  if( !fifo.isFull() )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	330c      	adds	r3, #12
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fbdb 	bl	8005b78 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f083 0301 	eor.w	r3, r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d021      	beq.n	8005412 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
  {
    switch( getIncrement() )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3308      	adds	r3, #8
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
 80053da:	4603      	mov	r3, r0
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d002      	beq.n	80053e6 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x36>
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d00b      	beq.n	80053fc <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x4c>
    {
      case LEFT:  fifo << LEFT;    break;
      case RIGHT: fifo << RIGHT;   break;
      default:                     break;
 80053e4:	e015      	b.n	8005412 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case LEFT:  fifo << LEFT;    break;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	330c      	adds	r3, #12
 80053ea:	2201      	movs	r2, #1
 80053ec:	733a      	strb	r2, [r7, #12]
 80053ee:	f107 020c 	add.w	r2, r7, #12
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fbd5 	bl	8005ba4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 80053fa:	e00a      	b.n	8005412 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case RIGHT: fifo << RIGHT;   break;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	330c      	adds	r3, #12
 8005400:	2202      	movs	r2, #2
 8005402:	737a      	strb	r2, [r7, #13]
 8005404:	f107 020d 	add.w	r2, r7, #13
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fbca 	bl	8005ba4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005410:	bf00      	nop
    }
  }

  if( !fifo.isFull() )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	330c      	adds	r3, #12
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fbae 	bl	8005b78 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 800541c:	4603      	mov	r3, r0
 800541e:	f083 0301 	eor.w	r3, r3, #1
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d021      	beq.n	800546c <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
  {
    switch( getCtrl() )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3304      	adds	r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
 8005434:	4603      	mov	r3, r0
 8005436:	2b03      	cmp	r3, #3
 8005438:	d002      	beq.n	8005440 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x90>
 800543a:	2b04      	cmp	r3, #4
 800543c:	d00b      	beq.n	8005456 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xa6>
    {
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
      case CTRL_UP:   fifo << CTRL_UP;   break;
      default:                           break;
 800543e:	e015      	b.n	800546c <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	330c      	adds	r3, #12
 8005444:	2203      	movs	r2, #3
 8005446:	73ba      	strb	r2, [r7, #14]
 8005448:	f107 020e 	add.w	r2, r7, #14
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fba8 	bl	8005ba4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005454:	e00a      	b.n	800546c <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_UP:   fifo << CTRL_UP;   break;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	330c      	adds	r3, #12
 800545a:	2204      	movs	r2, #4
 800545c:	73fa      	strb	r2, [r7, #15]
 800545e:	f107 020f 	add.w	r2, r7, #15
 8005462:	4611      	mov	r1, r2
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb9d 	bl	8005ba4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 800546a:	bf00      	nop
    }
  }
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoder::getCtrl( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if( btnCtrl )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
  {
    switch( btnCtrl->getEvent() )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3318      	adds	r3, #24
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4610      	mov	r0, r2
 8005494:	4798      	blx	r3
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d002      	beq.n	80054a2 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x2e>
 800549c:	2b02      	cmp	r3, #2
 800549e:	d002      	beq.n	80054a6 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x32>
    {
      case Digital::ACTIVATED: return( CTRL_DWN );
      case Digital::RELEASED:  return( CTRL_UP );
      default:                 break;
 80054a0:	e003      	b.n	80054aa <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
      case Digital::ACTIVATED: return( CTRL_DWN );
 80054a2:	2303      	movs	r3, #3
 80054a4:	e002      	b.n	80054ac <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
      case Digital::RELEASED:  return( CTRL_UP );
 80054a6:	2304      	movs	r3, #4
 80054a8:	e000      	b.n	80054ac <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
    }
  }
  return( NONE );
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>:
//
// DigitalEncoderJoystick
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoderJoystick::DigitalEncoderJoystick( Digital     *btnLeft,
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
                                                TaskManager &taskManager,
                                                WORD         repeatTime )
: DigitalEncoder( btnCtrl, taskManager )
, timerStart    ( 1000UL*repeatTime/taskManager.getCycleTime() )
, btnLeft       ( btnLeft )
, btnRight      ( btnRight )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff4b 	bl	8005364 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>
 80054ce:	4a11      	ldr	r2, [pc, #68]	@ (8005514 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt+0x60>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]
, timerStart    ( 1000UL*repeatTime/taskManager.getCycleTime() )
 80054d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054da:	fb02 f403 	mul.w	r4, r2, r3
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a38      	ldr	r0, [r7, #32]
 80054e8:	4798      	blx	r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	831a      	strh	r2, [r3, #24]
, btnLeft       ( btnLeft )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	61da      	str	r2, [r3, #28]
, btnRight      ( btnRight )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]
{
  timerCnt = timerStart;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8b1a      	ldrh	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	849a      	strh	r2, [r3, #36]	@ 0x24
}
<<<<<<< HEAD
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	bd90      	pop	{r4, r7, pc}
 8005514:	0800987c 	.word	0x0800987c
=======
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	08009688 	.word	0x08009688
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08005518 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoderJoystick::getIncrement( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if( timerCnt )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x1c>
  {
    timerCnt--;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	849a      	strh	r2, [r3, #36]	@ 0x24
  }

  if( btnLeft )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02a      	beq.n	8005592 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x7a>
  {
    if(    btnLeft->getEvent() == Digital::ACTIVATED
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3318      	adds	r3, #24
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4610      	mov	r0, r2
 800554c:	4798      	blx	r3
 800554e:	4603      	mov	r3, r0
        || (!timerCnt && timerStart && btnLeft->get()) )
 8005550:	2b01      	cmp	r3, #1
 8005552:	d013      	beq.n	800557c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x64>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d111      	bne.n	8005580 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8b1b      	ldrh	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4610      	mov	r0, r2
 8005574:	4798      	blx	r3
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x6a>
 8005580:	2300      	movs	r3, #0
    if(    btnLeft->getEvent() == Digital::ACTIVATED
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x7a>
    {
      timerCnt = timerStart;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8b1a      	ldrh	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	849a      	strh	r2, [r3, #36]	@ 0x24
      return( LEFT );
 800558e:	2301      	movs	r3, #1
 8005590:	e02f      	b.n	80055f2 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xda>
    }
  }

  if( btnRight )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02a      	beq.n	80055f0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xd8>
  {
    if(   btnRight->getEvent() == Digital::ACTIVATED
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1a      	ldr	r2, [r3, #32]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3318      	adds	r3, #24
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	4603      	mov	r3, r0
       || (!timerCnt && timerStart && btnRight->get()) )
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d013      	beq.n	80055da <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d111      	bne.n	80055de <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8b1b      	ldrh	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc8>
 80055de:	2300      	movs	r3, #0
    if(   btnRight->getEvent() == Digital::ACTIVATED
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xd8>
    {
      timerCnt = timerStart;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8b1a      	ldrh	r2, [r3, #24]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	849a      	strh	r2, [r3, #36]	@ 0x24
      return( RIGHT );
 80055ec:	2302      	movs	r3, #2
 80055ee:	e000      	b.n	80055f2 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xda>
    }
  }
  return( NONE );
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalIndicator
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalIndicator::DigitalIndicator( Digital     &digital,
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
                                    TaskManager &taskManager )
: digital( digital )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fdd4 	bl	80051b8 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8005610:	4a0f      	ldr	r2, [pc, #60]	@ (8005650 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE+0x54>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]
{
  clr();
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f861 	bl	80056e4 <_ZN9EmbSysLib4Ctrl16DigitalIndicator3clrEv>
  cycleTime = taskManager.getCycleTime();
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4798      	blx	r3
 800562e:	4602      	mov	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	60da      	str	r2, [r3, #12]
  taskManager.add(this);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4611      	mov	r1, r2
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	4798      	blx	r3
}
<<<<<<< HEAD
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	08009868 	.word	0x08009868
=======
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08009674 	.word	0x08009674
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08005654 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv>:

//-------------------------------------------------------------------
void DigitalIndicator::update( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  if( runUpdate )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	7ddb      	ldrb	r3, [r3, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d03b      	beq.n	80056dc <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
  {
    if( t >= maximum )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8a9a      	ldrh	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8a5b      	ldrh	r3, [r3, #18]
 800566c:	429a      	cmp	r2, r3
 800566e:	d312      	bcc.n	8005696 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x42>
    {
      if( repeat && maximum )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7d9b      	ldrb	r3, [r3, #22]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x34>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8a5b      	ldrh	r3, [r3, #18]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x34>
      {
        t = 0;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	829a      	strh	r2, [r3, #20]
        digital.clr();
      }
      t++;
    }
  }
}
 8005686:	e029      	b.n	80056dc <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
        clr();
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3304      	adds	r3, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
}
 8005694:	e022      	b.n	80056dc <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
      if( t == 0 )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8a9b      	ldrh	r3, [r3, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x5e>
        digital.set();
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	e00e      	b.n	80056d0 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x7c>
      else if( t >= limit )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8a9a      	ldrh	r2, [r3, #20]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8a1b      	ldrh	r3, [r3, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d308      	bcc.n	80056d0 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x7c>
        digital.clr();
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
      t++;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8a9b      	ldrh	r3, [r3, #20]
 80056d4:	3301      	adds	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	829a      	strh	r2, [r3, #20]
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <_ZN9EmbSysLib4Ctrl16DigitalIndicator3clrEv>:

//-------------------------------------------------------------------
void DigitalIndicator::clr( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  runUpdate = false;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	75da      	strb	r2, [r3, #23]
  maximum   = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	825a      	strh	r2, [r3, #18]
  repeat    = false;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	759a      	strb	r2, [r3, #22]
  t         = 0;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	829a      	strh	r2, [r3, #20]
  digital.clr();
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4610      	mov	r0, r2
 8005714:	4798      	blx	r3
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZN9EmbSysLib4Ctrl16DigitalIndicator7triggerEt>:

//-------------------------------------------------------------------
void DigitalIndicator::trigger( WORD time )
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	807b      	strh	r3, [r7, #2]
  runUpdate = false;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	75da      	strb	r2, [r3, #23]
  repeat    = false;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	759a      	strb	r2, [r3, #22]
  maximum   = ((DWORD)time*1000)/cycleTime;
 8005736:	887b      	ldrh	r3, [r7, #2]
 8005738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800573c:	fb03 f202 	mul.w	r2, r3, r2
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	825a      	strh	r2, [r3, #18]
  limit     = maximum;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8a5a      	ldrh	r2, [r3, #18]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	821a      	strh	r2, [r3, #16]
  t         = 0;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	829a      	strh	r2, [r3, #20]
  runUpdate = true;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	75da      	strb	r2, [r3, #23]
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>:
      public:
        //-----------------------------------------------------------
        /*! Instatiate a Sequence::Item
            \param sequence If not zero, the item is added to \a Sequence
        */
        Item( Sequence<T> *sequence = 0 )
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
        {
          PtrNext = 0;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
          if( sequence )
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_+0x22>
          {
            sequence->add( (T*)this );
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3b04      	subs	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	6838      	ldr	r0, [r7, #0]
 800578c:	f000 f859 	bl	8005842 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
          }
        }
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>:
//*******************************************************************
/*! Compares two values and returns the minimum
    \param  x,y
    \return minimum of (x,y)
*/
template <class T> inline T MIN( T x, T y )
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	4603      	mov	r3, r0
 80057a2:	460a      	mov	r2, r1
 80057a4:	80fb      	strh	r3, [r7, #6]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80bb      	strh	r3, [r7, #4]
{
  if( x < y )
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	88bb      	ldrh	r3, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d201      	bcs.n	80057b6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_+0x1c>
    return( x );
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	e000      	b.n	80057b8 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_+0x1e>
  else
    return( y );
 80057b6:	88bb      	ldrh	r3, [r7, #4]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_>:
    \return
            - input value x, if min < x < max
            - min, if x < min
            - max, if x > max
*/
template <class T> inline T RANGE( T x, T min, T max )
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	80fb      	strh	r3, [r7, #6]
 80057ce:	460b      	mov	r3, r1
 80057d0:	80bb      	strh	r3, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	807b      	strh	r3, [r7, #2]
{
  if( x > max )
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	887b      	ldrh	r3, [r7, #2]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d901      	bls.n	80057e2 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x1e>
    return( max );
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	e006      	b.n	80057f0 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2c>
  if( x < min )
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	88bb      	ldrh	r3, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d201      	bcs.n	80057ee <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2a>
    return( min );
 80057ea:	88bb      	ldrh	r3, [r7, #4]
 80057ec:	e000      	b.n	80057f0 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2c>
  return( x );
 80057ee:	88fb      	ldrh	r3, [r7, #6]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>:
template <class T> inline T MIN( T x, T y )
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	460a      	mov	r2, r1
 8005806:	71fb      	strb	r3, [r7, #7]
 8005808:	4613      	mov	r3, r2
 800580a:	71bb      	strb	r3, [r7, #6]
  if( x < y )
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	79bb      	ldrb	r3, [r7, #6]
 8005810:	429a      	cmp	r2, r3
 8005812:	d201      	bcs.n	8005818 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_+0x1c>
    return( x );
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	e000      	b.n	800581a <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_+0x1e>
    return( y );
 8005818:	79bb      	ldrb	r3, [r7, #6]
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>:

  public:
    //---------------------------------------------------------------
    /*! Instantiate an empty list
    */
    Sequence( void )
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
    {
      PtrFirst = 0;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
    }
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>:
        \param itemPtr Pointer to the item
        \return
                - true: Item added
                - false: Item not added, because it is already in list
    */
    BYTE add( T *itemPtr )
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
    {
      T *ptr;

      // Is itemPtr still in list?
      ptr = PtrFirst;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]

      while( ptr )
 8005852:	e00c      	b.n	800586e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x2c>
      {
        if( ptr == itemPtr )
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d101      	bne.n	8005860 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x1e>
        {
          return( false );
 800585c:	2300      	movs	r3, #0
 800585e:	e016      	b.n	800588e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4c>
        }
        if(ptr->PtrNext) // Does curent object have a next object?
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x34>
        {
          ptr = ptr->PtrNext;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	60fb      	str	r3, [r7, #12]
      while( ptr )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ef      	bne.n	8005854 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x12>
 8005874:	e000      	b.n	8005878 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x36>
        }
        else
        {
          break;
 8005876:	bf00      	nop
        }
      }

      // Add a new object,
      // ptr may referes to last object in the list
      if( ptr ) // append new object to last object in list
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x44>
      {
        ptr->PtrNext = itemPtr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	e002      	b.n	800588c <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4a>
      }
      else // insert first object into list
      {
        PtrFirst = itemPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	601a      	str	r2, [r3, #0]
      }
      return( true );
 800588c:	2301      	movs	r3, #1
    }
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>:
    //---------------------------------------------------------------
    /*! Get the pointer to the first item in the list
        \return Pointer to the first item\n
                Zero, if list is empty
    */
    T* getFirst( void )
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
    {
      return( PtrFirst );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
    }
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>:
        T *getNext( void )
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
          return( PtrNext );
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
        }
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <_ZN9EmbSysLib3Std4FifoIhEC1Et>:
  public:
    //---------------------------------------------------------------
    /*! Create a FIFO and allocate it's memory
        \param sizeIn FIFO size (max number of objects stored in FIFO), default = 3
    */
    Fifo( WORD sizeIn = 3 )
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	807b      	strh	r3, [r7, #2]
    {
      in   = 0;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	809a      	strh	r2, [r3, #4]
      out  = 0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	887a      	ldrh	r2, [r7, #2]
 80058ec:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	895b      	ldrh	r3, [r3, #10]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x40>
      {
        speicher = new T[size];
<<<<<<< HEAD
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	895b      	ldrh	r3, [r3, #10]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f003 f926 	bl	8008b4c <_Znaj>
 8005900:	4603      	mov	r3, r0
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e005      	b.n	8005916 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x4c>
=======
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	895b      	ldrh	r3, [r3, #10]
 8005916:	4618      	mov	r0, r3
 8005918:	f003 f85a 	bl	80089d0 <_Znaj>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e005      	b.n	8005932 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x4c>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
      }
      else
      {
        size     = 0;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
      }
    }
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>:

    //---------------------------------------------------------------
    /*! Get FIFO size
        \return FIFO size
    */
    WORD getSize( void )
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    {
      return( size );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	895b      	ldrh	r3, [r3, #10]
    }
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <_ZN9EmbSysLib3Std4FifoIhElsERKh>:
        \param ref Reference to an object
        \return
                - true, if succeeded
                - false, if FIFO is full, object not written
    */
    bool operator<<( const T &ref )
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 8005946:	f7fa fecb 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	891a      	ldrh	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	895b      	ldrh	r3, [r3, #10]
 8005952:	429a      	cmp	r2, r3
 8005954:	d21f      	bcs.n	8005996 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x5e>
      {
        speicher[in] = ref;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	8892      	ldrh	r2, [r2, #4]
 800595e:	4413      	add	r3, r2
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	7812      	ldrb	r2, [r2, #0]
 8005964:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	889b      	ldrh	r3, [r3, #4]
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	895b      	ldrh	r3, [r3, #10]
 8005970:	3b01      	subs	r3, #1
 8005972:	429a      	cmp	r2, r3
 8005974:	da04      	bge.n	8005980 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x48>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	889b      	ldrh	r3, [r3, #4]
 800597a:	3301      	adds	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	e000      	b.n	8005982 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x4a>
 8005980:	2200      	movs	r2, #0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	809a      	strh	r2, [r3, #4]
        anz++;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	891b      	ldrh	r3, [r3, #8]
 800598a:	3301      	adds	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8005996:	f7fa feb5 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 800599a:	7bfb      	ldrb	r3, [r7, #15]
    }
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>:
    bool isEmpty( void )
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 80059ac:	f7fa fe98 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz == 0 );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	891b      	ldrh	r3, [r3, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 80059be:	f7fa fea1 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
    }
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <_ZN9EmbSysLib3Std4FifoIhErsERh>:
        \param ref Referenc to an object
        \return
                - true, if succeeded
                - false, if FIFO is empty, no object read
    */
    bool operator>>( T &ref )
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 80059da:	f7fa fe81 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz != 0 )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	891b      	ldrh	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01f      	beq.n	8005a26 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x5a>
      {
        ref = speicher[out];
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	88d2      	ldrh	r2, [r2, #6]
 80059ee:	4413      	add	r3, r2
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	701a      	strb	r2, [r3, #0]
        out = (out < size-1) ? out+1 : 0;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	88db      	ldrh	r3, [r3, #6]
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	895b      	ldrh	r3, [r3, #10]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	429a      	cmp	r2, r3
 8005a04:	da04      	bge.n	8005a10 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x44>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	e000      	b.n	8005a12 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x46>
 8005a10:	2200      	movs	r2, #0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	80da      	strh	r2, [r3, #6]
        anz--;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	891b      	ldrh	r3, [r3, #8]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8005a26:	f7fa fe6d 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>:
    bool isFull( void )
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005a3c:	f7fa fe50 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	891a      	ldrh	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	895b      	ldrh	r3, [r3, #10]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	bf2c      	ite	cs
 8005a4c:	2301      	movcs	r3, #1
 8005a4e:	2300      	movcc	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005a52:	f7fa fe57 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv>:
    WORD getFree( void )
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005a68:	f7fa fe3a 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = (size<=anz)?0:size - anz;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	895a      	ldrh	r2, [r3, #10]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	891b      	ldrh	r3, [r3, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d906      	bls.n	8005a86 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv+0x26>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	895a      	ldrh	r2, [r3, #10]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	891b      	ldrh	r3, [r3, #8]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	e000      	b.n	8005a88 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv+0x28>
 8005a86:	2300      	movs	r3, #0
 8005a88:	81fb      	strh	r3, [r7, #14]
      Hw::System::enableInterrupt();
 8005a8a:	f7fa fe3b 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005a8e:	89fb      	ldrh	r3, [r7, #14]
    }
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	80fb      	strh	r3, [r7, #6]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	80bb      	strh	r3, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	807b      	strh	r3, [r7, #2]
  if( x > max )
 8005aaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	dd02      	ble.n	8005abc <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x24>
    return( max );
 8005ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005aba:	e00a      	b.n	8005ad2 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x3a>
  if( x < min )
 8005abc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ac0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	da02      	bge.n	8005ace <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x36>
    return( min );
 8005ac8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005acc:	e001      	b.n	8005ad2 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x3a>
  return( x );
 8005ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEC1ES4_>:
  public:
    //---------------------------------------------------------------
    /*! Create a Flag
        \param def Initial value of the Flag (optional, otherwise value = 0)
    */
    Flag( T def = (T)0 )
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	70fb      	strb	r3, [r7, #3]
    {
      value = def;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	701a      	strb	r2, [r3, #0]
      prev  = (T)0;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	705a      	strb	r2, [r3, #1]
    }
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>:

    //---------------------------------------------------------------
    /*! Set the Flag
        \param value New value of Flag
    */
    void operator=( const T &value )
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
    {
      this->value = value;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	701a      	strb	r2, [r3, #0]
    }
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>:
    Fifo( WORD sizeIn = 3 )
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	807b      	strh	r3, [r7, #2]
      in   = 0;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	809a      	strh	r2, [r3, #4]
      out  = 0;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	887a      	ldrh	r2, [r7, #2]
 8005b44:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	895b      	ldrh	r3, [r3, #10]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x40>
        speicher = new T[size];
<<<<<<< HEAD
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	895b      	ldrh	r3, [r3, #10]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f002 fffa 	bl	8008b4c <_Znaj>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e005      	b.n	8005b6e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x4c>
=======
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	895b      	ldrh	r3, [r3, #10]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 ff2e 	bl	80089d0 <_Znaj>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e005      	b.n	8005b8a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x4c>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
        size     = 0;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    }
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>:
    bool isFull( void )
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005b80:	f7fa fdae 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	891a      	ldrh	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	895b      	ldrh	r3, [r3, #10]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	bf2c      	ite	cs
 8005b90:	2301      	movcs	r3, #1
 8005b92:	2300      	movcc	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005b96:	f7fa fdb5 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>:
    bool operator<<( const T &ref )
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
      bool ret = false;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
      Hw::System::disableInterrupt();
 8005bb2:	f7fa fd95 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	891a      	ldrh	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	895b      	ldrh	r3, [r3, #10]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d21f      	bcs.n	8005c02 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x5e>
        speicher[in] = ref;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	8892      	ldrh	r2, [r2, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	889b      	ldrh	r3, [r3, #4]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	895b      	ldrh	r3, [r3, #10]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	429a      	cmp	r2, r3
 8005be0:	da04      	bge.n	8005bec <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x48>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	889b      	ldrh	r3, [r3, #4]
 8005be6:	3301      	adds	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	e000      	b.n	8005bee <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x4a>
 8005bec:	2200      	movs	r2, #0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	809a      	strh	r2, [r3, #4]
        anz++;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	891b      	ldrh	r3, [r3, #8]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005c02:	f7fa fd7f 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <_Z41__static_initialization_and_destruction_0ii>:
//-------------------------------------------------------------------
//
// nothing to do ...
//

}  } //namespace
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d109      	bne.n	8005c34 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d104      	bne.n	8005c34 <_Z41__static_initialization_and_destruction_0ii+0x24>
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );
 8005c2a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8005c2e:	4803      	ldr	r0, [pc, #12]	@ (8005c3c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005c30:	f7fd faa6 	bl	8003180 <_ZN9EmbSysLib3Std6ReportC1Et>
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000178 	.word	0x20000178

08005c40 <_GLOBAL__sub_I__ZN9EmbSysLib2Hw6System12cntInterruptE>:
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005c48:	2001      	movs	r0, #1
 8005c4a:	f7ff ffe1 	bl	8005c10 <_Z41__static_initialization_and_destruction_0ii>
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h>:
        //-----------------------------------------------------------
        /*! Initialize and connect the device to the bus
            \param i2c    Reference to I2C hardware (I2C bus interface)
            \param hwAddr Device's hardware address
        */
        Device( I2Cmaster &i2c,
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
                BYTE       hwAddr )
        : i2c( i2c )
 8005c5e:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h+0x34>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	605a      	str	r2, [r3, #4]
        {
          this->hwAddr = hwAddr;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	79fa      	ldrb	r2, [r7, #7]
 8005c6e:	721a      	strb	r2, [r3, #8]
          isErrorFlag  = false;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	725a      	strb	r2, [r3, #9]
        }
<<<<<<< HEAD
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	08009d2c 	.word	0x08009d2c
=======
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	08009b38 	.word	0x08009b38
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08005c88 <_ZN9EmbSysLib2Hw9I2Cmaster6Device7isErrorEv>:
            call of \a read() or \a write()
            \return
                    - true:  Error, previous transfer was aborted
                    - false: No error
        */
        virtual BYTE isError( void )
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
        {
          BYTE ret = isErrorFlag;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7a5b      	ldrb	r3, [r3, #9]
 8005c94:	73fb      	strb	r3, [r7, #15]
          isErrorFlag = false;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	725a      	strb	r2, [r3, #9]
          return( ret );
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
        }
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em>:
*/
class Ltdc_Mcu
{
  public:
    //---------------------------------------------------------------
    Ltdc_Mcu( uint32_t startAddrIn )
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
    {
      startAddr = startAddrIn;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	601a      	str	r2, [r3, #0]

      RCC->APB2ENR  |=  RCC_APB2ENR_LTDCEN;   // clock enable
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8005cf0 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cc6:	6453      	str	r3, [r2, #68]	@ 0x44
      RCC->APB2RSTR |=  RCC_APB2RSTR_LTDCRST; // reset cycle
 8005cc8:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	4a08      	ldr	r2, [pc, #32]	@ (8005cf0 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cd2:	6253      	str	r3, [r2, #36]	@ 0x24
      RCC->APB2RSTR &= ~RCC_APB2RSTR_LTDCRST;
 8005cd4:	4b06      	ldr	r3, [pc, #24]	@ (8005cf0 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	4a05      	ldr	r2, [pc, #20]	@ (8005cf0 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cde:	6253      	str	r3, [r2, #36]	@ 0x24
    }
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40023800 	.word	0x40023800

08005cf4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt>:

    //---------------------------------------------------------------
    void Init( WORD Hsize, WORD Vsize )
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
 8005d00:	4613      	mov	r3, r2
 8005d02:	803b      	strh	r3, [r7, #0]
    {
      DWORD h = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
      DWORD v = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60bb      	str	r3, [r7, #8]

      // Global control register
      LTDC->GCR = (!LTDC_GCR_HSPOL   // Horizontal Synchronization Polarity: activ low
 8005d0c:	4b23      	ldr	r3, [pc, #140]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	619a      	str	r2, [r3, #24]
                  |!LTDC_GCR_VSPOL   // Vertical Synchronization Polarity: activ low
                  |!LTDC_GCR_DEPOL   // Not Data Enable Polarity: activ low
                  |!LTDC_GCR_PCPOL );// Pixel Clock Polarity: activ low

      // Synchronization size configuration register
      h += 1; // add H-Sync
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Sync
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60bb      	str	r3, [r7, #8]
      LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	041a      	lsls	r2, r3, #16
 8005d22:	491e      	ldr	r1, [pc, #120]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Vertical Synchronization Height: 1
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4313      	orrs	r3, r2
      LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 8005d28:	608b      	str	r3, [r1, #8]

      // Back porch configuration register
      h += 1; // add H-Back porch
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Back porch
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3301      	adds	r3, #1
 8005d34:	60bb      	str	r3, [r7, #8]
      LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	041a      	lsls	r2, r3, #16
 8005d3a:	4918      	ldr	r1, [pc, #96]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Vertical back porch
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
      LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 8005d40:	60cb      	str	r3, [r1, #12]

      // Active width configuration register
      h += Hsize;
 8005d42:	887b      	ldrh	r3, [r7, #2]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
      v += Vsize;
 8005d4a:	883b      	ldrh	r3, [r7, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4413      	add	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]
      LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	041a      	lsls	r2, r3, #16
 8005d56:	4911      	ldr	r1, [pc, #68]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Active Height
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
      LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 8005d5c:	610b      	str	r3, [r1, #16]

      // Total width configuration register
      h += 1; // add H-Front porch
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Front porch
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60bb      	str	r3, [r7, #8]
      LTDC->TWCR = ((h << 16)  // Total Width
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	041a      	lsls	r2, r3, #16
 8005d6e:	490b      	ldr	r1, [pc, #44]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Total Height
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
      LTDC->TWCR = ((h << 16)  // Total Width
 8005d74:	614b      	str	r3, [r1, #20]

      // Background color configuration register
      LTDC->BCCR = ( (0x00 << 16)    // Red value
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
                   | (0x00 <<  8)    // Green value
                   | (0x00 <<  0) ); // Blue value

      // Interrupt enable register
      LTDC->IER = 0; // no interrupts
 8005d7c:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	635a      	str	r2, [r3, #52]	@ 0x34

      // Global control register
      LTDC->GCR |= LTDC_GCR_LTDCEN; // LTDC enable
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	4a05      	ldr	r2, [pc, #20]	@ (8005d9c <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	6193      	str	r3, [r2, #24]
    }
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40016800 	.word	0x40016800

08005da0 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh>:

    //---------------------------------------------------------------
    uint32_t LayerConfig( uint32_t width, uint32_t height, uint8_t layerID = 0 )
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	@ 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	70fb      	strb	r3, [r7, #3]
    {
      LTDC_Layer_TypeDef *layer = (layerID) ? LTDC_Layer2 : LTDC_Layer1;
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0x18>
 8005db4:	4b2a      	ldr	r3, [pc, #168]	@ (8005e60 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc0>)
 8005db6:	e000      	b.n	8005dba <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0x1a>
 8005db8:	4b2a      	ldr	r3, [pc, #168]	@ (8005e64 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc4>)
 8005dba:	61fb      	str	r3, [r7, #28]

      uint32_t hbp  = (LTDC->BPCR & LTDC_BPCR_AHBP) >> 16; // H-Back porch
 8005dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8005e68 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc6:	61bb      	str	r3, [r7, #24]
      uint32_t vbp  = (LTDC->BPCR & LTDC_BPCR_AVBP) >> 0;  // V-Back porch
 8005dc8:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dd0:	617b      	str	r3, [r7, #20]
      uint32_t bpp  = 2; // RGB565: 16-Bit pixel format = 2 bytes per pixel
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	613b      	str	r3, [r7, #16]

      // Layerx window horizontal position configuration register
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	4413      	add	r3, r2
 8005ddc:	041a      	lsls	r2, r3, #16
                     | ((0/*X0*/ + 1 + hbp) <<  0) ); // Window Horizontal Start Position
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	3301      	adds	r3, #1
 8005de2:	431a      	orrs	r2, r3
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	605a      	str	r2, [r3, #4]

      // Layerx window vertical position configuration register
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	041a      	lsls	r2, r3, #16
                     | ((0/*Y0*/ + 1 + vbp) <<  0) ); // Window Vertical Start Position
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3301      	adds	r3, #1
 8005df4:	431a      	orrs	r2, r3
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	609a      	str	r2, [r3, #8]

      // Layerx pixel format configuration register
      layer->PFCR = 0x02; // PixelFormat: RGB565
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	611a      	str	r2, [r3, #16]

      // Layerx default color configuration register
      layer->DCCR = ( (0x00 << 24)    // Alpha
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2200      	movs	r2, #0
 8005e04:	619a      	str	r2, [r3, #24]
                    | (0x00 << 16)    // Red
                    | (0x00 <<  8)    // Green
                    | (0x00 <<  0) ); // Blue

      // Layerx constant alpha configuration register
      layer->CACR = (0xFF); // Alpha
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	22ff      	movs	r2, #255	@ 0xff
 8005e0a:	615a      	str	r2, [r3, #20]

      // Layerx blending factors configuration register
      layer->BFCR = ( (0x06 << 8)   // Blending Factor 1:Pixel Alpha x Constant Alpha
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f240 6207 	movw	r2, #1543	@ 0x607
 8005e12:	61da      	str	r2, [r3, #28]
                    | (0x07 << 0) );// Blending Factor 2:1-(Pixel Alpha x Constant Alpha)

      // Layerx color frame buffer address register
      layer->CFBAR = startAddr;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	629a      	str	r2, [r3, #40]	@ 0x28


      // Layerx color frame buffer length register
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	fb02 f303 	mul.w	r3, r2, r3
 8005e24:	041a      	lsls	r2, r3, #16
                      | ((((width - 0/*X0*/)*bpp)+3) <<  0) );// Color Frame Buffer Line Length
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6939      	ldr	r1, [r7, #16]
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	3303      	adds	r3, #3
 8005e30:	431a      	orrs	r2, r3
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	62da      	str	r2, [r3, #44]	@ 0x2c

      // Layerx color frame buffer line number register
      layer->CFBLNR = height; // Frame Buffer Number of Lines
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30

      // Layerx control register
      layer->CR |= LTDC_LxCR_LEN; // Layer Enable
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	601a      	str	r2, [r3, #0]

      // Shadow reload configuration register
      LTDC->SRCR = LTDC_SRCR_IMR; // Immediate Reload: enable
 8005e48:	4b07      	ldr	r3, [pc, #28]	@ (8005e68 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	625a      	str	r2, [r3, #36]	@ 0x24

      return( startAddr );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
    }
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	@ 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40016904 	.word	0x40016904
 8005e64:	40016884 	.word	0x40016884
 8005e68:	40016800 	.word	0x40016800

08005e6c <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>:
  public:
    //---------------------------------------------------------------
    /*! Initialize the FSCM hardware
        \param xxx  xxx
    */
    Fmc_Mcu( FMCtype typeIn, bool bothIn = false )
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	70bb      	strb	r3, [r7, #2]
    {
      type = typeIn&0x0F;
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	701a      	strb	r2, [r3, #0]
      bank = (typeIn>>4)&0x0F;
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	705a      	strb	r2, [r3, #1]
      both = bothIn;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	78ba      	ldrb	r2, [r7, #2]
 8005e96:	709a      	strb	r2, [r3, #2]

      WORD mode =  PinConfig::FAST_SPEED
 8005e98:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8005e9c:	81fb      	strh	r3, [r7, #14]
                 | PinConfig::PUSH_PULL
                 | PinConfig::PULL_UP // ???
                 | PinConfig::NO_PUPD;

      PinConfig::set(PinConfig::FMC_D0,mode);
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	208f      	movs	r0, #143	@ 0x8f
 8005ea4:	f7fa fe8e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D1,mode);
 8005ea8:	89fb      	ldrh	r3, [r7, #14]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	2090      	movs	r0, #144	@ 0x90
 8005eae:	f7fa fe89 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D2,mode);
 8005eb2:	89fb      	ldrh	r3, [r7, #14]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	209b      	movs	r0, #155	@ 0x9b
 8005eb8:	f7fa fe84 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D3,mode);
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	20a6      	movs	r0, #166	@ 0xa6
 8005ec2:	f7fa fe7f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D4,mode);
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	20a9      	movs	r0, #169	@ 0xa9
 8005ecc:	f7fa fe7a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D5,mode);
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	20aa      	movs	r0, #170	@ 0xaa
 8005ed6:	f7fa fe75 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D6,mode);
 8005eda:	89fb      	ldrh	r3, [r7, #14]
 8005edc:	4619      	mov	r1, r3
 8005ede:	20ab      	movs	r0, #171	@ 0xab
 8005ee0:	f7fa fe70 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D7,mode);
 8005ee4:	89fb      	ldrh	r3, [r7, #14]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	20ac      	movs	r0, #172	@ 0xac
 8005eea:	f7fa fe6b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D8,mode);
 8005eee:	89fb      	ldrh	r3, [r7, #14]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	20ad      	movs	r0, #173	@ 0xad
 8005ef4:	f7fa fe66 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D9,mode);
 8005ef8:	89fb      	ldrh	r3, [r7, #14]
 8005efa:	4619      	mov	r1, r3
 8005efc:	20ae      	movs	r0, #174	@ 0xae
 8005efe:	f7fa fe61 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D10,mode);
 8005f02:	89fb      	ldrh	r3, [r7, #14]
 8005f04:	4619      	mov	r1, r3
 8005f06:	2091      	movs	r0, #145	@ 0x91
 8005f08:	f7fa fe5c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D11,mode);
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	2092      	movs	r0, #146	@ 0x92
 8005f12:	f7fa fe57 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D12,mode);
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	2093      	movs	r0, #147	@ 0x93
 8005f1c:	f7fa fe52 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D13,mode);
 8005f20:	89fb      	ldrh	r3, [r7, #14]
 8005f22:	4619      	mov	r1, r3
 8005f24:	2094      	movs	r0, #148	@ 0x94
 8005f26:	f7fa fe4d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D14,mode);
 8005f2a:	89fb      	ldrh	r3, [r7, #14]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	2095      	movs	r0, #149	@ 0x95
 8005f30:	f7fa fe48 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D15,mode);
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	4619      	mov	r1, r3
 8005f38:	2096      	movs	r0, #150	@ 0x96
 8005f3a:	f7fa fe43 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D16,mode);
 8005f3e:	89fb      	ldrh	r3, [r7, #14]
 8005f40:	4619      	mov	r1, r3
 8005f42:	2097      	movs	r0, #151	@ 0x97
 8005f44:	f7fa fe3e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D17,mode);
 8005f48:	89fb      	ldrh	r3, [r7, #14]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	2098      	movs	r0, #152	@ 0x98
 8005f4e:	f7fa fe39 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D18,mode);
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	4619      	mov	r1, r3
 8005f56:	2099      	movs	r0, #153	@ 0x99
 8005f58:	f7fa fe34 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D19,mode);
 8005f5c:	89fb      	ldrh	r3, [r7, #14]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	209a      	movs	r0, #154	@ 0x9a
 8005f62:	f7fa fe2f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D20,mode);
 8005f66:	89fb      	ldrh	r3, [r7, #14]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	209c      	movs	r0, #156	@ 0x9c
 8005f6c:	f7fa fe2a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D21,mode);
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	4619      	mov	r1, r3
 8005f74:	209d      	movs	r0, #157	@ 0x9d
 8005f76:	f7fa fe25 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D22,mode);
 8005f7a:	89fb      	ldrh	r3, [r7, #14]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	209e      	movs	r0, #158	@ 0x9e
 8005f80:	f7fa fe20 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D23,mode);
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	4619      	mov	r1, r3
 8005f88:	209f      	movs	r0, #159	@ 0x9f
 8005f8a:	f7fa fe1b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D24,mode);
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	4619      	mov	r1, r3
 8005f92:	20a0      	movs	r0, #160	@ 0xa0
 8005f94:	f7fa fe16 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D25,mode);
 8005f98:	89fb      	ldrh	r3, [r7, #14]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	20a1      	movs	r0, #161	@ 0xa1
 8005f9e:	f7fa fe11 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D26,mode);
 8005fa2:	89fb      	ldrh	r3, [r7, #14]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	20a2      	movs	r0, #162	@ 0xa2
 8005fa8:	f7fa fe0c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D27,mode);
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	20a3      	movs	r0, #163	@ 0xa3
 8005fb2:	f7fa fe07 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D28,mode);
 8005fb6:	89fb      	ldrh	r3, [r7, #14]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	20a4      	movs	r0, #164	@ 0xa4
 8005fbc:	f7fa fe02 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D29,mode);
 8005fc0:	89fb      	ldrh	r3, [r7, #14]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	20a5      	movs	r0, #165	@ 0xa5
 8005fc6:	f7fa fdfd 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D30,mode);
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	20a7      	movs	r0, #167	@ 0xa7
 8005fd0:	f7fa fdf8 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D31,mode);
 8005fd4:	89fb      	ldrh	r3, [r7, #14]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	20a8      	movs	r0, #168	@ 0xa8
 8005fda:	f7fa fdf3 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_NBL0,mode);
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	20c0      	movs	r0, #192	@ 0xc0
 8005fe4:	f7fa fdee 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL1,mode);
 8005fe8:	89fb      	ldrh	r3, [r7, #14]
 8005fea:	4619      	mov	r1, r3
 8005fec:	20c1      	movs	r0, #193	@ 0xc1
 8005fee:	f7fa fde9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_A0,mode);
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	2070      	movs	r0, #112	@ 0x70
 8005ff8:	f7fa fde4 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A1,mode);
 8005ffc:	89fb      	ldrh	r3, [r7, #14]
 8005ffe:	4619      	mov	r1, r3
 8006000:	2071      	movs	r0, #113	@ 0x71
 8006002:	f7fa fddf 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A2,mode);
 8006006:	89fb      	ldrh	r3, [r7, #14]
 8006008:	4619      	mov	r1, r3
 800600a:	207c      	movs	r0, #124	@ 0x7c
 800600c:	f7fa fdda 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A3,mode);
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	4619      	mov	r1, r3
 8006014:	2083      	movs	r0, #131	@ 0x83
 8006016:	f7fa fdd5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A4,mode);
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	4619      	mov	r1, r3
 800601e:	2084      	movs	r0, #132	@ 0x84
 8006020:	f7fa fdd0 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A5,mode);
 8006024:	89fb      	ldrh	r3, [r7, #14]
 8006026:	4619      	mov	r1, r3
 8006028:	2085      	movs	r0, #133	@ 0x85
 800602a:	f7fa fdcb 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A6,mode);
 800602e:	89fb      	ldrh	r3, [r7, #14]
 8006030:	4619      	mov	r1, r3
 8006032:	2086      	movs	r0, #134	@ 0x86
 8006034:	f7fa fdc6 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A7,mode);
 8006038:	89fb      	ldrh	r3, [r7, #14]
 800603a:	4619      	mov	r1, r3
 800603c:	2087      	movs	r0, #135	@ 0x87
 800603e:	f7fa fdc1 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A8,mode);
 8006042:	89fb      	ldrh	r3, [r7, #14]
 8006044:	4619      	mov	r1, r3
 8006046:	2088      	movs	r0, #136	@ 0x88
 8006048:	f7fa fdbc 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A9,mode);
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	4619      	mov	r1, r3
 8006050:	2089      	movs	r0, #137	@ 0x89
 8006052:	f7fa fdb7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A10,mode);
 8006056:	89fb      	ldrh	r3, [r7, #14]
 8006058:	4619      	mov	r1, r3
 800605a:	2072      	movs	r0, #114	@ 0x72
 800605c:	f7fa fdb2 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A11,mode);
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	4619      	mov	r1, r3
 8006064:	2073      	movs	r0, #115	@ 0x73
 8006066:	f7fa fdad 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A12,mode);
 800606a:	89fb      	ldrh	r3, [r7, #14]
 800606c:	4619      	mov	r1, r3
 800606e:	2074      	movs	r0, #116	@ 0x74
 8006070:	f7fa fda8 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A13,mode);
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	4619      	mov	r1, r3
 8006078:	2075      	movs	r0, #117	@ 0x75
 800607a:	f7fa fda3 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A14,mode);
 800607e:	89fb      	ldrh	r3, [r7, #14]
 8006080:	4619      	mov	r1, r3
 8006082:	2076      	movs	r0, #118	@ 0x76
 8006084:	f7fa fd9e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A15,mode);
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	4619      	mov	r1, r3
 800608c:	2077      	movs	r0, #119	@ 0x77
 800608e:	f7fa fd99 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDCLK,mode);
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	4619      	mov	r1, r3
 8006096:	20cf      	movs	r0, #207	@ 0xcf
 8006098:	f7fa fd94 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNCAS,mode);
 800609c:	89fb      	ldrh	r3, [r7, #14]
 800609e:	4619      	mov	r1, r3
 80060a0:	20d0      	movs	r0, #208	@ 0xd0
 80060a2:	f7fa fd8f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDNRAS,mode);
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	4619      	mov	r1, r3
 80060aa:	20d3      	movs	r0, #211	@ 0xd3
 80060ac:	f7fa fd8a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDCKE0,mode);
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	4619      	mov	r1, r3
 80060b4:	20cd      	movs	r0, #205	@ 0xcd
 80060b6:	f7fa fd85 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNE0,mode);
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	4619      	mov	r1, r3
 80060be:	20d1      	movs	r0, #209	@ 0xd1
 80060c0:	f7fa fd80 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNWE,mode);
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	4619      	mov	r1, r3
 80060c8:	20d4      	movs	r0, #212	@ 0xd4
 80060ca:	f7fa fd7b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL2,mode);
 80060ce:	89fb      	ldrh	r3, [r7, #14]
 80060d0:	4619      	mov	r1, r3
 80060d2:	20c2      	movs	r0, #194	@ 0xc2
 80060d4:	f7fa fd76 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL3,mode);
 80060d8:	89fb      	ldrh	r3, [r7, #14]
 80060da:	4619      	mov	r1, r3
 80060dc:	20c3      	movs	r0, #195	@ 0xc3
 80060de:	f7fa fd71 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      /* Enable FMC clock */
      RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 80060e2:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x29c>)
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	4a08      	ldr	r2, [pc, #32]	@ (8006108 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x29c>)
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	6393      	str	r3, [r2, #56]	@ 0x38

      if( type == SDRAM )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d102      	bne.n	80060fc <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x290>
      {
        SDRAM_Init( );
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f81c 	bl	8006134 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv>
      }
    }
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40023800 	.word	0x40023800

0800610c <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>:
    
    //---------------------------------------------------------------
    uint32_t startAddr( void )
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    {
      if( bank == 0 )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv+0x16>
        return( 0xC0000000 );
 800611c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8006120:	e001      	b.n	8006126 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv+0x1a>
      else
        return( 0xD0000000 );
 8006122:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
    }
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv>:
    
  private:
    //---------------------------------------------------------------
    void SDRAM_Init(  )
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    {
      uint32_t reg  = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
      // Step 1 and 2
      // Common initialization,
      // see Reference Manual, DocID028270-Rev 3, page 388
      //--------------------------------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[0/*BANK1*/];
 8006140:	4b37      	ldr	r3, [pc, #220]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_SDCLK
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800614c:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_RBURST
              | FMC_SDCR1_RPIPE );
      reg |=  (  (2<<10)          // Clock configuration: 2xHCLK periods
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8006154:	60fb      	str	r3, [r7, #12]
              |  FMC_SDCR1_RBURST // Burst read:enable
              |  (0<<13) );       // Read pipe: No HCLK clock cycle delay
      FMC_Bank5_6->SDCR[0/*BANK1*/] = reg;
 8006156:	4a32      	ldr	r2, [pc, #200]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6013      	str	r3, [r2, #0]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[0/*BANK1*/];
 800615c:	4b30      	ldr	r3, [pc, #192]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TRC
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4b2f      	ldr	r3, [pc, #188]	@ (8006224 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf0>)
 8006166:	4013      	ands	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TRP );
      reg |=  ( ((7 - 1) << 12)    // Row cycle delay: 7 cycles
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f443 1383 	orr.w	r3, r3, #1073152	@ 0x106000
 8006170:	60fb      	str	r3, [r7, #12]
              | ((2 - 1) << 20) ); // Row precharge delay: 2 cycles
      FMC_Bank5_6->SDTR[0/*BANK1*/] = reg;
 8006172:	4a2b      	ldr	r2, [pc, #172]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6093      	str	r3, [r2, #8]

      // Bank specific initialization
      //-----------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[bank];
 8006178:	4a29      	ldr	r2, [pc, #164]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006182:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_NC
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4b28      	ldr	r3, [pc, #160]	@ (8006228 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf4>)
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_NR
              | FMC_SDCR1_MWID
              | FMC_SDCR1_NB
              | FMC_SDCR1_CAS
              | FMC_SDCR1_WP );
      reg |=  ( (0 <<  0)       // Number of column address bits:8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f443 73f2 	orr.w	r3, r3, #484	@ 0x1e4
 8006192:	60fb      	str	r3, [r7, #12]
              | (1 <<  2)       // Number of row address bits:12
              | (2 <<  4)       // Memory data bus width:32 bits
              | (1 <<  6)       // Number of internal banks:4
              | (3 <<  7)       // CAS Latency:3 (must be same as in Load Mode Register)
              |!FMC_SDCR1_WP ); // Write protection: disable
      FMC_Bank5_6->SDCR[bank] = reg;
 8006194:	4a22      	ldr	r2, [pc, #136]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	4619      	mov	r1, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[bank];
 80061a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	3302      	adds	r3, #2
 80061aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ae:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TMRD
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b1e      	ldr	r3, [pc, #120]	@ (800622c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf8>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TXSR
              | FMC_SDTR1_TRAS
              | FMC_SDTR1_TWR
              | FMC_SDTR1_TRCD );
      reg |=  ( ((2 - 1) <<  0)   // Load Mode Register to Active: 2 cycles
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006230 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xfc>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
              | ((7 - 1) <<  4)   // Exit Self-refresh delay: 7 cycles
              | ((4 - 1) <<  8)   // Self refresh time: 4 cycles
              | ((2 - 1) << 16)   // Recovery delay: 2 cycles
              | ((2 - 1) << 24)); // Row to column delay: 2 cycles
      FMC_Bank5_6->SDTR[bank] = reg;
 80061c0:	4917      	ldr	r1, [pc, #92]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	3302      	adds	r3, #2
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      // Device specific initialization
      //-------------------------------

      // Step 3: Configure a clock configuration enable command
      SendCommand( 0x01/*Clock Configuration Enable*/, 1, 0 );
 80061ce:	2300      	movs	r3, #0
 80061d0:	2201      	movs	r2, #1
 80061d2:	2101      	movs	r1, #1
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f82d 	bl	8006234 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 4: Insert 100 us minimum delay
      System::delayMilliSec(1);
 80061da:	2001      	movs	r0, #1
 80061dc:	f7fa fae4 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

      // Step 5: Configure a PALL (precharge all) command
      SendCommand( 0x02/*PALL Command*/, 1, 0 );
 80061e0:	2300      	movs	r3, #0
 80061e2:	2201      	movs	r2, #1
 80061e4:	2102      	movs	r1, #2
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f824 	bl	8006234 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 6: Configure an Auto Refresh command
      SendCommand( 0x03/*Auto Refresh Command*/, 8, 0 );
 80061ec:	2300      	movs	r3, #0
 80061ee:	2208      	movs	r2, #8
 80061f0:	2103      	movs	r1, #3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f81e 	bl	8006234 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 7: Program the external memory mode register
      // see: Micron SDR SDRAM "MT48LC4M32B2", Datasheet
      reg = ( (0<<0)   // Burst length: 1
 80061f8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80061fc:	60fb      	str	r3, [r7, #12]
            | (0<<3)   // Burst type:sequential
            | (3<<4)   // CAS Latency:3 (must be same as in SDCR)
            | (0<<7)   // Operating Mode: standard
            | (1<<9) );// Write Burst Mode: single
      SendCommand(0x04/*Load Mode Register*/, 1, reg);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	2104      	movs	r1, #4
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f815 	bl	8006234 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>
      //      Refresh count:  4k = 4096
      //
      // here:fclkSD = 100 MHz
      //      COUNT = RefreshPeriod/RefreshCount*fclkSD + 20
      //            = 64E-3/4096*100E6 +20 = 1583
      FMC_Bank5_6->SDRTR |= (1583 << 1);
 800620a:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	4904      	ldr	r1, [pc, #16]	@ (8006220 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006210:	f640 435e 	movw	r3, #3166	@ 0xc5e
 8006214:	4313      	orrs	r3, r2
 8006216:	614b      	str	r3, [r1, #20]
    }
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	a0000140 	.word	0xa0000140
 8006224:	ff0f0fff 	.word	0xff0f0fff
 8006228:	fffffc00 	.word	0xfffffc00
 800622c:	f0f0f000 	.word	0xf0f0f000
 8006230:	01010361 	.word	0x01010361

08006234 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>:

  private:
    //---------------------------------------------------------------
    void SendCommand( uint32_t Command,       //!< Command issued to the SDRAM device
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]

      // see: Reference Manual, DocID028270-Rev 3, page 402:
      //      "If two SDRAM banks are used, the Auto-refresh and
      //       PALL command must be issued simultaneously to the two devices
      //       with CTB1 and CTB2 bits set"
      if( both && (   Command == 0x02    // PALL Command
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	789b      	ldrb	r3, [r3, #2]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x28>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d002      	beq.n	8006256 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x22>
                   || Command == 0x03 )) // Auto Refresh Mode
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d102      	bne.n	800625c <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x28>
        ctb = 3; // use CTB1 and CTB2 simultanously
 8006256:	2303      	movs	r3, #3
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e008      	b.n	800626e <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x3a>
      else if( bank == 0)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x36>
        ctb = 1<<1; // CTB1
 8006264:	2302      	movs	r3, #2
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e001      	b.n	800626e <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x3a>
      else
        ctb = 1<<0; // CTB2
 800626a:	2301      	movs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]

      FMC_Bank5_6->SDCMR = ( (Command         << 0)
                           | (ctb             << 3)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	00da      	lsls	r2, r3, #3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	431a      	orrs	r2, r3
                           | ((AutoRefresh-1) << 5)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3b01      	subs	r3, #1
 800627a:	015b      	lsls	r3, r3, #5
 800627c:	431a      	orrs	r2, r3
                           | (ModeRegister    << 9) );
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	025b      	lsls	r3, r3, #9
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 8006282:	490b      	ldr	r1, [pc, #44]	@ (80062b0 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x7c>)
                           | (ModeRegister    << 9) );
 8006284:	4313      	orrs	r3, r2
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 8006286:	610b      	str	r3, [r1, #16]
      // TODO: timeout
      while( FMC_Bank5_6->SDSR & FMC_SDSR_BUSY ); // wait until command is send
 8006288:	bf00      	nop
 800628a:	4b09      	ldr	r3, [pc, #36]	@ (80062b0 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x7c>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f4      	bne.n	800628a <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x56>
    }
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	a0000140 	.word	0xa0000140

080062b4 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>:
*/
class Dsi_Mcu
{
  public:
    //---------------------------------------------------------------
    Dsi_Mcu( uint32_t startAddr )
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]

    : hwLTDC( startAddr )
 80062be:	4a10      	ldr	r2, [pc, #64]	@ (8006300 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x4c>)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fcee 	bl	8005cac <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em>

    {
      // Enable clock and reset-cycle
      RCC->APB2ENR  |=  RCC_APB2ENR_DSIEN;
 80062d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d4:	4a0b      	ldr	r2, [pc, #44]	@ (8006304 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062da:	6453      	str	r3, [r2, #68]	@ 0x44
      RCC->APB2RSTR |=  RCC_APB2RSTR_DSIRST;
 80062dc:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	4a08      	ldr	r2, [pc, #32]	@ (8006304 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062e6:	6253      	str	r3, [r2, #36]	@ 0x24
      RCC->APB2RSTR &= ~RCC_APB2RSTR_DSIRST;
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	4a05      	ldr	r2, [pc, #20]	@ (8006304 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062ee:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80062f2:	6253      	str	r3, [r2, #36]	@ 0x24
    }
<<<<<<< HEAD
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	08009d1c 	.word	0x08009d1c
 8006304:	40023800 	.word	0x40023800
=======
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	08009b28 	.word	0x08009b28
 8006320:	40023800 	.word	0x40023800
 8006324:	00000000 	.word	0x00000000
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08006308 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb>:

    //-----------------------------------------------------------------
    void Init( WORD Hsize, WORD Vsize, bool useLTDC )
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	@ 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	461a      	mov	r2, r3
 8006316:	4603      	mov	r3, r0
 8006318:	817b      	strh	r3, [r7, #10]
 800631a:	460b      	mov	r3, r1
 800631c:	813b      	strh	r3, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]
    {
      DSI->WCR   &= ~DSI_WCR_DSIEN;   // Wrapper disable
 8006322:	4b6d      	ldr	r3, [pc, #436]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006324:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006328:	4a6b      	ldr	r2, [pc, #428]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800632a:	f023 0308 	bic.w	r3, r3, #8
 800632e:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
      DSI->CR    &= ~DSI_CR_EN;       // DSI disable
 8006332:	4b69      	ldr	r3, [pc, #420]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4a68      	ldr	r2, [pc, #416]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	6053      	str	r3, [r2, #4]
      DSI->PCTLR &= ~DSI_PCTLR_CKE;   // D-PHY clock disable
 800633e:	4b66      	ldr	r3, [pc, #408]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006344:	4a64      	ldr	r2, [pc, #400]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006346:	f023 0304 	bic.w	r3, r3, #4
 800634a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      DSI->PCTLR &= ~DSI_PCTLR_DEN;   // Digital disable
 800634e:	4b62      	ldr	r3, [pc, #392]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006354:	4a60      	ldr	r2, [pc, #384]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006356:	f023 0302 	bic.w	r3, r3, #2
 800635a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      DSI->WRPCR &= ~DSI_WRPCR_PLLEN; // PLL disable
 800635e:	4b5e      	ldr	r3, [pc, #376]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006360:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006364:	4a5c      	ldr	r2, [pc, #368]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
      DSI->WRPCR &= ~DSI_WRPCR_REGEN; // Regulator disable
 800636e:	4b5a      	ldr	r3, [pc, #360]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006370:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006374:	4a58      	ldr	r2, [pc, #352]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800637a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430

      // Turn on the regulator and enable the DSI PLL
      //---------------------------------------------
      DSI->WRPCR |= DSI_WRPCR_REGEN; // Regulator Enable
 800637e:	4b56      	ldr	r3, [pc, #344]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006380:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006384:	4a54      	ldr	r2, [pc, #336]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800638a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430

      // TODO: timeout
      while( !(DSI->WISR & DSI_WISR_RRS) ) // Wait until the regulator is ready
 800638e:	bf00      	nop
 8006390:	4b51      	ldr	r3, [pc, #324]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006392:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f3      	bne.n	8006390 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x88>
      // INFIN = CLKIN/IDF = 4,...,25MHz
      // Fvco = 500MHz - 1 GHz
      // ODF 2^0=1, 2^1=2, 2^2=4, 2^3=8
      // PHI 31,25 to 500MHz

      const DWORD pll_ODF  = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
      const DWORD pll_IDF  = 2;
 80063ac:	2302      	movs	r3, #2
 80063ae:	623b      	str	r3, [r7, #32]
      const DWORD pll_NDIV = RANGE( (DWORD)250000*pll_IDF/System_GetDSIclock(), (DWORD)10, (DWORD)125 );
<<<<<<< HEAD
 80063b0:	f7fa fb72 	bl	8000a98 <_Z18System_GetDSIclockv>
 80063b4:	4603      	mov	r3, r0
 80063b6:	4a49      	ldr	r2, [pc, #292]	@ (80064dc <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d4>)
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	227d      	movs	r2, #125	@ 0x7d
 80063be:	210a      	movs	r1, #10
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 f989 	bl	80086d8 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>
 80063c6:	61f8      	str	r0, [r7, #28]
=======
 80063d0:	f7fa fb62 	bl	8000a98 <_Z18System_GetDSIclockv>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4a49      	ldr	r2, [pc, #292]	; (80064fc <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d4>)
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	227d      	movs	r2, #125	; 0x7d
 80063de:	210a      	movs	r1, #10
 80063e0:	4618      	mov	r0, r3
 80063e2:	f002 f8bb 	bl	800855c <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>
 80063e6:	61f8      	str	r0, [r7, #28]
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
      const double F_PHI   = 500E6; /*Hz*/
 80063c8:	a341      	add	r3, pc, #260	@ (adr r3, 80064d0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1c8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

      DSI->WRPCR &= ~( DSI_WRPCR_PLL_NDIV
 80063d2:	4b41      	ldr	r3, [pc, #260]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063d4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80063d8:	493f      	ldr	r1, [pc, #252]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063da:	4b41      	ldr	r3, [pc, #260]	@ (80064e0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d8>)
 80063dc:	4013      	ands	r3, r2
 80063de:	f8c1 3430 	str.w	r3, [r1, #1072]	@ 0x430
                     | DSI_WRPCR_PLL_IDF
                     | DSI_WRPCR_PLL_ODF );
      DSI->WRPCR |=  ( (pll_NDIV <<  2)   // PLL N-Div
 80063e2:	4b3d      	ldr	r3, [pc, #244]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063e4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4313      	orrs	r3, r2
 80063ee:	4a3a      	ldr	r2, [pc, #232]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063f4:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                     | (pll_IDF  << 11)   // PLL IDF
                     | (pll_ODF  << 16)); // PLL ODF

      DSI->WRPCR |= DSI_WRPCR_PLLEN; // PLL Enable
 80063f8:	4b37      	ldr	r3, [pc, #220]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063fa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80063fe:	4a36      	ldr	r2, [pc, #216]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430

      // TODO: timeout
      while( !(DSI->WISR & DSI_WISR_PLLLS) ); // Wait for the lock of the PLL
 8006408:	bf00      	nop
 800640a:	4b33      	ldr	r3, [pc, #204]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800640c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f3      	bne.n	800640a <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x102>

      // Set Host PHY
      //-------------
      // D-PHY clock and digital lane
      DSI->PCTLR  = ( DSI_PCTLR_CKE    // Clock Enable
 8006422:	4b2d      	ldr	r3, [pc, #180]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006424:	2206      	movs	r2, #6
 8006426:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                    | DSI_PCTLR_DEN ); // Digital Enable

      // Clock Lane Configuration
      DSI->CLCR  =  ( DSI_CLCR_DPCC    // D-PHY Clock Control: High-Speed mode
 800642a:	4b2b      	ldr	r3, [pc, #172]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800642c:	2201      	movs	r2, #1
 800642e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                    |!DSI_CLCR_ACR );  // Automatic Clock lane Control: disabled

      // Host PHY Configuration Register
      DSI->PCONFR  =  ( (10 <<8 )      // Stop Wait Time: 10
 8006432:	4b29      	ldr	r3, [pc, #164]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006434:	f640 2201 	movw	r2, #2561	@ 0xa01
 8006438:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                      | 0x01 );        // Number of Lanes: 2

      // Set Clock configuration
      //------------------------
      // Clock Control register
      DSI->CCR  =  ( (0 << 8)          // Timeout Clock Division
 800643c:	4b26      	ldr	r3, [pc, #152]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800643e:	2204      	movs	r2, #4
 8006440:	609a      	str	r2, [r3, #8]
                   | (4 << 0) );       // TX Escape Clock Division

      //  Wrapper PHY Configuration Register 0
      DSI->WPCR[0] = (WORD)(1.0/(0.25E-9*F_PHI)); // Unit Interval multiplied by 4
 8006442:	4b25      	ldr	r3, [pc, #148]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006444:	2208      	movs	r2, #8
 8006446:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

       // Disable all error interrupts
      DSI->IER[0] = 0;
 800644a:	4b23      	ldr	r3, [pc, #140]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800644c:	2200      	movs	r2, #0
 800644e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
      DSI->IER[1] = 0;
 8006452:	4b21      	ldr	r3, [pc, #132]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006454:	2200      	movs	r2, #0
 8006456:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

      // Host mode Configuration Register
      DSI->MCR = DSI_MCR_CMDM; // Command mode: Command
 800645a:	4b1f      	ldr	r3, [pc, #124]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800645c:	2201      	movs	r2, #1
 800645e:	635a      	str	r2, [r3, #52]	@ 0x34

      //  Wrapper     Configuration Register
      DSI->WCFGR  = ( DSI_WCFGR_DSIM    // Video transmission mode: Adapted Command mode
 8006460:	4b1d      	ldr	r3, [pc, #116]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006462:	220b      	movs	r2, #11
 8006464:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
                    | !DSI_WCFGR_AR     // Automatic Refresh: disable
                    | !DSI_WCFGR_VSPOL  // VSync Polarity: fallig edge
                    | (0x05<<1) );      // Color multiplexing used by DSI Host: 24 bit

      // Host LTDC VCID Register
      DSI->LVCIDR = 0;                // Virtual Channel ID
 8006468:	4b1b      	ldr	r3, [pc, #108]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800646a:	2200      	movs	r2, #0
 800646c:	60da      	str	r2, [r3, #12]

      //  Host LTDC Polarity Configuration Register
      DSI->LPCR  =  (!DSI_LPCR_DEP    // Data Enable Polarity: active high
 800646e:	4b1a      	ldr	r3, [pc, #104]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006470:	2200      	movs	r2, #0
 8006472:	615a      	str	r2, [r3, #20]
                    |!DSI_LPCR_VSP    // VSYNC Polarity: shutdown pin active high
                    |!DSI_LPCR_HSP ); // HSYNC Polarity: HSYNC pin active high

      // Host LTDC Color Coding Register
      DSI->LCOLCR = ( !DSI_LCOLCR_LPE  // Loosely Packet Enable: disable
 8006474:	4b18      	ldr	r3, [pc, #96]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006476:	2205      	movs	r2, #5
 8006478:	611a      	str	r2, [r3, #16]
                    | 0x05           );// Color Coding: 24 bit

      // Host LTDC Command Configuration Register
      DSI->LCCR = Hsize; // Command Size, max size for LTDC write memory command (pixel)
 800647a:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800647c:	897b      	ldrh	r3, [r7, #10]
 800647e:	6653      	str	r3, [r2, #100]	@ 0x64

      // Host Command mode Configuration Register,
      // select High-speed or Low-power mode:
      // Enable Low-power command
      DSI->CMCR = ( DSI_CMCR_GSW0TX
 8006480:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006482:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1dc>)
 8006484:	669a      	str	r2, [r3, #104]	@ 0x68
                  | DSI_CMCR_DSR0TX
                  | DSI_CMCR_DLWTX
                  | 0   // Maximum Read Packet Size: High-speed
                  | 0); // Acknowledge Request Enable: disable

      if( useLTDC )
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d006      	beq.n	800649a <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x192>
      {
        hwLTDC.Init( Hsize, Vsize );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3304      	adds	r3, #4
 8006490:	893a      	ldrh	r2, [r7, #8]
 8006492:	8979      	ldrh	r1, [r7, #10]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fc2d 	bl	8005cf4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt>
      }

      // DSI and wrapper enable
      DSI->CR  |= DSI_CR_EN;
 800649a:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4a0e      	ldr	r2, [pc, #56]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	6053      	str	r3, [r2, #4]
      DSI->WCR |= DSI_WCR_DSIEN;
 80064a6:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80064ac:	4a0a      	ldr	r2, [pc, #40]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064ae:	f043 0308 	orr.w	r3, r3, #8
 80064b2:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
      // Host Clock Lane Timer Configuration Register
      //
      // see: https://www.keil.com/boards2/stmicroelectronics/stm32f746g_discovery, Keil.STM32F7xx_DFP.2.9.0.pack
      //      "But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.
      //        Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME."
      DSI->CLTCR = ( (35 <<  0)    // Low-Power to High-Speed Time
 80064b6:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064b8:	f04f 1223 	mov.w	r2, #2293795	@ 0x230023
 80064bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                    | (35 << 16) ); // High-Speed to Low-Power Time

      //  Host Data Lane Timer Configuration Register
      DSI->DLTCR = ( ( 0 <<  0 )   // Maximum Read Time
 80064c0:	4b05      	ldr	r3, [pc, #20]	@ (80064d8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064c2:	4a09      	ldr	r2, [pc, #36]	@ (80064e8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1e0>)
 80064c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                   | (35 << 16 )   // Low-Power To High-Speed Time
                   | (35 << 24 ) );// High-Speed To Low-Power Time

    } // end of init()
 80064c8:	bf00      	nop
 80064ca:	3728      	adds	r7, #40	@ 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	00000000 	.word	0x00000000
 80064d4:	41bdcd65 	.word	0x41bdcd65
 80064d8:	40016c00 	.word	0x40016c00
 80064dc:	0007a120 	.word	0x0007a120
 80064e0:	fffc8603 	.word	0xfffc8603
 80064e4:	000e7f00 	.word	0x000e7f00
 80064e8:	23230000 	.word	0x23230000

080064ec <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt>:

    //---------------------------------------------------------------
    uint32_t startLTDC( WORD Hsize, WORD Vsize )
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
 80064f8:	4613      	mov	r3, r2
 80064fa:	803b      	strh	r3, [r7, #0]
    {
      // Host Command mode Configuration Register,
      // select High-speed or Low-power mode
      // Disable Low-power command
      DSI->CMCR = (!DSI_CMCR_GSW0TX
 80064fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006528 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt+0x3c>)
 80064fe:	2200      	movs	r2, #0
 8006500:	669a      	str	r2, [r3, #104]	@ 0x68
                  |!DSI_CMCR_DLWTX
                  | 0   // Maximum Read Packet Size: High-speed
                  | 0); // Acknowledge Request Enable: disable

      // Host Protocol Configuration Register
      DSI->PCR =  (!DSI_PCR_CRCRXE
 8006502:	4b09      	ldr	r3, [pc, #36]	@ (8006528 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt+0x3c>)
 8006504:	2204      	movs	r2, #4
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c
                  |!DSI_PCR_ECCRXE
                  | DSI_PCR_BTAE
                  |!DSI_PCR_ETRXE
                  |!DSI_PCR_ETTXE );

      DisplayRefresh();
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f881 	bl	8006610 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>

      return( hwLTDC.LayerConfig(Hsize, Vsize) );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1d18      	adds	r0, r3, #4
 8006512:	8879      	ldrh	r1, [r7, #2]
 8006514:	883a      	ldrh	r2, [r7, #0]
 8006516:	2300      	movs	r3, #0
 8006518:	f7ff fc42 	bl	8005da0 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh>
 800651c:	4603      	mov	r3, r0
    }
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40016c00 	.word	0x40016c00

0800652c <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh>:

    //---------------------------------------------------------------
    virtual void writeShort( uint8_t para0, uint8_t para1 )
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
 8006538:	4613      	mov	r3, r2
 800653a:	70bb      	strb	r3, [r7, #2]
    {
      // TODO: timeout
      while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 800653c:	bf00      	nop
 800653e:	4b0d      	ldr	r3, [pc, #52]	@ (8006574 <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x48>)
 8006540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f4      	bne.n	800653e <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x12>

      // Host Generic Header Configuration Register
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
                  | (              0 <<  6)   // channel ID
                  | ((uint32_t)para0 <<  8)   // data
                  | ((uint32_t)para1 << 16) );// data
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	78bb      	ldrb	r3, [r7, #2]
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	4313      	orrs	r3, r2
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
 800655e:	4a05      	ldr	r2, [pc, #20]	@ (8006574 <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x48>)
                  | ((uint32_t)para1 << 16) );// data
 8006560:	f043 0315 	orr.w	r3, r3, #21
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
 8006564:	66d3      	str	r3, [r2, #108]	@ 0x6c
    }
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40016c00 	.word	0x40016c00

08006578 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm>:

    //---------------------------------------------------------------
    virtual void writeLong( uint8_t*para, uint32_t N )
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
    {
      uint32_t n = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]

      // TODO: timeout
      while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 8006588:	bf00      	nop
 800658a:	4b1f      	ldr	r3, [pc, #124]	@ (8006608 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
 800658c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f4      	bne.n	800658a <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x12>

      // TODO: Fehler,wenn N nicht durch 4 teilbar !!! Scheint aber nichts auszumachen ....

      // Set the DCS code hexadecimal on payload byte 1, and the other parameters on the write FIFO command
      while(n < N)
 80065a0:	e01f      	b.n	80065e2 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x6a>
      {
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
                    | ((uint32_t)(*(para + n+1)) <<  8)
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3301      	adds	r3, #1
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	4413      	add	r3, r2
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	ea41 0203 	orr.w	r2, r1, r3
                    | ((uint32_t)(*(para + n+2)) << 16)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3302      	adds	r3, #2
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	440b      	add	r3, r1
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	431a      	orrs	r2, r3
                    | ((uint32_t)(*(para + n+3)) << 24) );
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	3303      	adds	r3, #3
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	440b      	add	r3, r1
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	061b      	lsls	r3, r3, #24
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80065d6:	490c      	ldr	r1, [pc, #48]	@ (8006608 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
                    | ((uint32_t)(*(para + n+3)) << 24) );
 80065d8:	4313      	orrs	r3, r2
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80065da:	670b      	str	r3, [r1, #112]	@ 0x70
        n += 4;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3304      	adds	r3, #4
 80065e0:	617b      	str	r3, [r7, #20]
      while(n < N)
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d3db      	bcc.n	80065a2 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x2a>
      }

      // Host Generic Header Configuration Register
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
                  | ( 0         << 6)    // Virtual channel ID
                  | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	021a      	lsls	r2, r3, #8
 80065ee:	4b07      	ldr	r3, [pc, #28]	@ (800660c <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x94>)
 80065f0:	4013      	ands	r3, r2
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 80065f2:	4a05      	ldr	r2, [pc, #20]	@ (8006608 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
                  | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 80065f4:	f043 0339 	orr.w	r3, r3, #57	@ 0x39
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 80065f8:	66d3      	str	r3, [r2, #108]	@ 0x6c
    }
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40016c00 	.word	0x40016c00
 800660c:	00ffff00 	.word	0x00ffff00

08006610 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>:

    //---------------------------------------------------------------
    void DisplayRefresh()
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
    {
      DSI->WCR |= DSI_WCR_LTDCEN;
 8006618:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv+0x24>)
 800661a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800661e:	4a05      	ldr	r2, [pc, #20]	@ (8006634 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv+0x24>)
 8006620:	f043 0304 	orr.w	r3, r3, #4
 8006624:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
    }
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40016c00 	.word	0x40016c00

08006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>:
    //---------------------------------------------------------------
    /*! Initialize memory access
        \param mem Reference to a memory object containing the image
        \param name Name of the content 
    */
    MemoryImage( Memory &mem, const char *name )
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b08b      	sub	sp, #44	@ 0x2c
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]

    : Memory( ReportID_Hw::Module::MEMORY_IMAGE,  // moduleId 
              0,                                  // size, will be set later 
              0xFF,                               // default
              mem.isFlash() )
 8006644:	68fc      	ldr	r4, [r7, #12]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	331c      	adds	r3, #28
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	4798      	blx	r3
 8006652:	4603      	mov	r3, r0
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	23ff      	movs	r3, #255	@ 0xff
 8006658:	2200      	movs	r2, #0
 800665a:	218f      	movs	r1, #143	@ 0x8f
 800665c:	4620      	mov	r0, r4
 800665e:	f7fd fac5 	bl	8003bec <_ZN9EmbSysLib2Hw6MemoryC1Etmhb>
 8006662:	4a46      	ldr	r2, [pc, #280]	@ (800677c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x144>)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]

    {
      DWORD addr      = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
      DWORD signature = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]

      ptr  = 0;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	635a      	str	r2, [r3, #52]	@ 0x34

      // read signature
      for( DWORD i = 0; i < sizeof(signature); i++ )
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	e012      	b.n	80066a2 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x6a>
      {
        ((BYTE*)&signature)[i] = mem.read( addr+i );
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3310      	adds	r3, #16
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	1888      	adds	r0, r1, r2
 800668a:	f107 0110 	add.w	r1, r7, #16
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	188c      	adds	r4, r1, r2
 8006692:	4601      	mov	r1, r0
 8006694:	68b8      	ldr	r0, [r7, #8]
 8006696:	4798      	blx	r3
 8006698:	4603      	mov	r3, r0
 800669a:	7023      	strb	r3, [r4, #0]
      for( DWORD i = 0; i < sizeof(signature); i++ )
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	3301      	adds	r3, #1
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d9e9      	bls.n	800667c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x44>
      }
      addr += sizeof(signature);
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3304      	adds	r3, #4
 80066ac:	61fb      	str	r3, [r7, #28]
      
      if( signature == 0x20496D67 ) // signature correct?
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x148>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d152      	bne.n	800675c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
      {
        while( addr < mem.getSize() )  // read up to end of memory
 80066b6:	e042      	b.n	800673e <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x106>
        {
          for( DWORD i = 0; i < sizeof(cd); i++ ) // read content descriptor
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e013      	b.n	80066e6 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0xae>
          {
            ((BYTE*)&cd)[i] = mem.read( addr+i );
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3310      	adds	r3, #16
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69f9      	ldr	r1, [r7, #28]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	1888      	adds	r0, r1, r2
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f102 0110 	add.w	r1, r2, #16
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	188c      	adds	r4, r1, r2
 80066d6:	4601      	mov	r1, r0
 80066d8:	68b8      	ldr	r0, [r7, #8]
 80066da:	4798      	blx	r3
 80066dc:	4603      	mov	r3, r0
 80066de:	7023      	strb	r3, [r4, #0]
          for( DWORD i = 0; i < sizeof(cd); i++ ) // read content descriptor
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	3301      	adds	r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b23      	cmp	r3, #35	@ 0x23
 80066ea:	d9e8      	bls.n	80066be <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x86>
          }
          if( cd.size == 0 || cd.name[0] == 0 )  // check content descriptor
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d033      	beq.n	800675c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d02f      	beq.n	800675c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
          {
            break;                               // no more contents
          }
          addr += sizeof(contentDescriptor);  // set addr to begin of content
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3324      	adds	r3, #36	@ 0x24
 8006700:	61fb      	str	r3, [r7, #28]
          if( strcmp( cd.name, name ) == 0 )  // check name: content found?
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3310      	adds	r3, #16
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4618      	mov	r0, r3
 800670a:	f7f9 fdbd 	bl	8000288 <strcmp>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10f      	bne.n	8006734 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0xfc>
          {
            size = cd.size;                   // get size and address of the memory
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	609a      	str	r2, [r3, #8]
            ptr  = (BYTE*)mem.getPtr() + addr;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68b8      	ldr	r0, [r7, #8]
 8006726:	4798      	blx	r3
 8006728:	4602      	mov	r2, r0
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	441a      	add	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	635a      	str	r2, [r3, #52]	@ 0x34
            break;                            // ready
 8006732:	e013      	b.n	800675c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
          }
          addr += cd.size; // set addr to next content
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	61fb      	str	r3, [r7, #28]
        while( addr < mem.getSize() )  // read up to end of memory
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3318      	adds	r3, #24
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	4798      	blx	r3
 800674a:	4602      	mov	r2, r0
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	4293      	cmp	r3, r2
 8006750:	bf34      	ite	cc
 8006752:	2301      	movcc	r3, #1
 8006754:	2300      	movcs	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ad      	bne.n	80066b8 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x80>
        }
      }
      if( ptr == 0 )
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x138>
      {
        report.error( ReportID_Hw::Event::WRONG_ID );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	330c      	adds	r3, #12
 8006768:	2107      	movs	r1, #7
 800676a:	4618      	mov	r0, r3
 800676c:	f7fc fd3e 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
      }
    }
<<<<<<< HEAD
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4618      	mov	r0, r3
 8006774:	3724      	adds	r7, #36	@ 0x24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd90      	pop	{r4, r7, pc}
 800677a:	bf00      	nop
 800677c:	08009cec 	.word	0x08009cec
 8006780:	20496d67 	.word	0x20496d67
=======
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd90      	pop	{r4, r7, pc}
 800679a:	bf00      	nop
 800679c:	08009af8 	.word	0x08009af8
 80067a0:	20496d67 	.word	0x20496d67
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08006784 <_ZN9EmbSysLib2Hw11MemoryImage6unlockEv>:

  public:
    //---------------------------------------------------------------
    virtual void unlock( void )
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
    {
    }
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <_ZN9EmbSysLib2Hw11MemoryImage4lockEv>:

    //---------------------------------------------------------------
    virtual void lock( void )
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
    {
    }
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>:

    //---------------------------------------------------------------
    virtual const BYTE *getPtr( void )
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
    {
      return( ptr );
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <_ZN9EmbSysLib2Hw11MemoryImage9writeByteEmh>:

  protected:
    //---------------------------------------------------------------
    virtual void writeByte( DWORD addr, BYTE  data )
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
    {
      // writing impossible
      report.error( ReportID_Hw::Event::FUNCTION_NOT_SUPPORTED );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	330c      	adds	r3, #12
 80067d6:	2102      	movs	r1, #2
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fc fd07 	bl	80031ec <_ZN9EmbSysLib3Std6Report5errorEt>
    }
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <_ZN9EmbSysLib2Hw11MemoryImage8readByteEm>:
    //---------------------------------------------------------------
    // Reads a data byte from the memory hardware
    // addr:   Memory address
    // return: Data byte
    //
    virtual BYTE readByte( DWORD addr )
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
    {
      return( ptr[addr] );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	4413      	add	r3, r2
 80067f8:	781b      	ldrb	r3, [r3, #0]
    }
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>:
  public:
    //---------------------------------------------------------------
    /*! Initialize a TaskManager
        \param timer Timer object
    */
    TaskManager( Timer &timer )
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
    : timer( timer )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4618      	mov	r0, r3
 8006816:	f7f9 fdcf 	bl	80003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 800681a:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE+0x58>)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]
    {
      cycleTime = timer.getCycleTime();
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6838      	ldr	r0, [r7, #0]
 800682e:	4798      	blx	r3
 8006830:	4602      	mov	r2, r0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	619a      	str	r2, [r3, #24]
      tics      = 0;
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9c1 2304 	strd	r2, r3, [r1, #16]
      timer.add( this );
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3304      	adds	r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4611      	mov	r1, r2
 8006850:	6838      	ldr	r0, [r7, #0]
 8006852:	4798      	blx	r3
    }
<<<<<<< HEAD
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	08009cd4 	.word	0x08009cd4
=======
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	08009ae0 	.word	0x08009ae0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08006864 <_ZN9EmbSysLib3Dev11TaskManager3addEPNS1_4TaskE>:
        a timer interrupt.
        \remark The update()-method of the TaskManager::Task may be
        called immediately, so call this add()-method only when the constructor of the Task-object is completed.
        \param ptr Pointer to the TaskManager::Task object
    */
    virtual void add( Task *ptr )
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
    {
      timer.add( ptr );
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3304      	adds	r3, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	4610      	mov	r0, r2
 8006880:	4798      	blx	r3
    }
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <_ZN9EmbSysLib3Dev11TaskManager12getCycleTimeEv>:

    //---------------------------------------------------------------
    /*! Get cycle time of update() calls
        \return Cycle time in mikroseconds (us)
    */
    virtual DWORD getCycleTime( void )
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
    {
      return( cycleTime );
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
    }
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <_ZN9EmbSysLib3Dev11TaskManager7getTicsEv>:
    //---------------------------------------------------------------
    /*! Returns the number of tics resp. number of cycles, the task
        handler is called
        \return Number of tics
    */
    virtual LWORD getTics( void )
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
    {
      return( tics );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    }
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <_ZN9EmbSysLib3Dev11TaskManager6updateEv>:

  private:
    //---------------------------------------------------------------
    virtual void update( void )
 80068be:	b4b0      	push	{r4, r5, r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
    {
      tics++;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80068cc:	1c54      	adds	r4, r2, #1
 80068ce:	f143 0500 	adc.w	r5, r3, #0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	e9c3 4504 	strd	r4, r5, [r3, #16]
    }
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bcb0      	pop	{r4, r5, r7}
 80068e0:	4770      	bx	lr

080068e2 <_ZN15myReportHandler8onReportEttb>:
*/

//*******************************************************************
class myReportHandler : public EmbSysLib::Std::Report::Handler
{
  virtual void onReport( const WORD code, const WORD module, const bool isFatal )
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	461a      	mov	r2, r3
 80068f0:	4603      	mov	r3, r0
 80068f2:	817b      	strh	r3, [r7, #10]
 80068f4:	460b      	mov	r3, r1
 80068f6:	813b      	strh	r3, [r7, #8]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71fb      	strb	r3, [r7, #7]
  {
    if( isFatal )
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <_ZN15myReportHandler8onReportEttb+0x24>
    {
      while( 1 );
 8006902:	bf00      	nop
 8006904:	e7fd      	b.n	8006902 <_ZN15myReportHandler8onReportEttb+0x20>
    }
    else
    {
    }
  }
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <_ZN15myReportHandlerC1Ev>:
class myReportHandler : public EmbSysLib::Std::Report::Handler
<<<<<<< HEAD
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fc fca8 	bl	8003274 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>
 8006924:	4a03      	ldr	r2, [pc, #12]	@ (8006934 <_ZN15myReportHandlerC1Ev+0x20>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	08009cc8 	.word	0x08009cc8
=======
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fc fca2 	bl	8003284 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>
 8006940:	4a03      	ldr	r2, [pc, #12]	; (8006950 <_ZN15myReportHandlerC1Ev+0x20>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08009ad4 	.word	0x08009ad4
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08006938 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh>:

    } Cmd_type;

  protected:
    //---------------------------------------------------------------
    DisplayGraphic_OTM8009A( Dsi_Mcu     &hwDSI,
 8006938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693a:	b089      	sub	sp, #36	@ 0x24
 800693c:	af04      	add	r7, sp, #16
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	70fb      	strb	r3, [r7, #3]
    : DisplayGraphic( ReportID_Hw::Module::DISPLAY_GRAPHIC_OTM8009A,
                      (orientation & LANDSCAPE)?lcd_x_size:lcd_y_size,
                      (orientation & LANDSCAPE)?lcd_y_size:lcd_x_size,
                      font,
                      zoom )
    , hwDSI( hwDSI )
 8006946:	68fc      	ldr	r4, [r7, #12]
                      (orientation & LANDSCAPE)?lcd_x_size:lcd_y_size,
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	f003 0301 	and.w	r3, r3, #1
    , hwDSI( hwDSI )
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x20>
 8006952:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8006956:	e001      	b.n	800695c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x24>
 8006958:	f44f 75f0 	mov.w	r5, #480	@ 0x1e0
                      (orientation & LANDSCAPE)?lcd_y_size:lcd_x_size,
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	f003 0301 	and.w	r3, r3, #1
    , hwDSI( hwDSI )
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x34>
 8006966:	f44f 76f0 	mov.w	r6, #480	@ 0x1e0
 800696a:	e001      	b.n	8006970 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x38>
 800696c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8006970:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006974:	9303      	str	r3, [sp, #12]
 8006976:	466b      	mov	r3, sp
 8006978:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800697c:	ca07      	ldmia	r2, {r0, r1, r2}
 800697e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006982:	4633      	mov	r3, r6
 8006984:	462a      	mov	r2, r5
 8006986:	21b2      	movs	r1, #178	@ 0xb2
 8006988:	4620      	mov	r0, r4
 800698a:	f7fc fdd5 	bl	8003538 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh>
 800698e:	4a27      	ldr	r2, [pc, #156]	@ (8006a2c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0xf4>)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
      this->orientation = orientation;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

      if( orientation & LANDSCAPE )
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x86>
      {
        Hsize = lcd_x_size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80069b2:	821a      	strh	r2, [r3, #16]
        Vsize = lcd_y_size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80069ba:	825a      	strh	r2, [r3, #18]
 80069bc:	e007      	b.n	80069ce <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x96>
      }
      else
      {
        Hsize = lcd_y_size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80069c4:	821a      	strh	r2, [r3, #16]
        Vsize = lcd_x_size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80069cc:	825a      	strh	r2, [r3, #18]
      }

      ax = 0;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	865a      	strh	r2, [r3, #50]	@ 0x32
      ay = 0;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	869a      	strh	r2, [r3, #52]	@ 0x34
      aw = 0;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	86da      	strh	r2, [r3, #54]	@ 0x36
      ah = 0;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	871a      	strh	r2, [r3, #56]	@ 0x38
      xpos = 0;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	875a      	strh	r2, [r3, #58]	@ 0x3a
      ypos = 0;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	879a      	strh	r2, [r3, #60]	@ 0x3c

      // Reset LCD
      resetPin.setMode( Port::OutPP );
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
      resetPin.clr();
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
      System::delayMilliSec(20);
 8006a0a:	2014      	movs	r0, #20
 8006a0c:	f7f9 fecc 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
      resetPin.set();
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3304      	adds	r3, #4
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
      System::delayMilliSec(20);
 8006a1c:	2014      	movs	r0, #20
 8006a1e:	f7f9 fec3 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
    }
<<<<<<< HEAD
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2c:	08009c6c 	.word	0x08009c6c
=======
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	08009a78 	.word	0x08009a78
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08006a30 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv>:
    hwDSI.writeShort( CMD_NOP, (cmd)&0xFF);        \
    hwDSI.writeLong( (BYTE*)data, sizeof(data)  ); }

//---------------------------------------------------------------
void DisplayGraphic_OTM8009A::init( )
{
 8006a30:	b5b0      	push	{r4, r5, r7, lr}
 8006a32:	b0e8      	sub	sp, #416	@ 0x1a0
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006a3e:	6018      	str	r0, [r3, #0]
                                                       // Enable CMD2 to access vendor specific commands
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,   0x80,0x09,0x01 ); // Enter in command 2 mode and set EXTC to enable address shift function (0x00)
 8006a40:	4bbc      	ldr	r3, [pc, #752]	@ (8006d34 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x304>)
 8006a42:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8006a46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a4a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006a52:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a56:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	4798      	blx	r3
 8006a68:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a6c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006a74:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006a78:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3304      	adds	r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA2,   0x80,0x09      ); // Enter ORISE Command 2: Shift address to 0x80
 8006a8e:	4aaa      	ldr	r2, [pc, #680]	@ (8006d38 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x308>)
 8006a90:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	4611      	mov	r1, r2
 8006a98:	8019      	strh	r1, [r3, #0]
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	0c12      	lsrs	r2, r2, #16
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006aa4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006aac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ab0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2280      	movs	r2, #128	@ 0x80
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4798      	blx	r3
 8006ac2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ac6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006ace:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ad2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3304      	adds	r3, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL, 0x30           ); // SD_PT: Source output level during porch and non-display area to GND
 8006ae8:	f243 03c4 	movw	r3, #12484	@ 0x30c4
 8006aec:	f8a7 3194 	strh.w	r3, [r7, #404]	@ 0x194
 8006af0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006af4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006afc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2280      	movs	r2, #128	@ 0x80
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4798      	blx	r3
 8006b12:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b16:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b22:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8006b34:	2202      	movs	r2, #2
 8006b36:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( NO_DOC1,     0x40           ); // undocumented!
 8006b38:	f244 03c4 	movw	r3, #16580	@ 0x40c4
 8006b3c:	f8a7 3190 	strh.w	r3, [r7, #400]	@ 0x190
 8006b40:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b44:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b4c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b50:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	228a      	movs	r2, #138	@ 0x8a
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4798      	blx	r3
 8006b62:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b66:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b72:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8006b84:	2202      	movs	r2, #2
 8006b86:	4798      	blx	r3

  System::delayMilliSec(10);
 8006b88:	200a      	movs	r0, #10
 8006b8a:	f7f9 fe0d 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

  WRITE_CUSTOMER_ARRAY( PWR_CTRL4 + 1, 0xA9); // gvdd_en_test: enable GVDD test mode
 8006b8e:	f64a 13c5 	movw	r3, #43461	@ 0xa9c5
 8006b92:	f8a7 318c 	strh.w	r3, [r7, #396]	@ 0x18c
 8006b96:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006b9a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006ba2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ba6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	22b1      	movs	r2, #177	@ 0xb1
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4798      	blx	r3
 8006bb8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006bbc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006bc4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006bc8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 1, 0x34); // pump 4 vgh voltage: 15.0v down to 13.0v
 8006bde:	f243 43c5 	movw	r3, #13509	@ 0x34c5
 8006be2:	f8a7 3188 	strh.w	r3, [r7, #392]	@ 0x188
 8006be6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006bea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006bf2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006bf6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2291      	movs	r2, #145	@ 0x91
 8006c04:	2100      	movs	r1, #0
 8006c06:	4798      	blx	r3
 8006c08:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006c14:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c18:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3304      	adds	r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	4798      	blx	r3
                                              // pump 5 vgh voltage: -12.0v downto -9.0v
  WRITE_CUSTOMER_ARRAY( P_DRV_M,       0x50); // Column inversion
 8006c2e:	f245 03c0 	movw	r3, #20672	@ 0x50c0
 8006c32:	f8a7 3184 	strh.w	r3, [r7, #388]	@ 0x184
 8006c36:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006c42:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c46:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	22b4      	movs	r2, #180	@ 0xb4
 8006c54:	2100      	movs	r1, #0
 8006c56:	4798      	blx	r3
 8006c58:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c5c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006c64:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c68:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3304      	adds	r3, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f507 71c2 	add.w	r1, r7, #388	@ 0x184
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( VCOMDC,        0x4E); // VCOM Voltage: -1.0000v downto -1.2625v
 8006c7e:	f644 63d9 	movw	r3, #20185	@ 0x4ed9
 8006c82:	f8a7 3180 	strh.w	r3, [r7, #384]	@ 0x180
 8006c86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c8a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006c92:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006c96:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4798      	blx	r3
 8006ca8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006cac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006cb4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006cb8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( OSC_ADJ,       0x66); // Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz)
 8006cce:	f246 63c1 	movw	r3, #26305	@ 0x66c1
 8006cd2:	f8a7 317c 	strh.w	r3, [r7, #380]	@ 0x17c
 8006cd6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006cda:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006ce2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ce6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2281      	movs	r2, #129	@ 0x81
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4798      	blx	r3
 8006cf8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006cfc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006d04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d08:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3304      	adds	r3, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x08); // Video mode internal
 8006d1e:	f640 03c1 	movw	r3, #2241	@ 0x8c1
 8006d22:	f8a7 3178 	strh.w	r3, [r7, #376]	@ 0x178
 8006d26:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d2a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	e004      	b.n	8006d3c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x30c>
 8006d32:	bf00      	nop
 8006d34:	010980ff 	.word	0x010980ff
 8006d38:	08009620 	.word	0x08009620
 8006d3c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006d3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d42:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	681b      	ldr	r3, [r3, #0]
<<<<<<< HEAD
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	22a1      	movs	r2, #161	@ 0xa1
 8006d50:	2100      	movs	r1, #0
 8006d52:	4798      	blx	r3
 8006d54:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d58:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006d60:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d64:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
=======
 8006d4c:	e004      	b.n	8006d58 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x30c>
 8006d4e:	bf00      	nop
 8006d50:	010980ff 	.word	0x010980ff
 8006d54:	080094ac 	.word	0x080094ac
 8006d58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	681b      	ldr	r3, [r3, #0]
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 8006d76:	2202      	movs	r2, #2
 8006d78:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 2, 0x01); // pump 4&5 x6: ONLY VALID when PUMP4_EN_ASDM_HV = "0"
 8006d7a:	f240 13c5 	movw	r3, #453	@ 0x1c5
 8006d7e:	f8a7 3174 	strh.w	r3, [r7, #372]	@ 0x174
 8006d82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d86:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006d8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006d92:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2292      	movs	r2, #146	@ 0x92
 8006da0:	2100      	movs	r1, #0
 8006da2:	4798      	blx	r3
 8006da4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006da8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006db0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006db4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 5, 0x36); // pump4 clock ratio: 1/2 line
 8006dca:	f243 63c5 	movw	r3, #14021	@ 0x36c5
 8006dce:	f8a7 3170 	strh.w	r3, [r7, #368]	@ 0x170
 8006dd2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006dd6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006dde:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006de2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2295      	movs	r2, #149	@ 0x95
 8006df0:	2100      	movs	r1, #0
 8006df2:	4798      	blx	r3
 8006df4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006df8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e00:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e04:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8006e16:	2202      	movs	r2, #2
 8006e18:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GVDDSET,       0x79,  // GVDD/NGVDD settings
 8006e1a:	4abb      	ldr	r2, [pc, #748]	@ (8007108 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6d8>)
 8006e1c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	4611      	mov	r1, r2
 8006e24:	8019      	strh	r1, [r3, #0]
 8006e26:	3302      	adds	r3, #2
 8006e28:	0c12      	lsrs	r2, r2, #16
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e30:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e38:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e3c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4798      	blx	r3
 8006e4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e52:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e5a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e5e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8006e70:	2203      	movs	r2, #3
 8006e72:	4798      	blx	r3
                                       0x79);
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 4, 0x33); // Rewrite the default value !
 8006e74:	f243 33c5 	movw	r3, #13253	@ 0x33c5
 8006e78:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
 8006e7c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e80:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e88:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e8c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2294      	movs	r2, #148	@ 0x94
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4798      	blx	r3
 8006e9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ea2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006eaa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006eae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_CTRL + 1,   0x1B); // Panel display timing Setting 3
 8006ec4:	f44f 53de 	mov.w	r3, #7104	@ 0x1bc0
 8006ec8:	f8a7 3164 	strh.w	r3, [r7, #356]	@ 0x164
 8006ecc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ed0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006ed8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006edc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	22a3      	movs	r2, #163	@ 0xa3
 8006eea:	2100      	movs	r1, #0
 8006eec:	4798      	blx	r3
 8006eee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ef2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006efa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006efe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8006f10:	2202      	movs	r2, #2
 8006f12:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 2, 0x83); // Power control 1
 8006f14:	f248 33c5 	movw	r3, #33733	@ 0x83c5
 8006f18:	f8a7 3160 	strh.w	r3, [r7, #352]	@ 0x160
 8006f1c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f20:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006f28:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f2c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2282      	movs	r2, #130	@ 0x82
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4798      	blx	r3
 8006f3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f42:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006f4a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f4e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8006f60:	2202      	movs	r2, #2
 8006f62:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL +1,0x83); // Source driver precharge
 8006f64:	f248 33c4 	movw	r3, #33732	@ 0x83c4
 8006f68:	f8a7 315c 	strh.w	r3, [r7, #348]	@ 0x15c
 8006f6c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f70:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006f78:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f7c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2281      	movs	r2, #129	@ 0x81
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4798      	blx	r3
 8006f8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f92:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006f9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x0E);
 8006fb4:	f640 63c1 	movw	r3, #3777	@ 0xec1
 8006fb8:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
 8006fbc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006fc0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006fc8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006fcc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	22a1      	movs	r2, #161	@ 0xa1
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4798      	blx	r3
 8006fde:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006fe2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006fea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006fee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8007000:	2202      	movs	r2, #2
 8007002:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANSET,        0x00,0x01);
 8007004:	4a41      	ldr	r2, [pc, #260]	@ (800710c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6dc>)
 8007006:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	4611      	mov	r1, r2
 800700e:	8019      	strh	r1, [r3, #0]
 8007010:	3302      	adds	r3, #2
 8007012:	0c12      	lsrs	r2, r2, #16
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800701a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007022:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007026:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	22a6      	movs	r2, #166	@ 0xa6
 8007034:	2100      	movs	r1, #0
 8007036:	4798      	blx	r3
 8007038:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800703c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007044:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007048:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3304      	adds	r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 800705a:	2203      	movs	r2, #3
 800705c:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( GOAVST,        0x85,0x01,0x00,0x84,0x01,0x00);
 800705e:	4a2c      	ldr	r2, [pc, #176]	@ (8007110 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e0>)
 8007060:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8007064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007068:	6018      	str	r0, [r3, #0]
 800706a:	3304      	adds	r3, #4
 800706c:	8019      	strh	r1, [r3, #0]
 800706e:	3302      	adds	r3, #2
 8007070:	0c0a      	lsrs	r2, r1, #16
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007078:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007080:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007084:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2280      	movs	r2, #128	@ 0x80
 8007092:	2100      	movs	r1, #0
 8007094:	4798      	blx	r3
 8007096:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800709a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80070a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80070a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3304      	adds	r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80070b8:	2207      	movs	r2, #7
 80070ba:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOACLKA1,      0x18,0x04,0x03,0x39,0x00,0x00,0x00,0x18,0x03,0x03,0x3A,0x00,0x00,0x00);
<<<<<<< HEAD
 80070bc:	4b15      	ldr	r3, [pc, #84]	@ (8007114 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e4>)
 80070be:	f507 749e 	add.w	r4, r7, #316	@ 0x13c
 80070c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070c4:	c407      	stmia	r4!, {r0, r1, r2}
 80070c6:	8023      	strh	r3, [r4, #0]
 80070c8:	3402      	adds	r4, #2
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	7023      	strb	r3, [r4, #0]
 80070ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80070d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80070da:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80070de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	22a0      	movs	r2, #160	@ 0xa0
 80070ec:	2100      	movs	r1, #0
 80070ee:	4798      	blx	r3
 80070f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80070f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80070fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007100:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007104:	e008      	b.n	8007118 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e8>
 8007106:	bf00      	nop
 8007108:	08009624 	.word	0x08009624
 800710c:	08009628 	.word	0x08009628
 8007110:	0800962c 	.word	0x0800962c
 8007114:	08009634 	.word	0x08009634
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3304      	adds	r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8007126:	220f      	movs	r2, #15
 8007128:	4798      	blx	r3
=======
 80070d8:	4b15      	ldr	r3, [pc, #84]	; (8007130 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e4>)
 80070da:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 80070de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e0:	c407      	stmia	r4!, {r0, r1, r2}
 80070e2:	8023      	strh	r3, [r4, #0]
 80070e4:	3402      	adds	r4, #2
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	7023      	strb	r3, [r4, #0]
 80070ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	22a0      	movs	r2, #160	; 0xa0
 8007108:	2100      	movs	r1, #0
 800710a:	4798      	blx	r3
 800710c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007110:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007118:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800711c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007120:	e008      	b.n	8007134 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e8>
 8007122:	bf00      	nop
 8007124:	080094b0 	.word	0x080094b0
 8007128:	080094b4 	.word	0x080094b4
 800712c:	080094b8 	.word	0x080094b8
 8007130:	080094c0 	.word	0x080094c0
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3304      	adds	r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8007142:	220f      	movs	r2, #15
 8007144:	4798      	blx	r3
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  WRITE_CUSTOMER_ARRAY( GOACLKA3,      0x18,0x02,0x03,0x3B,0x00,0x00,0x00,0x18,0x01,0x03,0x3C,0x00,0x00,0x00);
 800712a:	4bb7      	ldr	r3, [pc, #732]	@ (8007408 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9d8>)
 800712c:	f507 7496 	add.w	r4, r7, #300	@ 0x12c
 8007130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007132:	c407      	stmia	r4!, {r0, r1, r2}
 8007134:	8023      	strh	r3, [r4, #0]
 8007136:	3402      	adds	r4, #2
 8007138:	0c1b      	lsrs	r3, r3, #16
 800713a:	7023      	strb	r3, [r4, #0]
 800713c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007140:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007148:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800714c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	22b0      	movs	r2, #176	@ 0xb0
 800715a:	2100      	movs	r1, #0
 800715c:	4798      	blx	r3
 800715e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007162:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800716a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800716e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3304      	adds	r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8007180:	220f      	movs	r2, #15
 8007182:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOAECLK,       0x01,0x01,0x20,0x20,0x00,0x00,0x01,0x02,0x00,0x00);
 8007184:	4aa1      	ldr	r2, [pc, #644]	@ (800740c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9dc>)
 8007186:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800718a:	ca07      	ldmia	r2, {r0, r1, r2}
 800718c:	c303      	stmia	r3!, {r0, r1}
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	3302      	adds	r3, #2
 8007192:	0c12      	lsrs	r2, r2, #16
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800719a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80071a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	22c0      	movs	r2, #192	@ 0xc0
 80071b4:	2100      	movs	r1, #0
 80071b6:	4798      	blx	r3
 80071b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80071c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071c8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3304      	adds	r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80071da:	220b      	movs	r2, #11
 80071dc:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC2,       0x00); // undocumented!
 80071de:	23cf      	movs	r3, #207	@ 0xcf
 80071e0:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 80071e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80071f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	22d0      	movs	r2, #208	@ 0xd0
 8007202:	2100      	movs	r1, #0
 8007204:	4798      	blx	r3
 8007206:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800720a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007212:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007216:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3304      	adds	r3, #4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8007228:	2202      	movs	r2, #2
 800722a:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PANCTRLSET1,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 800722c:	4a78      	ldr	r2, [pc, #480]	@ (8007410 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e0>)
 800722e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007232:	ca07      	ldmia	r2, {r0, r1, r2}
 8007234:	c303      	stmia	r3!, {r0, r1}
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	3302      	adds	r3, #2
 800723a:	0c12      	lsrs	r2, r2, #16
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007242:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800724a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800724e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2280      	movs	r2, #128	@ 0x80
 800725c:	2100      	movs	r1, #0
 800725e:	4798      	blx	r3
 8007260:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007264:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800726c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007270:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3304      	adds	r3, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8007282:	220b      	movs	r2, #11
 8007284:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET2,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8007286:	4b63      	ldr	r3, [pc, #396]	@ (8007414 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e4>)
 8007288:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 800728c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800728e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007292:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007296:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800729e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072a2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2290      	movs	r2, #144	@ 0x90
 80072b0:	2100      	movs	r1, #0
 80072b2:	4798      	blx	r3
 80072b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072b8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80072c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3304      	adds	r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80072d6:	2210      	movs	r2, #16
 80072d8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET3,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80072da:	4b4e      	ldr	r3, [pc, #312]	@ (8007414 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e4>)
 80072dc:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 80072e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80072e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80072f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	22a0      	movs	r2, #160	@ 0xa0
 8007304:	2100      	movs	r1, #0
 8007306:	4798      	blx	r3
 8007308:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800730c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007314:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007318:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3304      	adds	r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800732a:	2210      	movs	r2, #16
 800732c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET4,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 800732e:	4a38      	ldr	r2, [pc, #224]	@ (8007410 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e0>)
 8007330:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8007334:	ca07      	ldmia	r2, {r0, r1, r2}
 8007336:	c303      	stmia	r3!, {r0, r1}
 8007338:	801a      	strh	r2, [r3, #0]
 800733a:	3302      	adds	r3, #2
 800733c:	0c12      	lsrs	r2, r2, #16
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007344:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800734c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007350:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	22b0      	movs	r2, #176	@ 0xb0
 800735e:	2100      	movs	r1, #0
 8007360:	4798      	blx	r3
 8007362:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007366:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800736e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007372:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3304      	adds	r3, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8007384:	220b      	movs	r2, #11
 8007386:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET5,   0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8007388:	4b23      	ldr	r3, [pc, #140]	@ (8007418 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e8>)
 800738a:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 800738e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007394:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007398:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80073a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80073a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	22c0      	movs	r2, #192	@ 0xc0
 80073b2:	2100      	movs	r1, #0
 80073b4:	4798      	blx	r3
 80073b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80073ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80073c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80073c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3304      	adds	r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 80073d8:	2210      	movs	r2, #16
 80073da:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET6,   0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00);
<<<<<<< HEAD
 80073dc:	4b0f      	ldr	r3, [pc, #60]	@ (800741c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9ec>)
 80073de:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 80073e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80073ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80073f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80073f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	22d0      	movs	r2, #208	@ 0xd0
 8007406:	e00b      	b.n	8007420 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9f0>
 8007408:	08009644 	.word	0x08009644
 800740c:	08009654 	.word	0x08009654
 8007410:	08009660 	.word	0x08009660
 8007414:	0800966c 	.word	0x0800966c
 8007418:	0800967c 	.word	0x0800967c
 800741c:	0800968c 	.word	0x0800968c
 8007420:	2100      	movs	r1, #0
 8007422:	4798      	blx	r3
 8007424:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007428:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007430:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007434:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3304      	adds	r3, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8007446:	2210      	movs	r2, #16
 8007448:	4798      	blx	r3
=======
 80073f8:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9ec>)
 80073fa:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80073fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007404:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007408:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007410:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007414:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	22d0      	movs	r2, #208	; 0xd0
 8007422:	e00b      	b.n	800743c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9f0>
 8007424:	080094d0 	.word	0x080094d0
 8007428:	080094e0 	.word	0x080094e0
 800742c:	080094ec 	.word	0x080094ec
 8007430:	080094f8 	.word	0x080094f8
 8007434:	08009508 	.word	0x08009508
 8007438:	08009518 	.word	0x08009518
 800743c:	2100      	movs	r1, #0
 800743e:	4798      	blx	r3
 8007440:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007444:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800744c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007450:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3304      	adds	r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8007462:	2210      	movs	r2, #16
 8007464:	4798      	blx	r3
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  WRITE_CUSTOMER_ARRAY( PANCTRLSET7,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 800744a:	4aba      	ldr	r2, [pc, #744]	@ (8007734 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd04>)
 800744c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8007450:	ca07      	ldmia	r2, {r0, r1, r2}
 8007452:	c303      	stmia	r3!, {r0, r1}
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	3302      	adds	r3, #2
 8007458:	0c12      	lsrs	r2, r2, #16
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007460:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007468:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800746c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	22e0      	movs	r2, #224	@ 0xe0
 800747a:	2100      	movs	r1, #0
 800747c:	4798      	blx	r3
 800747e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007482:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800748a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800748e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3304      	adds	r3, #4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80074a0:	220b      	movs	r2, #11
 80074a2:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET8,   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
 80074a4:	4aa4      	ldr	r2, [pc, #656]	@ (8007738 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd08>)
 80074a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80074aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80074ac:	c303      	stmia	r3!, {r0, r1}
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	3302      	adds	r3, #2
 80074b2:	0c12      	lsrs	r2, r2, #16
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80074ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80074c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80074c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	22f0      	movs	r2, #240	@ 0xf0
 80074d4:	2100      	movs	r1, #0
 80074d6:	4798      	blx	r3
 80074d8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80074dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80074e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80074e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3304      	adds	r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80074fa:	220b      	movs	r2, #11
 80074fc:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D1,       0x00,0x26,0x09,0x0B,0x01,0x25,0x00,0x00,0x00,0x00);
 80074fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007502:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007506:	4a8d      	ldr	r2, [pc, #564]	@ (800773c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd0c>)
 8007508:	ca07      	ldmia	r2, {r0, r1, r2}
 800750a:	c303      	stmia	r3!, {r0, r1}
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	3302      	adds	r3, #2
 8007510:	0c12      	lsrs	r2, r2, #16
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007518:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007520:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007524:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2280      	movs	r2, #128	@ 0x80
 8007532:	2100      	movs	r1, #0
 8007534:	4798      	blx	r3
 8007536:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800753a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007542:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007546:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3304      	adds	r3, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8007558:	220b      	movs	r2, #11
 800755a:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x0A,0x0C,0x02);
 800755c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007560:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007564:	4a76      	ldr	r2, [pc, #472]	@ (8007740 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd10>)
 8007566:	461c      	mov	r4, r3
 8007568:	4613      	mov	r3, r2
 800756a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800756c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007570:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007574:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800757c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007580:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2290      	movs	r2, #144	@ 0x90
 800758e:	2100      	movs	r1, #0
 8007590:	4798      	blx	r3
 8007592:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007596:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800759e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80075a2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3304      	adds	r3, #4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80075b4:	2210      	movs	r2, #16
 80075b6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D3,       0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80075b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80075bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80075c0:	4a60      	ldr	r2, [pc, #384]	@ (8007744 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd14>)
 80075c2:	461c      	mov	r4, r3
 80075c4:	4613      	mov	r3, r2
 80075c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80075cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80075d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80075d8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80075dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	22a0      	movs	r2, #160	@ 0xa0
 80075ea:	2100      	movs	r1, #0
 80075ec:	4798      	blx	r3
 80075ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80075f2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80075fa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80075fe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3304      	adds	r3, #4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8007610:	2210      	movs	r2, #16
 8007612:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U1,       0x00,0x25,0x0C,0x0A,0x02,0x26,0x00,0x00,0x00,0x00);
 8007614:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007618:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800761c:	4a4a      	ldr	r2, [pc, #296]	@ (8007748 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd18>)
 800761e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007620:	c303      	stmia	r3!, {r0, r1}
 8007622:	801a      	strh	r2, [r3, #0]
 8007624:	3302      	adds	r3, #2
 8007626:	0c12      	lsrs	r2, r2, #16
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800762e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007636:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800763a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	22b0      	movs	r2, #176	@ 0xb0
 8007648:	2100      	movs	r1, #0
 800764a:	4798      	blx	r3
 800764c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007650:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007658:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800765c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3304      	adds	r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800766e:	220b      	movs	r2, #11
 8007670:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x0B,0x09,0x01);
 8007672:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007676:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800767a:	4a34      	ldr	r2, [pc, #208]	@ (800774c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd1c>)
 800767c:	461c      	mov	r4, r3
 800767e:	4613      	mov	r3, r2
 8007680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007682:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007686:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800768a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007692:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007696:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	22c0      	movs	r2, #192	@ 0xc0
 80076a4:	2100      	movs	r1, #0
 80076a6:	4798      	blx	r3
 80076a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80076ac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80076b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80076b8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3304      	adds	r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80076ca:	2210      	movs	r2, #16
 80076cc:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U3,       0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80076ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80076d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80076d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007750 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd20>)
 80076d8:	461c      	mov	r4, r3
 80076da:	4613      	mov	r3, r2
 80076dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076e2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80076e6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80076ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80076f2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	22d0      	movs	r2, #208	@ 0xd0
 8007700:	2100      	movs	r1, #0
 8007702:	4798      	blx	r3
 8007704:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007708:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007710:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007714:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3304      	adds	r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8007726:	2210      	movs	r2, #16
 8007728:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 1, 0x66); // Pump 1 min and max DM
<<<<<<< HEAD
 800772a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800772e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8007732:	e00f      	b.n	8007754 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd24>
 8007734:	08009660 	.word	0x08009660
 8007738:	0800969c 	.word	0x0800969c
 800773c:	080096a8 	.word	0x080096a8
 8007740:	080096b4 	.word	0x080096b4
 8007744:	080096c4 	.word	0x080096c4
 8007748:	080096d4 	.word	0x080096d4
 800774c:	080096e0 	.word	0x080096e0
 8007750:	080096f0 	.word	0x080096f0
 8007754:	f246 62c5 	movw	r2, #26309	@ 0x66c5
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800775e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007766:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800776a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2281      	movs	r2, #129	@ 0x81
 8007778:	2100      	movs	r1, #0
 800777a:	4798      	blx	r3
 800777c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007780:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007788:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800778c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
=======
 8007746:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800774a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800774e:	e00f      	b.n	8007770 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd24>
 8007750:	080094ec 	.word	0x080094ec
 8007754:	08009528 	.word	0x08009528
 8007758:	08009534 	.word	0x08009534
 800775c:	08009540 	.word	0x08009540
 8007760:	08009550 	.word	0x08009550
 8007764:	08009560 	.word	0x08009560
 8007768:	0800956c 	.word	0x0800956c
 800776c:	0800957c 	.word	0x0800957c
 8007770:	f246 62c5 	movw	r2, #26309	; 0x66c5
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800777a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007782:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007786:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	681b      	ldr	r3, [r3, #0]
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3304      	adds	r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800779e:	2202      	movs	r2, #2
 80077a0:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWM_PARA3,       32); // PWM-Freq, DBF=4,141 kHz (if PWM_FREQ_SEL[1:0]=01)
 80077a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80077a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80077aa:	f242 02c6 	movw	r2, #8390	@ 0x20c6
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80077b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80077bc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80077c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	22b1      	movs	r2, #177	@ 0xb1
 80077ce:	2100      	movs	r1, #0
 80077d0:	4798      	blx	r3
 80077d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80077d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80077de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80077e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3304      	adds	r3, #4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80077f4:	2202      	movs	r2, #2
 80077f6:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC3,       0x06); // undocumented, but important
 80077f8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80077fc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007800:	f240 62f5 	movw	r2, #1781	@ 0x6f5
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800780a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007812:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007816:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	22b6      	movs	r2, #182	@ 0xb6
 8007824:	2100      	movs	r1, #0
 8007826:	4798      	blx	r3
 8007828:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800782c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007834:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007838:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3304      	adds	r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800784a:	2202      	movs	r2, #2
 800784c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,     0xFF,  // Exit CMD2 mode
 800784e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007852:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007860:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007868:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800786c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2200      	movs	r2, #0
 800787a:	2100      	movs	r1, #0
 800787c:	4798      	blx	r3
 800787e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007882:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800788a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800788e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3304      	adds	r3, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80078a0:	2204      	movs	r2, #4
 80078a2:	4798      	blx	r3
                                       0xFF,0xFF);

  WRITE_SYS_CMD( CMD_NOP, 0x00 ); // NOP - goes back to DCS std command ?
 80078a4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80078a8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80078b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80078b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2200      	movs	r2, #0
 80078c2:	2100      	movs	r1, #0
 80078c4:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( GMCT2_2P,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 80078c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80078ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80078ce:	4a62      	ldr	r2, [pc, #392]	@ (8007a58 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1028>)
 80078d0:	461c      	mov	r4, r3
 80078d2:	4615      	mov	r5, r2
 80078d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	7023      	strb	r3, [r4, #0]
 80078dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80078e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80078e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80078ec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	4798      	blx	r3
 80078fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007902:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800790a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800790e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3304      	adds	r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8007920:	2211      	movs	r2, #17
 8007922:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GMCT2_2N,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 8007924:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007928:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800792c:	4a4b      	ldr	r2, [pc, #300]	@ (8007a5c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x102c>)
 800792e:	461c      	mov	r4, r3
 8007930:	4615      	mov	r5, r2
 8007932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	7023      	strb	r3, [r4, #0]
 800793a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800793e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007946:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800794a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	4798      	blx	r3
 800795c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007960:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007968:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800796c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3304      	adds	r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f107 011c 	add.w	r1, r7, #28
 800797e:	2211      	movs	r2, #17
 8007980:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_SLPOUT, 0x00 ); // Send Sleep Out command to display : no parameter
 8007982:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007986:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800798e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007992:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2200      	movs	r2, #0
 80079a0:	2111      	movs	r1, #17
 80079a2:	4798      	blx	r3

  System::delayMilliSec(120);
 80079a4:	2078      	movs	r0, #120	@ 0x78
 80079a6:	f7f8 feff 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

  WRITE_SYS_CMD( CMD_COLMOD, 0x77 ); // RGB888, MCU: 24bit/pixel, RGB:24bit/pixel,1-times
 80079aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80079ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80079b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80079ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2277      	movs	r2, #119	@ 0x77
 80079c8:	213a      	movs	r1, #58	@ 0x3a
 80079ca:	4798      	blx	r3


  switch( orientation )
 80079cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80079d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d040      	beq.n	8007a60 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1030>
 80079de:	2b03      	cmp	r3, #3
 80079e0:	dc03      	bgt.n	80079ea <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xfba>
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d025      	beq.n	8007a32 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1002>
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d011      	beq.n	8007a0e <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xfde>
  {
    default:                                      //MY     MX     MV
    case PORTRAIT_0:    WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(0<<6)|(0<<5) ); break;
 80079ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80079ee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80079f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80079fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2200      	movs	r2, #0
 8007a08:	2136      	movs	r1, #54	@ 0x36
 8007a0a:	4798      	blx	r3
 8007a0c:	e03a      	b.n	8007a84 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
    case PORTRAIT_180:  WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(1<<6)|(0<<5) ); break;
 8007a0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a12:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007a1a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a1e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	22c0      	movs	r2, #192	@ 0xc0
 8007a2c:	2136      	movs	r1, #54	@ 0x36
 8007a2e:	4798      	blx	r3
 8007a30:	e028      	b.n	8007a84 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
    case LANDSCAPE_90:  WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(1<<6)|(1<<5) ); break;
<<<<<<< HEAD
 8007a32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a36:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007a3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a42:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2260      	movs	r2, #96	@ 0x60
 8007a50:	2136      	movs	r1, #54	@ 0x36
 8007a52:	4798      	blx	r3
 8007a54:	e016      	b.n	8007a84 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
 8007a56:	bf00      	nop
 8007a58:	08009700 	.word	0x08009700
 8007a5c:	08009714 	.word	0x08009714
=======
 8007a4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2260      	movs	r2, #96	; 0x60
 8007a6c:	2136      	movs	r1, #54	; 0x36
 8007a6e:	4798      	blx	r3
 8007a70:	e016      	b.n	8007aa0 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
 8007a72:	bf00      	nop
 8007a74:	0800958c 	.word	0x0800958c
 8007a78:	080095a0 	.word	0x080095a0
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
    case LANDSCAPE_270:  WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(0<<6)|(1<<5) ); break;
 8007a60:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a64:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007a6c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a70:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	22a0      	movs	r2, #160	@ 0xa0
 8007a7e:	2136      	movs	r1, #54	@ 0x36
 8007a80:	4798      	blx	r3
 8007a82:	bf00      	nop
  }
                           // Start-Addr,  End-Addr
  WRITE_SYS_ARRAY( CMD_CASET, 0x00, 0x00,  (BYTE)((Hsize-1)>>8), (BYTE)((Hsize-1)&0xFF) );
 8007a84:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	711a      	strb	r2, [r3, #4]
 8007a92:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007a96:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007a9a:	222a      	movs	r2, #42	@ 0x2a
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007aa2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	8a1b      	ldrh	r3, [r3, #16]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	121b      	asrs	r3, r3, #8
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ab4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007ab8:	70da      	strb	r2, [r3, #3]
 8007aba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007abe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	8a1b      	ldrh	r3, [r3, #16]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ad0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007ad4:	711a      	strb	r2, [r3, #4]
 8007ad6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ada:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007ae2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ae6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3304      	adds	r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f107 0114 	add.w	r1, r7, #20
 8007af8:	2205      	movs	r2, #5
 8007afa:	4798      	blx	r3
  WRITE_SYS_ARRAY( CMD_PASET, 0x00, 0x00,  (BYTE)((Vsize-1)>>8), (BYTE)((Vsize-1)&0xFF) );
 8007afc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b00:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	711a      	strb	r2, [r3, #4]
 8007b0a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b0e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007b12:	222b      	movs	r2, #43	@ 0x2b
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b1a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	8a5b      	ldrh	r3, [r3, #18]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	121b      	asrs	r3, r3, #8
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b2c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007b30:	70da      	strb	r2, [r3, #3]
 8007b32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b36:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	8a5b      	ldrh	r3, [r3, #18]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b48:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007b4c:	711a      	strb	r2, [r3, #4]
 8007b4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b52:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007b5a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b5e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f107 010c 	add.w	r1, r7, #12
 8007b70:	2205      	movs	r2, #5
 8007b72:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_WRDISBV,  0x7F ); // Display Brightness: medium
 8007b74:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b78:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007b80:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	227f      	movs	r2, #127	@ 0x7f
 8007b92:	2151      	movs	r1, #81	@ 0x51
 8007b94:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCTRLD,  0x2C ); // Control Display: Brightness Control Block: On,
 8007b96:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007b9a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007ba2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007ba6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	222c      	movs	r2, #44	@ 0x2c
 8007bb4:	2153      	movs	r1, #83	@ 0x53
 8007bb6:	4798      	blx	r3
                                       //                  Display Dimming: on
                                       //                  BackLight: on
  WRITE_SYS_CMD( CMD_WRCABC,   0x02 ); // Content Adaptive Brightness: Still Picture
 8007bb8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007bbc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007bc4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007bc8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	2155      	movs	r1, #85	@ 0x55
 8007bd8:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCABCMB, 0x7F ); // CABC Minimum Brightness: maximum
 8007bda:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007bde:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007be6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007bea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	227f      	movs	r2, #127	@ 0x7f
 8007bf8:	215e      	movs	r1, #94	@ 0x5e
 8007bfa:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_DISPOFF, 0x00 ); // Display Off
 8007bfc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c08:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2128      	movs	r1, #40	@ 0x28
 8007c1c:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_NOP,    0x00 ); // NOP command
 8007c1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c22:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007c2e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4798      	blx	r3
}
 8007c40:	bf00      	nop
 8007c42:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4a:	bf00      	nop

08007c4c <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>:
//
// DisplayGraphic_OTM8009Aram
//
//*******************************************************************
//---------------------------------------------------------------
DisplayGraphic_OTM8009Aram::DisplayGraphic_OTM8009Aram( Dsi_Mcu     &hwDSI,
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	70fb      	strb	r3, [r7, #3]
                                                        Port::Pin   &resetPin,
                                                        Orientation  orientation,
                                                        Font         font,
                                                        BYTE         zoom )

: DisplayGraphic_OTM8009A( hwDSI, resetPin, orientation, font, zoom )
 8007c5a:	68fc      	ldr	r4, [r7, #12]
 8007c5c:	78fd      	ldrb	r5, [r7, #3]
 8007c5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c62:	9303      	str	r3, [sp, #12]
 8007c64:	466b      	mov	r3, sp
 8007c66:	f107 0220 	add.w	r2, r7, #32
 8007c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c70:	462b      	mov	r3, r5
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7fe fe5e 	bl	8006938 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh>
 8007c7c:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh+0x94>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	601a      	str	r2, [r3, #0]
{
   this->hwDSI.Init( Hsize, Vsize, true );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8a19      	ldrh	r1, [r3, #16]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8a5a      	ldrh	r2, [r3, #18]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f7fe fb3a 	bl	8006308 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb>

  DisplayGraphic_OTM8009A::init( );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe feca 	bl	8006a30 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv>

  ptrStart = (__IO uint16_t *)this->hwDSI.startLTDC( Hsize, Vsize );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8a19      	ldrh	r1, [r3, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8a5b      	ldrh	r3, [r3, #18]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f7fe fc1f 	bl	80064ec <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  ptr      = ptrStart;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	641a      	str	r2, [r3, #64]	@ 0x40

  WRITE_SYS_CMD( CMD_DISPON, 0x00);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2129      	movs	r1, #41	@ 0x29
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	4798      	blx	r3
  this->hwDSI.DisplayRefresh();
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fc9d 	bl	8006610 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>
}
<<<<<<< HEAD
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bdb0      	pop	{r4, r5, r7, pc}
 8007ce0:	08009c10 	.word	0x08009c10
=======
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfc:	08009a1c 	.word	0x08009a1c
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08007ce4 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram7refreshEv>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::refresh( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  hwDSI.DisplayRefresh();
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fc8d 	bl	8006610 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::clear( void )
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  ptr = ptrStart;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	641a      	str	r2, [r3, #64]	@ 0x40
  __IO uint16_t *ptrEnd = ptr + Hsize*Vsize*sizeof(uint16_t);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8a1b      	ldrh	r3, [r3, #16]
 8007d16:	4619      	mov	r1, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8a5b      	ldrh	r3, [r3, #18]
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  while( ptr < ptrEnd )
 8007d26:	e007      	b.n	8007d38 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv+0x3a>
    *ptr++ = BackColor;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2c:	1c99      	adds	r1, r3, #2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6411      	str	r1, [r2, #64]	@ 0x40
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8007d36:	801a      	strh	r2, [r3, #0]
  while( ptr < ptrEnd )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d8f2      	bhi.n	8007d28 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv+0x2a>
}
 8007d42:	bf00      	nop
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram7setAreaEtttt>:
//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setArea( WORD x,
                                          WORD y,
                                          WORD w,
                                          WORD h )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4603      	mov	r3, r0
 8007d60:	817b      	strh	r3, [r7, #10]
 8007d62:	460b      	mov	r3, r1
 8007d64:	813b      	strh	r3, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  ax = x;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	897a      	ldrh	r2, [r7, #10]
 8007d6e:	865a      	strh	r2, [r3, #50]	@ 0x32
  ay = y;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	893a      	ldrh	r2, [r7, #8]
 8007d74:	869a      	strh	r2, [r3, #52]	@ 0x34
  aw = w;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	86da      	strh	r2, [r3, #54]	@ 0x36
  ah = h;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8b3a      	ldrh	r2, [r7, #24]
 8007d80:	871a      	strh	r2, [r3, #56]	@ 0x38
  xpos   = ax;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	875a      	strh	r2, [r3, #58]	@ 0x3a
  ypos   = ay*Hsize;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8a1b      	ldrh	r3, [r3, #16]
 8007d92:	fb12 f303 	smulbb	r3, r2, r3
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  offset = (DWORD)y*Hsize + x;
 8007d9c:	893b      	ldrh	r3, [r7, #8]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	8a12      	ldrh	r2, [r2, #16]
 8007da2:	fb03 f202 	mul.w	r2, r3, r2
 8007da6:	897b      	ldrh	r3, [r7, #10]
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	649a      	str	r2, [r3, #72]	@ 0x48

  ptr = ptrStart + offset;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	441a      	add	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEttt>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setPixel( WORD color,
                                           WORD x,
                                           WORD y )
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	4608      	mov	r0, r1
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4603      	mov	r3, r0
 8007dda:	817b      	strh	r3, [r7, #10]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	813b      	strh	r3, [r7, #8]
 8007de0:	4613      	mov	r3, r2
 8007de2:	80fb      	strh	r3, [r7, #6]
   ptr = ptrStart + (DWORD)y*Hsize + x;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	8a09      	ldrh	r1, [r1, #16]
 8007dee:	fb03 f101 	mul.w	r1, r3, r1
 8007df2:	893b      	ldrh	r3, [r7, #8]
 8007df4:	440b      	add	r3, r1
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	441a      	add	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  *ptr = color;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	897a      	ldrh	r2, [r7, #10]
 8007e04:	801a      	strh	r2, [r3, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEt>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setPixel( WORD color )
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	807b      	strh	r3, [r7, #2]
  *ptr++ = color;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e22:	1c99      	adds	r1, r3, #2
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6411      	str	r1, [r2, #64]	@ 0x40
 8007e28:	887a      	ldrh	r2, [r7, #2]
 8007e2a:	801a      	strh	r2, [r3, #0]
  xpos++;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007e30:	3301      	adds	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	875a      	strh	r2, [r3, #58]	@ 0x3a
  if( xpos >= ax+aw)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007e42:	4619      	mov	r1, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e48:	440b      	add	r3, r1
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	db18      	blt.n	8007e80 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEt+0x6e>
  {
    xpos = ax;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	875a      	strh	r2, [r3, #58]	@ 0x3a
    ypos++;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	879a      	strh	r2, [r3, #60]	@ 0x3c
    offset += Hsize;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	8a12      	ldrh	r2, [r2, #16]
 8007e6a:	441a      	add	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	649a      	str	r2, [r3, #72]	@ 0x48
    ptr = ptrStart + offset;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	441a      	add	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE>:
//
// Touch_FT6206
//
//*******************************************************************
//-------------------------------------------------------------------
Touch_FT6206::Touch_FT6206( I2Cmaster  &i2c,
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4611      	mov	r1, r2
 8007e98:	461a      	mov	r2, r3
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	80fb      	strh	r3, [r7, #6]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80bb      	strh	r3, [r7, #4]
: Touch( ReportID_Hw::Module::TOUCH_FT6206, 
         width, 
         height,
         orientation ),

  i2c( i2c, hwAddr )
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	88b9      	ldrh	r1, [r7, #4]
 8007ea6:	88fa      	ldrh	r2, [r7, #6]
 8007ea8:	7e3b      	ldrb	r3, [r7, #24]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	460b      	mov	r3, r1
 8007eae:	21c2      	movs	r1, #194	@ 0xc2
 8007eb0:	f7fc f846 	bl	8003f40 <_ZN9EmbSysLib2Hw5TouchC1EtttNS1_11OrientationE>
 8007eb4:	4a07      	ldr	r2, [pc, #28]	@ (8007ed4 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE+0x48>)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3314      	adds	r3, #20
 8007ebe:	2254      	movs	r2, #84	@ 0x54
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd fec4 	bl	8005c50 <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h>
{
}
<<<<<<< HEAD
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	08009bf8 	.word	0x08009bf8
=======
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	08009a04 	.word	0x08009a04
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08007ed8 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv>:

//-------------------------------------------------------------------
void Touch_FT6206::update( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  TscData tsc;

  i2c.read( (BYTE)0x03, &tsc );
<<<<<<< HEAD
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3314      	adds	r3, #20
 8007ee4:	f107 020c 	add.w	r2, r7, #12
 8007ee8:	2103      	movs	r1, #3
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fc0d 	bl	800870a <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>
=======
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3314      	adds	r3, #20
 8007f00:	f107 020c 	add.w	r2, r7, #12
 8007f04:	2103      	movs	r1, #3
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb41 	bl	800858e <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
  if( !i2c.isError() )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3314      	adds	r3, #20
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fd fec7 	bl	8005c88 <_ZN9EmbSysLib2Hw9I2Cmaster6Device7isErrorEv>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bf0c      	ite	eq
 8007f00:	2301      	moveq	r3, #1
 8007f02:	2300      	movne	r3, #0
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d025      	beq.n	8007f56 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x7e>
  {
    if( ( tsc.Xhigh & 0xC0 ) == 0x80 /* contact */ )
 8007f0a:	7b3b      	ldrb	r3, [r7, #12]
 8007f0c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f10:	2b80      	cmp	r3, #128	@ 0x80
 8007f12:	d11d      	bne.n	8007f50 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x78>
    {
      //!< \todo coordinate mapping and offsets depending on display orientation
      
      xPos = ( ((WORD)(tsc.Xhigh&0x0F)<<8) | tsc.Xlow );
 8007f14:	7b3b      	ldrb	r3, [r7, #12]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	b21b      	sxth	r3, r3
 8007f1a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f1e:	b21a      	sxth	r2, r3
 8007f20:	7b7b      	ldrb	r3, [r7, #13]
 8007f22:	b21b      	sxth	r3, r3
 8007f24:	4313      	orrs	r3, r2
 8007f26:	b21b      	sxth	r3, r3
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	809a      	strh	r2, [r3, #4]
      yPos = ( ((WORD)(tsc.Yhigh&0x0F)<<8) | tsc.Ylow );
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f38:	b21a      	sxth	r2, r3
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	b21b      	sxth	r3, r3
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b21b      	sxth	r3, r3
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	80da      	strh	r2, [r3, #6]
      isTouchedFlag = true;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	721a      	strb	r2, [r3, #8]
    else
    {
      isTouchedFlag = false;
    }
  }
}
 8007f4e:	e002      	b.n	8007f56 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x7e>
      isTouchedFlag = false;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	721a      	strb	r2, [r3, #8]
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <_ZN14GraphicsObjectC1Ev>:
#include "ReportHandler.h"
#include "config.h"

//*******************************************************************
// Basisklasse für grafische Objekte
class GraphicsObject {
<<<<<<< HEAD
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	4a04      	ldr	r2, [pc, #16]	@ (8007f7c <_ZN14GraphicsObjectC1Ev+0x1c>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	08009bec 	.word	0x08009bec
=======
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <_ZN14GraphicsObjectC1Ev+0x1c>)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	080099f8 	.word	0x080099f8
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08007f80 <_ZN5CrossC1Ei>:
class Cross : public GraphicsObject {
private:
    int boxNumber; // Variable zur Speicherung der Kastennummer
    Color::colorPredefined farbe = Color::Red;
public:
    Cross(int box) : boxNumber(box) {}
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff ffe7 	bl	8007f60 <_ZN14GraphicsObjectC1Ev>
 8007f92:	4a07      	ldr	r2, [pc, #28]	@ (8007fb0 <_ZN5CrossC1Ei+0x30>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007fa4:	811a      	strh	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4618      	mov	r0, r3
<<<<<<< HEAD
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	08009be0 	.word	0x08009be0
=======
 8007faa:	f7ff ffe7 	bl	8007f7c <_ZN14GraphicsObjectC1Ev>
 8007fae:	4a07      	ldr	r2, [pc, #28]	; (8007fcc <_ZN5CrossC1Ei+0x30>)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	605a      	str	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007fc0:	811a      	strh	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	080099ec 	.word	0x080099ec
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

08007fb4 <_ZNK5Cross4drawEv>:

    void draw() const override {
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b08d      	sub	sp, #52	@ 0x34
 8007fb8:	af04      	add	r7, sp, #16
 8007fba:	6078      	str	r0, [r7, #4]
        if (boxNumber < 0) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	db4f      	blt.n	8008064 <_ZNK5Cross4drawEv+0xb0>
            return; // Ungültige Kastennummer, beende die Funktion
        }
        // Berechne die Position des Kreuzes basierend auf der Kastennummer
        int row = boxNumber / 3;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	4a28      	ldr	r2, [pc, #160]	@ (800806c <_ZNK5Cross4drawEv+0xb8>)
 8007fca:	fb82 1203 	smull	r1, r2, r2, r3
 8007fce:	17db      	asrs	r3, r3, #31
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	61fb      	str	r3, [r7, #28]
        int col = boxNumber % 3;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	4b24      	ldr	r3, [pc, #144]	@ (800806c <_ZNK5Cross4drawEv+0xb8>)
 8007fda:	fb83 3102 	smull	r3, r1, r3, r2
 8007fde:	17d3      	asrs	r3, r2, #31
 8007fe0:	1ac9      	subs	r1, r1, r3
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	440b      	add	r3, r1
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	61bb      	str	r3, [r7, #24]
        int x1 = 160 + col * 160 + 20; // Horizontaler Offset + 20 Pixel
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	015b      	lsls	r3, r3, #5
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	617b      	str	r3, [r7, #20]
        int y1 = row * 160 + 20; // Vertikaler Offset + 20 Pixel
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	015b      	lsls	r3, r3, #5
 8008006:	3314      	adds	r3, #20
 8008008:	613b      	str	r3, [r7, #16]
        int x2 = x1 + 120; // Breite des Kastens - 40 Pixel
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	3378      	adds	r3, #120	@ 0x78
 800800e:	60fb      	str	r3, [r7, #12]
        int y2 = y1 + 120; // Höhe des Kastens - 40 Pixel
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3378      	adds	r3, #120	@ 0x78
 8008014:	60bb      	str	r3, [r7, #8]

        // Zeichne das Kreuz
        screenGraphic.drawLine(x1, y1, x2, y2, 3, farbe);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	b299      	uxth	r1, r3
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	b298      	uxth	r0, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	b29c      	uxth	r4, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	b29b      	uxth	r3, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	8912      	ldrh	r2, [r2, #8]
 800802a:	9202      	str	r2, [sp, #8]
 800802c:	2203      	movs	r2, #3
 800802e:	9201      	str	r2, [sp, #4]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4623      	mov	r3, r4
 8008034:	4602      	mov	r2, r0
 8008036:	480e      	ldr	r0, [pc, #56]	@ (8008070 <_ZNK5Cross4drawEv+0xbc>)
 8008038:	f7fc fe19 	bl	8004c6e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        screenGraphic.drawLine(x1, y2, x2, y1, 3, farbe);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	b299      	uxth	r1, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	b298      	uxth	r0, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	b29c      	uxth	r4, r3
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	b29b      	uxth	r3, r3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	8912      	ldrh	r2, [r2, #8]
 8008050:	9202      	str	r2, [sp, #8]
 8008052:	2203      	movs	r2, #3
 8008054:	9201      	str	r2, [sp, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4623      	mov	r3, r4
 800805a:	4602      	mov	r2, r0
 800805c:	4804      	ldr	r0, [pc, #16]	@ (8008070 <_ZNK5Cross4drawEv+0xbc>)
 800805e:	f7fc fe06 	bl	8004c6e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
 8008062:	e000      	b.n	8008066 <_ZNK5Cross4drawEv+0xb2>
            return; // Ungültige Kastennummer, beende die Funktion
 8008064:	bf00      	nop
    }
 8008066:	3724      	adds	r7, #36	@ 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd90      	pop	{r4, r7, pc}
 800806c:	55555556 	.word	0x55555556
 8008070:	2000038c 	.word	0x2000038c

08008074 <_ZNK5Cross12getBoxNumberEv>:

    int getBoxNumber() const {
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
        return boxNumber;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
    }
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <_ZN5Cross7setDarkEv>:

    void setDark() {
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
    	farbe = Color::DarkRed;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800809a:	811a      	strh	r2, [r3, #8]
    }
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

<<<<<<< HEAD
080080a8 <_ZN6CircleC1Ei>:
=======
080080ac <_ZN5Cross3delEv>:
    void del() {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
    	farbe = Color::Black;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	811a      	strh	r2, [r3, #8]
    	draw();
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3
    }
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <_ZN6CircleC1Ei>:
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
class Circle : public GraphicsObject {
private:
    int boxNumber; // Variable zur Speicherung der Kastennummer
    Color::colorPredefined farbe = Color::Blue;
public:
    Circle(int box) : boxNumber(box) {}
<<<<<<< HEAD
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff ff53 	bl	8007f60 <_ZN14GraphicsObjectC1Ev>
 80080ba:	4a07      	ldr	r2, [pc, #28]	@ (80080d8 <_ZN6CircleC1Ei+0x30>)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	221f      	movs	r2, #31
 80080ca:	811a      	strh	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	08009bd4 	.word	0x08009bd4

080080dc <_ZNK6Circle4drawEv>:

    void draw() const override {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
        if (boxNumber < 0) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	db30      	blt.n	800814e <_ZNK6Circle4drawEv+0x72>
=======
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff ff4f 	bl	8007f7c <_ZN14GraphicsObjectC1Ev>
 80080de:	4a07      	ldr	r2, [pc, #28]	; (80080fc <_ZN6CircleC1Ei+0x30>)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	221f      	movs	r2, #31
 80080ee:	811a      	strh	r2, [r3, #8]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	080099e0 	.word	0x080099e0

08008100 <_ZNK6Circle4drawEv>:

    void draw() const override {
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
        if (boxNumber < 0) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	db30      	blt.n	8008172 <_ZNK6Circle4drawEv+0x72>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
            return; // Ungültige Kastennummer, beende die Funktion
        }
        // Berechne die Position des Kreises basierend auf der Kastennummer
        int row = boxNumber / 3;
<<<<<<< HEAD
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4a19      	ldr	r2, [pc, #100]	@ (8008158 <_ZNK6Circle4drawEv+0x7c>)
 80080f2:	fb82 1203 	smull	r1, r2, r2, r3
 80080f6:	17db      	asrs	r3, r3, #31
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	617b      	str	r3, [r7, #20]
        int col = boxNumber % 3;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	4b15      	ldr	r3, [pc, #84]	@ (8008158 <_ZNK6Circle4drawEv+0x7c>)
 8008102:	fb83 3102 	smull	r3, r1, r3, r2
 8008106:	17d3      	asrs	r3, r2, #31
 8008108:	1ac9      	subs	r1, r1, r3
 800810a:	460b      	mov	r3, r1
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	440b      	add	r3, r1
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	613b      	str	r3, [r7, #16]
        int x = 160 + col * 160 + 80; // Horizontaler Offset + halbe Breite des Kastens
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	015b      	lsls	r3, r3, #5
 8008120:	3350      	adds	r3, #80	@ 0x50
 8008122:	60fb      	str	r3, [r7, #12]
        int y = row * 160 + 80; // Vertikaler Offset + halbe Höhe des Kastens
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	015b      	lsls	r3, r3, #5
 800812e:	3350      	adds	r3, #80	@ 0x50
 8008130:	60bb      	str	r3, [r7, #8]

        // Zeichne den Kreis
        screenGraphic.drawCircle(x, y, 50, 3, farbe); // Radius von 50 Pixel
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	b299      	uxth	r1, r3
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	b29a      	uxth	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	891b      	ldrh	r3, [r3, #8]
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	2303      	movs	r3, #3
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2332      	movs	r3, #50	@ 0x32
 8008146:	4805      	ldr	r0, [pc, #20]	@ (800815c <_ZNK6Circle4drawEv+0x80>)
 8008148:	f7fc fb94 	bl	8004874 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt>
 800814c:	e000      	b.n	8008150 <_ZNK6Circle4drawEv+0x74>
            return; // Ungültige Kastennummer, beende die Funktion
 800814e:	bf00      	nop
    }
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	55555556 	.word	0x55555556
 800815c:	2000038c 	.word	0x2000038c

08008160 <_ZNK6Circle12getBoxNumberEv>:
=======
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	4a19      	ldr	r2, [pc, #100]	; (800817c <_ZNK6Circle4drawEv+0x7c>)
 8008116:	fb82 1203 	smull	r1, r2, r2, r3
 800811a:	17db      	asrs	r3, r3, #31
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	617b      	str	r3, [r7, #20]
        int col = boxNumber % 3;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	4b15      	ldr	r3, [pc, #84]	; (800817c <_ZNK6Circle4drawEv+0x7c>)
 8008126:	fb83 3102 	smull	r3, r1, r3, r2
 800812a:	17d3      	asrs	r3, r2, #31
 800812c:	1ac9      	subs	r1, r1, r3
 800812e:	460b      	mov	r3, r1
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	440b      	add	r3, r1
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	613b      	str	r3, [r7, #16]
        int x = 160 + col * 160 + 80; // Horizontaler Offset + halbe Breite des Kastens
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	015b      	lsls	r3, r3, #5
 8008144:	3350      	adds	r3, #80	; 0x50
 8008146:	60fb      	str	r3, [r7, #12]
        int y = row * 160 + 80; // Vertikaler Offset + halbe Höhe des Kastens
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	015b      	lsls	r3, r3, #5
 8008152:	3350      	adds	r3, #80	; 0x50
 8008154:	60bb      	str	r3, [r7, #8]

        // Zeichne den Kreis
        screenGraphic.drawCircle(x, y, 50, 3, farbe); // Radius von 50 Pixel
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	b299      	uxth	r1, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	891b      	ldrh	r3, [r3, #8]
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	2303      	movs	r3, #3
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	2332      	movs	r3, #50	; 0x32
 800816a:	4805      	ldr	r0, [pc, #20]	; (8008180 <_ZNK6Circle4drawEv+0x80>)
 800816c:	f7fc fb90 	bl	8004890 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt>
 8008170:	e000      	b.n	8008174 <_ZNK6Circle4drawEv+0x74>
            return; // Ungültige Kastennummer, beende die Funktion
 8008172:	bf00      	nop
    }
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	55555556 	.word	0x55555556
 8008180:	2000038c 	.word	0x2000038c

08008184 <_ZN6Circle7setDarkEv>:
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

    int getBoxNumber() const {
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
        return boxNumber;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
    }
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <_ZN6Circle7setDarkEv>:

    void setDark() {
<<<<<<< HEAD
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    	farbe = Color::DarkBlue;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2210      	movs	r2, #16
 8008184:	811a      	strh	r2, [r3, #8]
    }
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <_ZNK4Grid4drawEv>:
=======
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    	farbe = Color::DarkBlue;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2210      	movs	r2, #16
 8008190:	811a      	strh	r2, [r3, #8]
    }
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <_ZN6Circle3delEv>:

    void del() {
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
    	farbe = Color::Black;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	811a      	strh	r2, [r3, #8]
    	draw();
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
    }
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <_ZNK4Grid4drawEv>:
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
};

// Klasse für das Zeichnen des Spielfelds
class Grid : public GraphicsObject {
public:
    void draw() const override {
<<<<<<< HEAD
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af04      	add	r7, sp, #16
 800819a:	6078      	str	r0, [r7, #4]
        for (int i = 1; i <= 2; i++) {
 800819c:	2301      	movs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e01e      	b.n	80081e0 <_ZNK4Grid4drawEv+0x4c>
            screenGraphic.drawLine(160, 159 * i, 640, 159 * i, 3, Color::White);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	0152      	lsls	r2, r2, #5
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	4619      	mov	r1, r3
 80081b8:	0089      	lsls	r1, r1, #2
 80081ba:	4419      	add	r1, r3
 80081bc:	0149      	lsls	r1, r1, #5
 80081be:	1acb      	subs	r3, r1, r3
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80081c6:	9102      	str	r1, [sp, #8]
 80081c8:	2103      	movs	r1, #3
 80081ca:	9101      	str	r1, [sp, #4]
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80081d2:	21a0      	movs	r1, #160	@ 0xa0
 80081d4:	481b      	ldr	r0, [pc, #108]	@ (8008244 <_ZNK4Grid4drawEv+0xb0>)
 80081d6:	f7fc fd4a 	bl	8004c6e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        for (int i = 1; i <= 2; i++) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	dddd      	ble.n	80081a2 <_ZNK4Grid4drawEv+0xe>
        }
        // Vertikale Linien zeichnen
        for (int i = 1; i <= 2; i++) {
 80081e6:	2301      	movs	r3, #1
 80081e8:	60bb      	str	r3, [r7, #8]
 80081ea:	e022      	b.n	8008232 <_ZNK4Grid4drawEv+0x9e>
            screenGraphic.drawLine(160 + 159 * i, 0, 160 + 159 * i, 480, 3, Color::White);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	0092      	lsls	r2, r2, #2
 80081f4:	441a      	add	r2, r3
 80081f6:	0152      	lsls	r2, r2, #5
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	33a0      	adds	r3, #160	@ 0xa0
 80081fe:	b299      	uxth	r1, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	b29b      	uxth	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	0092      	lsls	r2, r2, #2
 8008208:	441a      	add	r2, r3
 800820a:	0152      	lsls	r2, r2, #5
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	b29b      	uxth	r3, r3
 8008210:	33a0      	adds	r3, #160	@ 0xa0
 8008212:	b29b      	uxth	r3, r3
 8008214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008218:	9202      	str	r2, [sp, #8]
 800821a:	2203      	movs	r2, #3
 800821c:	9201      	str	r2, [sp, #4]
 800821e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008222:	9200      	str	r2, [sp, #0]
 8008224:	2200      	movs	r2, #0
 8008226:	4807      	ldr	r0, [pc, #28]	@ (8008244 <_ZNK4Grid4drawEv+0xb0>)
 8008228:	f7fc fd21 	bl	8004c6e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        for (int i = 1; i <= 2; i++) {
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	3301      	adds	r3, #1
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b02      	cmp	r3, #2
 8008236:	ddd9      	ble.n	80081ec <_ZNK4Grid4drawEv+0x58>
        }
    }
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	2000038c 	.word	0x2000038c

08008248 <_ZNK4Grid7getRectEii>:

    int getRect(int x, int y) const {
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
        // Berechne den Index des berührten Kastens basierend auf den Koordinaten (x, y)
        int row = y / 160;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a15      	ldr	r2, [pc, #84]	@ (80082ac <_ZNK4Grid7getRectEii+0x64>)
 8008258:	fb82 1203 	smull	r1, r2, r2, r3
 800825c:	1192      	asrs	r2, r2, #6
 800825e:	17db      	asrs	r3, r3, #31
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	617b      	str	r3, [r7, #20]
        int col = (x - 160) / 160; // Verschiebe die Hitboxen um einen Schritt nach rechts
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	3ba0      	subs	r3, #160	@ 0xa0
 8008268:	4a10      	ldr	r2, [pc, #64]	@ (80082ac <_ZNK4Grid7getRectEii+0x64>)
 800826a:	fb82 1203 	smull	r1, r2, r2, r3
 800826e:	1192      	asrs	r2, r2, #6
 8008270:	17db      	asrs	r3, r3, #31
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	613b      	str	r3, [r7, #16]

        // Überprüfe, ob die Koordinaten innerhalb des Spielfelds liegen
        if (row >= 0 && row <= 2 && col >= 0 && col <= 2) {
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db0f      	blt.n	800829c <_ZNK4Grid7getRectEii+0x54>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2b02      	cmp	r3, #2
 8008280:	dc0c      	bgt.n	800829c <_ZNK4Grid7getRectEii+0x54>
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	db09      	blt.n	800829c <_ZNK4Grid7getRectEii+0x54>
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b02      	cmp	r3, #2
 800828c:	dc06      	bgt.n	800829c <_ZNK4Grid7getRectEii+0x54>
            // Berechne den Index des Kastens und gib ihn zurück
            return row * 3 + col;
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4613      	mov	r3, r2
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	441a      	add	r2, r3
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	4413      	add	r3, r2
 800829a:	e001      	b.n	80082a0 <_ZNK4Grid7getRectEii+0x58>
        } else {
            // Wenn die Koordinaten außerhalb des Spielfelds liegen, gib -1 zurück, um einen Fehler zu kennzeichnen
            return -1;
 800829c:	f04f 33ff 	mov.w	r3, #4294967295
        }
    }
 80082a0:	4618      	mov	r0, r3
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	66666667 	.word	0x66666667

080082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>:
private:
=======
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af04      	add	r7, sp, #16
 80081c6:	6078      	str	r0, [r7, #4]
        for (int i = 1; i <= 2; i++) {
 80081c8:	2301      	movs	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e01e      	b.n	800820c <_ZNK4Grid4drawEv+0x4c>
            screenGraphic.drawLine(160, 159 * i, 640, 159 * i, 3, Color::White);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	441a      	add	r2, r3
 80081d8:	0152      	lsls	r2, r2, #5
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4619      	mov	r1, r3
 80081e4:	0089      	lsls	r1, r1, #2
 80081e6:	4419      	add	r1, r3
 80081e8:	0149      	lsls	r1, r1, #5
 80081ea:	1acb      	subs	r3, r1, r3
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081f2:	9102      	str	r1, [sp, #8]
 80081f4:	2103      	movs	r1, #3
 80081f6:	9101      	str	r1, [sp, #4]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80081fe:	21a0      	movs	r1, #160	; 0xa0
 8008200:	481b      	ldr	r0, [pc, #108]	; (8008270 <_ZNK4Grid4drawEv+0xb0>)
 8008202:	f7fc fd42 	bl	8004c8a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        for (int i = 1; i <= 2; i++) {
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b02      	cmp	r3, #2
 8008210:	dddd      	ble.n	80081ce <_ZNK4Grid4drawEv+0xe>
        }
        // Vertikale Linien zeichnen
        for (int i = 1; i <= 2; i++) {
 8008212:	2301      	movs	r3, #1
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	e022      	b.n	800825e <_ZNK4Grid4drawEv+0x9e>
            screenGraphic.drawLine(160 + 159 * i, 0, 160 + 159 * i, 480, 3, Color::White);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	0092      	lsls	r2, r2, #2
 8008220:	441a      	add	r2, r3
 8008222:	0152      	lsls	r2, r2, #5
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	b29b      	uxth	r3, r3
 8008228:	33a0      	adds	r3, #160	; 0xa0
 800822a:	b299      	uxth	r1, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	b29b      	uxth	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	441a      	add	r2, r3
 8008236:	0152      	lsls	r2, r2, #5
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	b29b      	uxth	r3, r3
 800823c:	33a0      	adds	r3, #160	; 0xa0
 800823e:	b29b      	uxth	r3, r3
 8008240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008244:	9202      	str	r2, [sp, #8]
 8008246:	2203      	movs	r2, #3
 8008248:	9201      	str	r2, [sp, #4]
 800824a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800824e:	9200      	str	r2, [sp, #0]
 8008250:	2200      	movs	r2, #0
 8008252:	4807      	ldr	r0, [pc, #28]	; (8008270 <_ZNK4Grid4drawEv+0xb0>)
 8008254:	f7fc fd19 	bl	8004c8a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        for (int i = 1; i <= 2; i++) {
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3301      	adds	r3, #1
 800825c:	60bb      	str	r3, [r7, #8]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b02      	cmp	r3, #2
 8008262:	ddd9      	ble.n	8008218 <_ZNK4Grid4drawEv+0x58>
        }
    }
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	2000038c 	.word	0x2000038c

08008274 <_ZNK4Grid7getRectEii>:

    int getRect(int x, int y) const {
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
        // Berechne den Index des berührten Kastens basierend auf den Koordinaten (x, y)
        int row = y / 160;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <_ZNK4Grid7getRectEii+0x64>)
 8008284:	fb82 1203 	smull	r1, r2, r2, r3
 8008288:	1192      	asrs	r2, r2, #6
 800828a:	17db      	asrs	r3, r3, #31
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	617b      	str	r3, [r7, #20]
        int col = (x - 160) / 160; // Verschiebe die Hitboxen um einen Schritt nach rechts
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	3ba0      	subs	r3, #160	; 0xa0
 8008294:	4a10      	ldr	r2, [pc, #64]	; (80082d8 <_ZNK4Grid7getRectEii+0x64>)
 8008296:	fb82 1203 	smull	r1, r2, r2, r3
 800829a:	1192      	asrs	r2, r2, #6
 800829c:	17db      	asrs	r3, r3, #31
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	613b      	str	r3, [r7, #16]

        // Überprüfe, ob die Koordinaten innerhalb des Spielfelds liegen
        if (row >= 0 && row <= 2 && col >= 0 && col <= 2) {
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	db0f      	blt.n	80082c8 <_ZNK4Grid7getRectEii+0x54>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	dc0c      	bgt.n	80082c8 <_ZNK4Grid7getRectEii+0x54>
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	db09      	blt.n	80082c8 <_ZNK4Grid7getRectEii+0x54>
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	dc06      	bgt.n	80082c8 <_ZNK4Grid7getRectEii+0x54>
            // Berechne den Index des Kastens und gib ihn zurück
            return row * 3 + col;
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4613      	mov	r3, r2
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	441a      	add	r2, r3
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	e001      	b.n	80082cc <_ZNK4Grid7getRectEii+0x58>
        } else {
            // Wenn die Koordinaten außerhalb des Spielfelds liegen, gib -1 zurück, um einen Fehler zu kennzeichnen
            return -1;
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
        }
    }
 80082cc:	4618      	mov	r0, r3
 80082ce:	371c      	adds	r7, #28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	66666667 	.word	0x66666667

080082dc <_ZN13TicTacToeGameC1Ev>:
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
    Cross* crosses[3]; // Array für Kreuze
    Circle* circles[3]; // Array für Kreise
    bool crossTurn; // Variable zur Speicherung, ob der Zug für Kreuze oder Kreise ist

    bool inArray(int element, const int (*array)[3]) const {
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
        for (int i = 0; i < 3; i++) {
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e00b      	b.n	80082da <_ZNK13TicTacToeGame7inArrayEiPA3_Ki+0x2a>
            if (element == (*array)[i]) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d101      	bne.n	80082d4 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki+0x24>
                return true;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e006      	b.n	80082e2 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki+0x32>
        for (int i = 0; i < 3; i++) {
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3301      	adds	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	ddf0      	ble.n	80082c2 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki+0x12>
            }
        }
        return false;
 80082e0:	2300      	movs	r3, #0
    }
 80082e2:	4618      	mov	r0, r3
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <_ZN13TicTacToeGameC1Ev>:


public:
    TicTacToeGame() : crossTurn(true) {
<<<<<<< HEAD
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	761a      	strb	r2, [r3, #24]
        // Initialisiere Arrays mit Nullpointern
        for (int i = 0; i < 3; ++i) {
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e00e      	b.n	8008320 <_ZN13TicTacToeGameC1Ev+0x32>
            crosses[i] = nullptr; // Leeres Feld für Kreuze
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	2100      	movs	r1, #0
 8008308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            circles[i] = nullptr; // Leeres Feld für Kreise
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3302      	adds	r3, #2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	2200      	movs	r2, #0
 8008318:	605a      	str	r2, [r3, #4]
        for (int i = 0; i < 3; ++i) {
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b02      	cmp	r3, #2
 8008324:	dded      	ble.n	8008302 <_ZN13TicTacToeGameC1Ev+0x14>
        }
    }
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <_ZN13TicTacToeGame7setMoveEi>:

    // Methode zum Setzen eines Kreuzes oder Kreises an einer bestimmten Position
    void setMove(int pos) {
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
        if (pos < 0) {
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	db7f      	blt.n	8008444 <_ZN13TicTacToeGame7setMoveEi+0x110>
            return;
        }
        if (crossTurn) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7e1b      	ldrb	r3, [r3, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d018      	beq.n	800837e <_ZN13TicTacToeGame7setMoveEi+0x4a>
            circles[2]->setDark();
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff ff11 	bl	8008178 <_ZN6Circle7setDarkEv>
        	crosses[2] = crosses[1];
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	609a      	str	r2, [r3, #8]
        	crosses[1] = crosses[0];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]
            crosses[0] = new Cross(pos); // Kreuz an der Position setzen
 8008366:	200c      	movs	r0, #12
 8008368:	f000 fbdf 	bl	8008b2a <_Znwj>
 800836c:	4603      	mov	r3, r0
 800836e:	461c      	mov	r4, r3
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff fe04 	bl	8007f80 <_ZN5CrossC1Ei>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	601c      	str	r4, [r3, #0]
 800837c:	e017      	b.n	80083ae <_ZN13TicTacToeGame7setMoveEi+0x7a>
        } else {
            crosses[2]->setDark();
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fe82 	bl	800808c <_ZN5Cross7setDarkEv>
        	circles[2] = circles[1];
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	615a      	str	r2, [r3, #20]
        	circles[1] = circles[0];
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	611a      	str	r2, [r3, #16]
            circles[0] = new Circle(pos); // Kreis an der Position setzen
 8008398:	200c      	movs	r0, #12
 800839a:	f000 fbc6 	bl	8008b2a <_Znwj>
 800839e:	4603      	mov	r3, r0
 80083a0:	461c      	mov	r4, r3
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7ff fe7f 	bl	80080a8 <_ZN6CircleC1Ei>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60dc      	str	r4, [r3, #12]
        }
        crossTurn = !crossTurn; // Wechsel zwischen Kreuz und Kreis
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7e1b      	ldrb	r3, [r3, #24]
 80083b2:	f083 0301 	eor.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	761a      	strb	r2, [r3, #24]
        if (crossTurn) {
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7e1b      	ldrb	r3, [r3, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <_ZN13TicTacToeGame7setMoveEi+0x9a>
        	uart.set("Now Cross dran!\r\n");
 80083c4:	4921      	ldr	r1, [pc, #132]	@ (800844c <_ZN13TicTacToeGame7setMoveEi+0x118>)
 80083c6:	4822      	ldr	r0, [pc, #136]	@ (8008450 <_ZN13TicTacToeGame7setMoveEi+0x11c>)
 80083c8:	f7fb ff3a 	bl	8004240 <_ZN9EmbSysLib2Hw4Uart3setEPKc>
 80083cc:	e003      	b.n	80083d6 <_ZN13TicTacToeGame7setMoveEi+0xa2>
        } else {
        	uart.set("Now Kreis dran!\r\n");
 80083ce:	4921      	ldr	r1, [pc, #132]	@ (8008454 <_ZN13TicTacToeGame7setMoveEi+0x120>)
 80083d0:	481f      	ldr	r0, [pc, #124]	@ (8008450 <_ZN13TicTacToeGame7setMoveEi+0x11c>)
 80083d2:	f7fb ff35 	bl	8004240 <_ZN9EmbSysLib2Hw4Uart3setEPKc>
        }
        screenGraphic.clear();
 80083d6:	4820      	ldr	r0, [pc, #128]	@ (8008458 <_ZN13TicTacToeGame7setMoveEi+0x124>)
 80083d8:	f7fc f8be 	bl	8004558 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>

        for (int i = 0; i < 3; ++i) {
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e02c      	b.n	800843c <_ZN13TicTacToeGame7setMoveEi+0x108>
        	if (crosses[i] != nullptr)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <_ZN13TicTacToeGame7setMoveEi+0xd2>
        		crosses[i]->draw();
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4608      	mov	r0, r1
 8008404:	4798      	blx	r3
        	if (circles[i] != nullptr)
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3302      	adds	r3, #2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00f      	beq.n	8008436 <_ZN13TicTacToeGame7setMoveEi+0x102>
        		circles[i]->draw();
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3302      	adds	r3, #2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	6859      	ldr	r1, [r3, #4]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3302      	adds	r3, #2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4608      	mov	r0, r1
 8008434:	4798      	blx	r3
        for (int i = 0; i < 3; ++i) {
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b02      	cmp	r3, #2
 8008440:	ddcf      	ble.n	80083e2 <_ZN13TicTacToeGame7setMoveEi+0xae>
 8008442:	e000      	b.n	8008446 <_ZN13TicTacToeGame7setMoveEi+0x112>
            return;
 8008444:	bf00      	nop
        }
    }
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bd90      	pop	{r4, r7, pc}
 800844c:	08009728 	.word	0x08009728
 8008450:	20000268 	.word	0x20000268
 8008454:	0800973c 	.word	0x0800973c
 8008458:	2000038c 	.word	0x2000038c

0800845c <_ZN13TicTacToeGame12getCrossTurnEv>:

    bool getCrossTurn() {
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
    	return crossTurn;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7e1b      	ldrb	r3, [r3, #24]
    }
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <_ZNK13TicTacToeGame11checkWinnerEv>:

    // Methode zur Überprüfung auf Gewinner
    bool checkWinner() const {
 8008474:	b580      	push	{r7, lr}
 8008476:	b09c      	sub	sp, #112	@ 0x70
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
           // Gewinnkombinationen
            const int winCombos[8][3] = {
 800847c:	4a51      	ldr	r2, [pc, #324]	@ (80085c4 <_ZNK13TicTacToeGame11checkWinnerEv+0x150>)
 800847e:	f107 030c 	add.w	r3, r7, #12
 8008482:	4611      	mov	r1, r2
 8008484:	2260      	movs	r2, #96	@ 0x60
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd10 	bl	8008eac <memcpy>
                {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // Vertikale Linien
                {0, 4, 8}, {2, 4, 6} // Diagonale Linien
            };

            // Überprüfe auf Gewinner in Kreuzen und Kreisen
            for (int i = 0; i < 8; ++i) {
 800848c:	2300      	movs	r3, #0
 800848e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008490:	e08e      	b.n	80085b0 <_ZNK13TicTacToeGame11checkWinnerEv+0x13c>
                //int a = winCombos[i][0], b = winCombos[i][1], c = winCombos[i][2];
                /*if ((crosses[a] && crosses[a]->getBoxNumber() == crosses[b]->getBoxNumber() && crosses[a]->getBoxNumber() == crosses[c]->getBoxNumber()) ||
                    (circles[a] && circles[a]->getBoxNumber() == circles[b]->getBoxNumber() && circles[a]->getBoxNumber() == circles[c]->getBoxNumber())) {
                    return true; // Gewinner gefunden
                }*/
                if (inArray(crosses[0]->getBoxNumber(), &winCombos[i]) && inArray(crosses[1]->getBoxNumber(), &winCombos[i]) && inArray(crosses[2]->getBoxNumber(), &winCombos[i])) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff fdec 	bl	8008074 <_ZNK5Cross12getBoxNumberEv>
 800849c:	f107 010c 	add.w	r1, r7, #12
 80084a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084a2:	4613      	mov	r3, r2
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	461a      	mov	r2, r3
 80084ae:	4601      	mov	r1, r0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fefd 	bl	80082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d02b      	beq.n	8008514 <_ZNK13TicTacToeGame11checkWinnerEv+0xa0>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fdd7 	bl	8008074 <_ZNK5Cross12getBoxNumberEv>
 80084c6:	f107 010c 	add.w	r1, r7, #12
 80084ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084cc:	4613      	mov	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	461a      	mov	r2, r3
 80084d8:	4601      	mov	r1, r0
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fee8 	bl	80082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d016      	beq.n	8008514 <_ZNK13TicTacToeGame11checkWinnerEv+0xa0>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fdc2 	bl	8008074 <_ZNK5Cross12getBoxNumberEv>
 80084f0:	f107 010c 	add.w	r1, r7, #12
 80084f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084f6:	4613      	mov	r3, r2
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	461a      	mov	r2, r3
 8008502:	4601      	mov	r1, r0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fed3 	bl	80082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <_ZNK13TicTacToeGame11checkWinnerEv+0xa0>
 8008510:	2301      	movs	r3, #1
 8008512:	e000      	b.n	8008516 <_ZNK13TicTacToeGame11checkWinnerEv+0xa2>
 8008514:	2300      	movs	r3, #0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <_ZNK13TicTacToeGame11checkWinnerEv+0xaa>
                	return true;
 800851a:	2301      	movs	r3, #1
 800851c:	e04d      	b.n	80085ba <_ZNK13TicTacToeGame11checkWinnerEv+0x146>
                }
                if (inArray(circles[0]->getBoxNumber(), &winCombos[i]) && inArray(circles[1]->getBoxNumber(), &winCombos[i]) && inArray(circles[2]->getBoxNumber(), &winCombos[i])) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fe1c 	bl	8008160 <_ZNK6Circle12getBoxNumberEv>
 8008528:	f107 010c 	add.w	r1, r7, #12
 800852c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	461a      	mov	r2, r3
 800853a:	4601      	mov	r1, r0
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff feb7 	bl	80082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02b      	beq.n	80085a0 <_ZNK13TicTacToeGame11checkWinnerEv+0x12c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fe07 	bl	8008160 <_ZNK6Circle12getBoxNumberEv>
 8008552:	f107 010c 	add.w	r1, r7, #12
 8008556:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008558:	4613      	mov	r3, r2
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	461a      	mov	r2, r3
 8008564:	4601      	mov	r1, r0
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fea2 	bl	80082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d016      	beq.n	80085a0 <_ZNK13TicTacToeGame11checkWinnerEv+0x12c>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fdf2 	bl	8008160 <_ZNK6Circle12getBoxNumberEv>
 800857c:	f107 010c 	add.w	r1, r7, #12
 8008580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008582:	4613      	mov	r3, r2
 8008584:	005b      	lsls	r3, r3, #1
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	440b      	add	r3, r1
 800858c:	461a      	mov	r2, r3
 800858e:	4601      	mov	r1, r0
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fe8d 	bl	80082b0 <_ZNK13TicTacToeGame7inArrayEiPA3_Ki>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <_ZNK13TicTacToeGame11checkWinnerEv+0x12c>
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <_ZNK13TicTacToeGame11checkWinnerEv+0x12e>
 80085a0:	2300      	movs	r3, #0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <_ZNK13TicTacToeGame11checkWinnerEv+0x136>
                    return true;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e007      	b.n	80085ba <_ZNK13TicTacToeGame11checkWinnerEv+0x146>
            for (int i = 0; i < 8; ++i) {
 80085aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ac:	3301      	adds	r3, #1
 80085ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085b2:	2b07      	cmp	r3, #7
 80085b4:	f77f af6d 	ble.w	8008492 <_ZNK13TicTacToeGame11checkWinnerEv+0x1e>
                }

            }

            return false; // Kein Gewinner gefunden
 80085b8:	2300      	movs	r3, #0
        }
 80085ba:	4618      	mov	r0, r3
 80085bc:	3770      	adds	r7, #112	@ 0x70
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	08009750 	.word	0x08009750

080085c8 <main>:
};

int main() {
 80085c8:	b5b0      	push	{r4, r5, r7, lr}
 80085ca:	b0aa      	sub	sp, #168	@ 0xa8
 80085cc:	af04      	add	r7, sp, #16
    // Instanzen von Grid und TicTacToeGame erstellen
    Grid ticTacToeGrid;
 80085ce:	4b3b      	ldr	r3, [pc, #236]	@ (80086bc <main+0xf4>)
 80085d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    TicTacToeGame game;
 80085d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fe88 	bl	80082ee <_ZN13TicTacToeGameC1Ev>

    while (!game.checkWinner()) {
 80085de:	e049      	b.n	8008674 <main+0xac>
            // Spielfeld zeichnen
            ticTacToeGrid.draw();
 80085e0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff fdd5 	bl	8008194 <_ZNK4Grid4drawEv>

            // Prüfen und anzeigen von Pointer-Ereignissen
            Pointer::Data point = pointer.get();
 80085ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80085ee:	4934      	ldr	r1, [pc, #208]	@ (80086c0 <main+0xf8>)
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fc fc89 	bl	8004f08 <_ZN9EmbSysLib3Dev7Pointer3getEv>

            if (point.flags) {
 80085f6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d034      	beq.n	8008668 <main+0xa0>
                if (point.flags & Pointer::Data::CTRL_DWN) {
 80085fe:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b00      	cmp	r3, #0
 8008608:	d02e      	beq.n	8008668 <main+0xa0>
                    char buffer[100]; // Puffer für den formatierten String
                     int pos = ticTacToeGrid.getRect(point.posX, point.posY);
 800860a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800860e:	4619      	mov	r1, r3
 8008610:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008614:	461a      	mov	r2, r3
 8008616:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fe14 	bl	8008248 <_ZNK4Grid7getRectEii>
 8008620:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

                     // Formatierung des Strings in den Puffer
                     snprintf(buffer, sizeof(buffer), "Pos:%4d,%4d Delta: %4d Event:0x%02x Field:%4d\r\n", point.posX, point.posY, point.delta, point.flags, pos);
 8008624:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008628:	461d      	mov	r5, r3
 800862a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800862e:	4619      	mov	r1, r3
 8008630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008632:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8008636:	4614      	mov	r4, r2
 8008638:	1d38      	adds	r0, r7, #4
 800863a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800863e:	9203      	str	r2, [sp, #12]
 8008640:	9402      	str	r4, [sp, #8]
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	9100      	str	r1, [sp, #0]
 8008646:	462b      	mov	r3, r5
 8008648:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <main+0xfc>)
 800864a:	2164      	movs	r1, #100	@ 0x64
 800864c:	f000 fb46 	bl	8008cdc <sniprintf>

                     // Übergeben des formatierten Strings an uart.set
                     uart.set(buffer);
 8008650:	1d3b      	adds	r3, r7, #4
 8008652:	4619      	mov	r1, r3
 8008654:	481c      	ldr	r0, [pc, #112]	@ (80086c8 <main+0x100>)
 8008656:	f7fb fdf3 	bl	8004240 <_ZN9EmbSysLib2Hw4Uart3setEPKc>
                    game.setMove(pos);
 800865a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800865e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fe66 	bl	8008334 <_ZN13TicTacToeGame7setMoveEi>
                }
            }

            // Bildschirm aktualisieren
            System::delayMilliSec(5);
 8008668:	2005      	movs	r0, #5
 800866a:	f7f8 f89d 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
            screenGraphic.refresh();
 800866e:	4817      	ldr	r0, [pc, #92]	@ (80086cc <main+0x104>)
 8008670:	f7fb ff83 	bl	800457a <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>
    while (!game.checkWinner()) {
 8008674:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fefb 	bl	8008474 <_ZNK13TicTacToeGame11checkWinnerEv>
 800867e:	4603      	mov	r3, r0
 8008680:	f083 0301 	eor.w	r3, r3, #1
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1aa      	bne.n	80085e0 <main+0x18>
        }

    ticTacToeGrid.draw();
 800868a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fd80 	bl	8008194 <_ZNK4Grid4drawEv>
    uart.set(game.getCrossTurn() ? "Circle is WINNER!" : "Cross is WINNER!\r\n\n");
 8008694:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fedf 	bl	800845c <_ZN13TicTacToeGame12getCrossTurnEv>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <main+0xe0>
 80086a4:	4b0a      	ldr	r3, [pc, #40]	@ (80086d0 <main+0x108>)
 80086a6:	e000      	b.n	80086aa <main+0xe2>
 80086a8:	4b0a      	ldr	r3, [pc, #40]	@ (80086d4 <main+0x10c>)
 80086aa:	4619      	mov	r1, r3
 80086ac:	4806      	ldr	r0, [pc, #24]	@ (80086c8 <main+0x100>)
 80086ae:	f7fb fdc7 	bl	8004240 <_ZN9EmbSysLib2Hw4Uart3setEPKc>
    return 0;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3798      	adds	r7, #152	@ 0x98
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bdb0      	pop	{r4, r5, r7, pc}
 80086bc:	08009bc8 	.word	0x08009bc8
 80086c0:	200003bc 	.word	0x200003bc
 80086c4:	080097b0 	.word	0x080097b0
 80086c8:	20000268 	.word	0x20000268
 80086cc:	2000038c 	.word	0x2000038c
 80086d0:	080097e0 	.word	0x080097e0
 80086d4:	080097f4 	.word	0x080097f4

080086d8 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  if( x > max )
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d901      	bls.n	80086f0 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x18>
    return( max );
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	e006      	b.n	80086fe <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  if( x < min )
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d201      	bcs.n	80086fc <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x24>
    return( min );
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	e000      	b.n	80086fe <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  return( x );
 80086fc:	68fb      	ldr	r3, [r7, #12]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>:
        void read( A addr, T *data )
 800870a:	b590      	push	{r4, r7, lr}
 800870c:	b087      	sub	sp, #28
 800870e:	af02      	add	r7, sp, #8
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	460b      	mov	r3, r1
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	72fb      	strb	r3, [r7, #11]
          isErrorFlag |= i2c.read( hwAddr, (BYTE *)&addr, sizeof(A), (BYTE *)data, sizeof(T) );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6858      	ldr	r0, [r3, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	681c      	ldr	r4, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	7a19      	ldrb	r1, [r3, #8]
 800872a:	f107 020b 	add.w	r2, r7, #11
 800872e:	2304      	movs	r3, #4
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	2301      	movs	r3, #1
 8008738:	47a0      	blx	r4
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	7a5b      	ldrb	r3, [r3, #9]
 8008742:	4313      	orrs	r3, r2
 8008744:	b2da      	uxtb	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	725a      	strb	r2, [r3, #9]
        }
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bd90      	pop	{r4, r7, pc}
	...

08008754 <_ZN15myReportHandlerD1Ev>:
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	4a05      	ldr	r2, [pc, #20]	@ (8008774 <_ZN15myReportHandlerD1Ev+0x20>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4618      	mov	r0, r3
 8008766:	f7fa fd9b 	bl	80032a0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	08009cc8 	.word	0x08009cc8

08008778 <_Z41__static_initialization_and_destruction_0ii>:
 8008778:	b580      	push	{r7, lr}
 800877a:	b0da      	sub	sp, #360	@ 0x168
 800877c:	af04      	add	r7, sp, #16
 800877e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008782:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8008786:	6018      	str	r0, [r3, #0]
 8008788:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800878c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8008790:	6019      	str	r1, [r3, #0]
 8008792:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008796:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	f040 8121 	bne.w	80089e4 <_Z41__static_initialization_and_destruction_0ii+0x26c>
 80087a2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80087a6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80087b0:	4293      	cmp	r3, r2
 80087b2:	f040 8117 	bne.w	80089e4 <_Z41__static_initialization_and_destruction_0ii+0x26c>
} report;
 80087b6:	4897      	ldr	r0, [pc, #604]	@ (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80087b8:	f7fe f8ac 	bl	8006914 <_ZN15myReportHandlerC1Ev>
=======
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	761a      	strb	r2, [r3, #24]
        // Initialisiere Arrays mit Nullpointern
        for (int i = 0; i < 3; ++i) {
 80082ea:	2300      	movs	r3, #0
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e00e      	b.n	800830e <_ZN13TicTacToeGameC1Ev+0x32>
            crosses[i] = nullptr; // Leeres Feld für Kreuze
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	2100      	movs	r1, #0
 80082f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            circles[i] = nullptr; // Leeres Feld für Kreise
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3302      	adds	r3, #2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	2200      	movs	r2, #0
 8008306:	605a      	str	r2, [r3, #4]
        for (int i = 0; i < 3; ++i) {
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b02      	cmp	r3, #2
 8008312:	dded      	ble.n	80082f0 <_ZN13TicTacToeGameC1Ev+0x14>
        }
    }
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <_ZN13TicTacToeGame7setMoveEi>:

    // Methode zum Setzen eines Kreuzes oder Kreises an einer bestimmten Position
    void setMove(int pos) {
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
        if (pos < 0) {
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f2c0 808f 	blt.w	8008454 <_ZN13TicTacToeGame7setMoveEi+0x130>
            return;
        }
        if (crossTurn) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	7e1b      	ldrb	r3, [r3, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d021      	beq.n	8008382 <_ZN13TicTacToeGame7setMoveEi+0x5e>
            circles[2]->setDark();
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff ff1e 	bl	8008184 <_ZN6Circle7setDarkEv>
        	if (crosses[2] != nullptr)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <_ZN13TicTacToeGame7setMoveEi+0x36>
        		crosses[2]->del();
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fea9 	bl	80080ac <_ZN5Cross3delEv>
        	crosses[2] = crosses[1];
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	609a      	str	r2, [r3, #8]
        	crosses[1] = crosses[0];
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]
            crosses[0] = new Cross(pos); // Kreuz an der Position setzen
 800836a:	200c      	movs	r0, #12
 800836c:	f000 fb1f 	bl	80089ae <_Znwj>
 8008370:	4603      	mov	r3, r0
 8008372:	461c      	mov	r4, r3
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fe10 	bl	8007f9c <_ZN5CrossC1Ei>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601c      	str	r4, [r3, #0]
 8008380:	e020      	b.n	80083c4 <_ZN13TicTacToeGame7setMoveEi+0xa0>
        } else {
            crosses[2]->setDark();
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff fe82 	bl	8008090 <_ZN5Cross7setDarkEv>
            if (circles[2] != nullptr)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <_ZN13TicTacToeGame7setMoveEi+0x7a>
            	circles[2]->del();
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff ff00 	bl	800819e <_ZN6Circle3delEv>
            circles[2] = circles[1];
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	615a      	str	r2, [r3, #20]
        	circles[1] = circles[0];
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	611a      	str	r2, [r3, #16]
            circles[0] = new Circle(pos); // Kreis an der Position setzen
 80083ae:	200c      	movs	r0, #12
 80083b0:	f000 fafd 	bl	80089ae <_Znwj>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461c      	mov	r4, r3
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff fe86 	bl	80080cc <_ZN6CircleC1Ei>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60dc      	str	r4, [r3, #12]
        }
        crossTurn = !crossTurn; // Wechsel zwischen Kreuz und Kreis
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7e1b      	ldrb	r3, [r3, #24]
 80083c8:	f083 0301 	eor.w	r3, r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	761a      	strb	r2, [r3, #24]
        if (crossTurn) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7e1b      	ldrb	r3, [r3, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <_ZN13TicTacToeGame7setMoveEi+0xc0>
        	uart.set("Now Cross dran!\r\n");
 80083da:	4920      	ldr	r1, [pc, #128]	; (800845c <_ZN13TicTacToeGame7setMoveEi+0x138>)
 80083dc:	4820      	ldr	r0, [pc, #128]	; (8008460 <_ZN13TicTacToeGame7setMoveEi+0x13c>)
 80083de:	f7fb ff3d 	bl	800425c <_ZN9EmbSysLib2Hw4Uart3setEPKc>
 80083e2:	e003      	b.n	80083ec <_ZN13TicTacToeGame7setMoveEi+0xc8>
        } else {
        	uart.set("Now Kreis dran!\r\n");
 80083e4:	491f      	ldr	r1, [pc, #124]	; (8008464 <_ZN13TicTacToeGame7setMoveEi+0x140>)
 80083e6:	481e      	ldr	r0, [pc, #120]	; (8008460 <_ZN13TicTacToeGame7setMoveEi+0x13c>)
 80083e8:	f7fb ff38 	bl	800425c <_ZN9EmbSysLib2Hw4Uart3setEPKc>
        }

        for (int i = 0; i < 3; ++i) {
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e02c      	b.n	800844c <_ZN13TicTacToeGame7setMoveEi+0x128>
        	if (crosses[i] != nullptr)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <_ZN13TicTacToeGame7setMoveEi+0xf2>
        		crosses[i]->draw();
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4608      	mov	r0, r1
 8008414:	4798      	blx	r3
        	if (circles[i] != nullptr)
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3302      	adds	r3, #2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00f      	beq.n	8008446 <_ZN13TicTacToeGame7setMoveEi+0x122>
        		circles[i]->draw();
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3302      	adds	r3, #2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	6859      	ldr	r1, [r3, #4]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3302      	adds	r3, #2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4608      	mov	r0, r1
 8008444:	4798      	blx	r3
        for (int i = 0; i < 3; ++i) {
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b02      	cmp	r3, #2
 8008450:	ddcf      	ble.n	80083f2 <_ZN13TicTacToeGame7setMoveEi+0xce>
 8008452:	e000      	b.n	8008456 <_ZN13TicTacToeGame7setMoveEi+0x132>
            return;
 8008454:	bf00      	nop
        }
    }
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bd90      	pop	{r4, r7, pc}
 800845c:	080095b4 	.word	0x080095b4
 8008460:	20000268 	.word	0x20000268
 8008464:	080095c8 	.word	0x080095c8

08008468 <_ZNK13TicTacToeGame11checkWinnerEv>:

    // Methode zur Überprüfung auf Gewinner
    bool checkWinner() const {
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]

        return false; // Kein Gewinner gefunden
 8008470:	2300      	movs	r3, #0
    }
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
	...

08008480 <main>:
};

int main() {
 8008480:	b5b0      	push	{r4, r5, r7, lr}
 8008482:	b0aa      	sub	sp, #168	; 0xa8
 8008484:	af04      	add	r7, sp, #16
    // Instanzen von Grid und TicTacToeGame erstellen
    Grid ticTacToeGrid;
 8008486:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <main+0xc4>)
 8008488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    TicTacToeGame game;
 800848c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff ff23 	bl	80082dc <_ZN13TicTacToeGameC1Ev>

    while (1) {
        // Spielfeld zeichnen
        ticTacToeGrid.draw();
 8008496:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fe90 	bl	80081c0 <_ZNK4Grid4drawEv>

        // Prüfen und anzeigen von Pointer-Ereignissen
        Pointer::Data point = pointer.get();
 80084a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80084a4:	4928      	ldr	r1, [pc, #160]	; (8008548 <main+0xc8>)
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fc fd3c 	bl	8004f24 <_ZN9EmbSysLib3Dev7Pointer3getEv>

        if (point.flags) {
 80084ac:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d034      	beq.n	800851e <main+0x9e>
            if (point.flags & Pointer::Data::CTRL_DWN) {
 80084b4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d02e      	beq.n	800851e <main+0x9e>
                char buffer[100]; // Puffer für den formatierten String
                 int pos = ticTacToeGrid.getRect(point.posX, point.posY);
 80084c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80084c4:	4619      	mov	r1, r3
 80084c6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80084ca:	461a      	mov	r2, r3
 80084cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff fecf 	bl	8008274 <_ZNK4Grid7getRectEii>
 80084d6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

                 // Formatierung des Strings in den Puffer
                 snprintf(buffer, sizeof(buffer), "Pos:%4d,%4d Delta: %4d Event:0x%02x Field:%4d\r\n", point.posX, point.posY, point.delta, point.flags, pos);
 80084da:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80084de:	461d      	mov	r5, r3
 80084e0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80084e4:	4619      	mov	r1, r3
 80084e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80084ec:	4614      	mov	r4, r2
 80084ee:	1d38      	adds	r0, r7, #4
 80084f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084f4:	9203      	str	r2, [sp, #12]
 80084f6:	9402      	str	r4, [sp, #8]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	9100      	str	r1, [sp, #0]
 80084fc:	462b      	mov	r3, r5
 80084fe:	4a13      	ldr	r2, [pc, #76]	; (800854c <main+0xcc>)
 8008500:	2164      	movs	r1, #100	; 0x64
 8008502:	f000 fb2b 	bl	8008b5c <sniprintf>

                 // Übergeben des formatierten Strings an uart.set
                 uart.set(buffer);
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4811      	ldr	r0, [pc, #68]	; (8008550 <main+0xd0>)
 800850c:	f7fb fea6 	bl	800425c <_ZN9EmbSysLib2Hw4Uart3setEPKc>
                game.setMove(pos);
 8008510:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008514:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff ff03 	bl	8008324 <_ZN13TicTacToeGame7setMoveEi>
            }
        }
        if (game.checkWinner()) {
 800851e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ffa0 	bl	8008468 <_ZNK13TicTacToeGame11checkWinnerEv>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <main+0xb6>
        	uart.set("WINNER!");
 800852e:	4909      	ldr	r1, [pc, #36]	; (8008554 <main+0xd4>)
 8008530:	4807      	ldr	r0, [pc, #28]	; (8008550 <main+0xd0>)
 8008532:	f7fb fe93 	bl	800425c <_ZN9EmbSysLib2Hw4Uart3setEPKc>
        }
        System::delayMilliSec(5);
 8008536:	2005      	movs	r0, #5
 8008538:	f7f8 f936 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
        screenGraphic.refresh();
 800853c:	4806      	ldr	r0, [pc, #24]	; (8008558 <main+0xd8>)
 800853e:	f7fc f82a 	bl	8004596 <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>
    }
 8008542:	e7a8      	b.n	8008496 <main+0x16>
 8008544:	080099d4 	.word	0x080099d4
 8008548:	200003bc 	.word	0x200003bc
 800854c:	080095dc 	.word	0x080095dc
 8008550:	20000268 	.word	0x20000268
 8008554:	0800960c 	.word	0x0800960c
 8008558:	2000038c 	.word	0x2000038c

0800855c <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  if( x > max )
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d901      	bls.n	8008574 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x18>
    return( max );
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	e006      	b.n	8008582 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  if( x < min )
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	429a      	cmp	r2, r3
 800857a:	d201      	bcs.n	8008580 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x24>
    return( min );
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	e000      	b.n	8008582 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  return( x );
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>:
        void read( A addr, T *data )
 800858e:	b590      	push	{r4, r7, lr}
 8008590:	b087      	sub	sp, #28
 8008592:	af02      	add	r7, sp, #8
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	460b      	mov	r3, r1
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	72fb      	strb	r3, [r7, #11]
          isErrorFlag |= i2c.read( hwAddr, (BYTE *)&addr, sizeof(A), (BYTE *)data, sizeof(T) );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6858      	ldr	r0, [r3, #4]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3304      	adds	r3, #4
 80085a8:	681c      	ldr	r4, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	7a19      	ldrb	r1, [r3, #8]
 80085ae:	f107 020b 	add.w	r2, r7, #11
 80085b2:	2304      	movs	r3, #4
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	2301      	movs	r3, #1
 80085bc:	47a0      	blx	r4
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	7a5b      	ldrb	r3, [r3, #9]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	725a      	strb	r2, [r3, #9]
        }
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd90      	pop	{r4, r7, pc}
	...

080085d8 <_ZN15myReportHandlerD1Ev>:
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	4a05      	ldr	r2, [pc, #20]	; (80085f8 <_ZN15myReportHandlerD1Ev+0x20>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fa fe61 	bl	80032b0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	08009ad4 	.word	0x08009ad4

080085fc <_Z41__static_initialization_and_destruction_0ii>:

    return 0;
}
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b0da      	sub	sp, #360	; 0x168
 8008600:	af04      	add	r7, sp, #16
 8008602:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008606:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800860a:	6018      	str	r0, [r3, #0]
 800860c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008610:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008614:	6019      	str	r1, [r3, #0]
 8008616:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800861a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	f040 8121 	bne.w	8008868 <_Z41__static_initialization_and_destruction_0ii+0x26c>
 8008626:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800862a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008634:	4293      	cmp	r3, r2
 8008636:	f040 8117 	bne.w	8008868 <_Z41__static_initialization_and_destruction_0ii+0x26c>
} report;
 800863a:	4897      	ldr	r0, [pc, #604]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800863c:	f7fe f978 	bl	8006930 <_ZN15myReportHandlerC1Ev>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
};

//-------------------------------------------------------------------
// Port
//-------------------------------------------------------------------
Port_Mcu   portA( Port_Mcu::PA );
<<<<<<< HEAD
 80087bc:	2100      	movs	r1, #0
 80087be:	4896      	ldr	r0, [pc, #600]	@ (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80087c0:	f7f8 fe70 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portC( Port_Mcu::PC );
 80087c4:	2102      	movs	r1, #2
 80087c6:	4895      	ldr	r0, [pc, #596]	@ (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80087c8:	f7f8 fe6c 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portF( Port_Mcu::PF );
 80087cc:	2105      	movs	r1, #5
 80087ce:	4894      	ldr	r0, [pc, #592]	@ (8008a20 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80087d0:	f7f8 fe68 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portJ( Port_Mcu::PJ );
 80087d4:	2109      	movs	r1, #9
 80087d6:	4893      	ldr	r0, [pc, #588]	@ (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80087d8:	f7f8 fe64 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
=======
 8008640:	2100      	movs	r1, #0
 8008642:	4896      	ldr	r0, [pc, #600]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008644:	f7f8 ff2e 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portC( Port_Mcu::PC );
 8008648:	2102      	movs	r1, #2
 800864a:	4895      	ldr	r0, [pc, #596]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800864c:	f7f8 ff2a 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portF( Port_Mcu::PF );
 8008650:	2105      	movs	r1, #5
 8008652:	4894      	ldr	r0, [pc, #592]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008654:	f7f8 ff26 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portJ( Port_Mcu::PJ );
 8008658:	2109      	movs	r1, #9
 800865a:	4893      	ldr	r0, [pc, #588]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800865c:	f7f8 ff22 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a


//-------------------------------------------------------------------
// Timer
//-------------------------------------------------------------------
Timer_Mcu  timer( Timer_Mcu::TIM_11, 100L/*us*/ );
<<<<<<< HEAD
 80087dc:	2264      	movs	r2, #100	@ 0x64
 80087de:	210a      	movs	r1, #10
 80087e0:	4891      	ldr	r0, [pc, #580]	@ (8008a28 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80087e2:	f7f8 fff9 	bl	80017d8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>

TaskManager taskManager( timer );
 80087e6:	4990      	ldr	r1, [pc, #576]	@ (8008a28 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80087e8:	4890      	ldr	r0, [pc, #576]	@ (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80087ea:	f7fe f80d 	bl	8006808 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>
=======
 8008660:	2264      	movs	r2, #100	; 0x64
 8008662:	210a      	movs	r1, #10
 8008664:	4891      	ldr	r0, [pc, #580]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008666:	f7f9 f8b7 	bl	80017d8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>

TaskManager taskManager( timer );
 800866a:	4990      	ldr	r1, [pc, #576]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800866c:	4890      	ldr	r0, [pc, #576]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800866e:	f7fe f8db 	bl	8006828 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

//-------------------------------------------------------------------
// I2C
//-------------------------------------------------------------------
I2Cmaster_Mcu i2cBusTouch( I2Cmaster_Mcu::I2C_4, 400/*kHz*/ );
<<<<<<< HEAD
 80087ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80087f2:	2104      	movs	r1, #4
 80087f4:	488e      	ldr	r0, [pc, #568]	@ (8008a30 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80087f6:	f7f8 fb29 	bl	8000e4c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>
=======
 8008672:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008676:	2104      	movs	r1, #4
 8008678:	488e      	ldr	r0, [pc, #568]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800867a:	f7f8 fbe7 	bl	8000e4c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

//-------------------------------------------------------------------
// UART
//-------------------------------------------------------------------
Uart_Mcu   uart ( Uart_Mcu::USART_1, 9600, Uart_Mcu::NONE, 100, 100 );
<<<<<<< HEAD
 80087fa:	2364      	movs	r3, #100	@ 0x64
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	2364      	movs	r3, #100	@ 0x64
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008808:	2101      	movs	r1, #1
 800880a:	488a      	ldr	r0, [pc, #552]	@ (8008a34 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800880c:	f7f9 fcac 	bl	8002168 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>

Terminal   terminal( uart, 255,255,"# +" );
 8008810:	4b89      	ldr	r3, [pc, #548]	@ (8008a38 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	4b89      	ldr	r3, [pc, #548]	@ (8008a3c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	23ff      	movs	r3, #255	@ 0xff
 800881a:	22ff      	movs	r2, #255	@ 0xff
 800881c:	4985      	ldr	r1, [pc, #532]	@ (8008a34 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800881e:	4888      	ldr	r0, [pc, #544]	@ (8008a40 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008820:	f7fc fc54 	bl	80050cc <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>
=======
 800867e:	2364      	movs	r3, #100	; 0x64
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	2364      	movs	r3, #100	; 0x64
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800868c:	2101      	movs	r1, #1
 800868e:	488a      	ldr	r0, [pc, #552]	; (80088b8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008690:	f7f9 fd70 	bl	8002174 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>

Terminal   terminal( uart, 255,255,"# +" );
 8008694:	4b89      	ldr	r3, [pc, #548]	; (80088bc <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	4b89      	ldr	r3, [pc, #548]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	23ff      	movs	r3, #255	; 0xff
 800869e:	22ff      	movs	r2, #255	; 0xff
 80086a0:	4985      	ldr	r1, [pc, #532]	; (80088b8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80086a2:	4888      	ldr	r0, [pc, #544]	; (80088c4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80086a4:	f7fc fd20 	bl	80050e8 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

//-------------------------------------------------------------------
// Display
//-------------------------------------------------------------------
Memory_Flash image( 10 ); // Size: 256k
<<<<<<< HEAD
 8008824:	2200      	movs	r2, #0
 8008826:	210a      	movs	r1, #10
 8008828:	4886      	ldr	r0, [pc, #536]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800882a:	f7f8 fccd 	bl	80011c8 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh>
Font    fontFont_10x20      ( MemoryImage( image, "Font_10x20"     ).getPtr() );
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4a85      	ldr	r2, [pc, #532]	@ (8008a48 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8008834:	4983      	ldr	r1, [pc, #524]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd fefe 	bl	8006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	4618      	mov	r0, r3
 8008842:	f7fd ffb3 	bl	80067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008846:	4603      	mov	r3, r0
 8008848:	4619      	mov	r1, r3
 800884a:	4880      	ldr	r0, [pc, #512]	@ (8008a4c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800884c:	f7fa fd42 	bl	80032d4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_16x24      ( MemoryImage( image, "Font_16x24"     ).getPtr() );
 8008850:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008854:	4a7e      	ldr	r2, [pc, #504]	@ (8008a50 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8008856:	497b      	ldr	r1, [pc, #492]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008858:	4618      	mov	r0, r3
 800885a:	f7fd feed 	bl	8006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 800885e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008862:	4618      	mov	r0, r3
 8008864:	f7fd ffa2 	bl	80067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008868:	4603      	mov	r3, r0
 800886a:	4619      	mov	r1, r3
 800886c:	4879      	ldr	r0, [pc, #484]	@ (8008a54 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800886e:	f7fa fd31 	bl	80032d4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_8x12       ( MemoryImage( image, "Font_8x12"      ).getPtr() );
 8008872:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8008876:	4a78      	ldr	r2, [pc, #480]	@ (8008a58 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8008878:	4972      	ldr	r1, [pc, #456]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800887a:	4618      	mov	r0, r3
 800887c:	f7fd fedc 	bl	8006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 8008880:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8008884:	4618      	mov	r0, r3
 8008886:	f7fd ff91 	bl	80067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 800888a:	4603      	mov	r3, r0
 800888c:	4619      	mov	r1, r3
 800888e:	4873      	ldr	r0, [pc, #460]	@ (8008a5c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008890:	f7fa fd20 	bl	80032d4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_8x8        ( MemoryImage( image, "Font_8x8"       ).getPtr() );
 8008894:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008898:	4a71      	ldr	r2, [pc, #452]	@ (8008a60 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800889a:	496a      	ldr	r1, [pc, #424]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800889c:	4618      	mov	r0, r3
 800889e:	f7fd fecb 	bl	8006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80088a2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fd ff80 	bl	80067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80088ac:	4603      	mov	r3, r0
 80088ae:	4619      	mov	r1, r3
 80088b0:	486c      	ldr	r0, [pc, #432]	@ (8008a64 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80088b2:	f7fa fd0f 	bl	80032d4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Bitmap  bitmapBitmap_320x240( MemoryImage( image, "Bitmap_320x240" ).getPtr() );
 80088b6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80088ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80088bc:	4961      	ldr	r1, [pc, #388]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fd feba 	bl	8006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80088c4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fd ff6f 	bl	80067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80088ce:	4603      	mov	r3, r0
 80088d0:	4619      	mov	r1, r3
 80088d2:	4866      	ldr	r0, [pc, #408]	@ (8008a6c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80088d4:	f7fa fd8a 	bl	80033ec <_ZN9EmbSysLib2Hw6BitmapC1EPKh>
Bitmap  bitmapBitmap_32x32  ( MemoryImage( image, "Bitmap_32x32"   ).getPtr() );
 80088d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80088dc:	4a64      	ldr	r2, [pc, #400]	@ (8008a70 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80088de:	4959      	ldr	r1, [pc, #356]	@ (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fd fea9 	bl	8006638 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80088e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd ff5e 	bl	80067ac <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80088f0:	4603      	mov	r3, r0
 80088f2:	4619      	mov	r1, r3
 80088f4:	485f      	ldr	r0, [pc, #380]	@ (8008a74 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80088f6:	f7fa fd79 	bl	80033ec <_ZN9EmbSysLib2Hw6BitmapC1EPKh>

Port::Pin     lcdResetPin( portJ, 15 );
 80088fa:	220f      	movs	r2, #15
 80088fc:	4949      	ldr	r1, [pc, #292]	@ (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80088fe:	485e      	ldr	r0, [pc, #376]	@ (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008900:	f7fb fa2e 	bl	8003d60 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
Fmc_Mcu       fmc        ( Fmc_Mcu::SDRAM_Bank1 );  
 8008904:	2200      	movs	r2, #0
 8008906:	2102      	movs	r1, #2
 8008908:	485c      	ldr	r0, [pc, #368]	@ (8008a7c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800890a:	f7fd faaf 	bl	8005e6c <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>
Dsi_Mcu       hwDSI      ( fmc.startAddr() );
 800890e:	485b      	ldr	r0, [pc, #364]	@ (8008a7c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008910:	f7fd fbfc 	bl	800610c <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>
 8008914:	4603      	mov	r3, r0
 8008916:	4619      	mov	r1, r3
 8008918:	4859      	ldr	r0, [pc, #356]	@ (8008a80 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800891a:	f7fd fccb 	bl	80062b4 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>
=======
 80086a8:	2200      	movs	r2, #0
 80086aa:	210a      	movs	r1, #10
 80086ac:	4886      	ldr	r0, [pc, #536]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80086ae:	f7f8 fd8b 	bl	80011c8 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh>
Font    fontFont_10x20      ( MemoryImage( image, "Font_10x20"     ).getPtr() );
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	4a85      	ldr	r2, [pc, #532]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80086b8:	4983      	ldr	r1, [pc, #524]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fd ffcc 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe f881 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4619      	mov	r1, r3
 80086ce:	4880      	ldr	r0, [pc, #512]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80086d0:	f7fa fe08 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_16x24      ( MemoryImage( image, "Font_16x24"     ).getPtr() );
 80086d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086d8:	4a7e      	ldr	r2, [pc, #504]	; (80088d4 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80086da:	497b      	ldr	r1, [pc, #492]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fd ffbb 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80086e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe f870 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80086ec:	4603      	mov	r3, r0
 80086ee:	4619      	mov	r1, r3
 80086f0:	4879      	ldr	r0, [pc, #484]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80086f2:	f7fa fdf7 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_8x12       ( MemoryImage( image, "Font_8x12"      ).getPtr() );
 80086f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80086fa:	4a78      	ldr	r2, [pc, #480]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80086fc:	4972      	ldr	r1, [pc, #456]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fd ffaa 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 8008704:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe f85f 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 800870e:	4603      	mov	r3, r0
 8008710:	4619      	mov	r1, r3
 8008712:	4873      	ldr	r0, [pc, #460]	; (80088e0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008714:	f7fa fde6 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_8x8        ( MemoryImage( image, "Font_8x8"       ).getPtr() );
 8008718:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800871c:	4a71      	ldr	r2, [pc, #452]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800871e:	496a      	ldr	r1, [pc, #424]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd ff99 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 8008726:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe f84e 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008730:	4603      	mov	r3, r0
 8008732:	4619      	mov	r1, r3
 8008734:	486c      	ldr	r0, [pc, #432]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008736:	f7fa fdd5 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Bitmap  bitmapBitmap_320x240( MemoryImage( image, "Bitmap_320x240" ).getPtr() );
 800873a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800873e:	4a6b      	ldr	r2, [pc, #428]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008740:	4961      	ldr	r1, [pc, #388]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008742:	4618      	mov	r0, r3
 8008744:	f7fd ff88 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 8008748:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe f83d 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008752:	4603      	mov	r3, r0
 8008754:	4619      	mov	r1, r3
 8008756:	4866      	ldr	r0, [pc, #408]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8008758:	f7fa fe51 	bl	80033fe <_ZN9EmbSysLib2Hw6BitmapC1EPKh>
Bitmap  bitmapBitmap_32x32  ( MemoryImage( image, "Bitmap_32x32"   ).getPtr() );
 800875c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008760:	4a64      	ldr	r2, [pc, #400]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008762:	4959      	ldr	r1, [pc, #356]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd ff77 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 800876a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe f82c 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008774:	4603      	mov	r3, r0
 8008776:	4619      	mov	r1, r3
 8008778:	485f      	ldr	r0, [pc, #380]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800877a:	f7fa fe40 	bl	80033fe <_ZN9EmbSysLib2Hw6BitmapC1EPKh>

Port::Pin     lcdResetPin( portJ, 15 );
 800877e:	220f      	movs	r2, #15
 8008780:	4949      	ldr	r1, [pc, #292]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008782:	485e      	ldr	r0, [pc, #376]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008784:	f7fb fafa 	bl	8003d7c <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
Fmc_Mcu       fmc        ( Fmc_Mcu::SDRAM_Bank1 );  
 8008788:	2200      	movs	r2, #0
 800878a:	2102      	movs	r1, #2
 800878c:	485c      	ldr	r0, [pc, #368]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800878e:	f7fd fb7b 	bl	8005e88 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>
Dsi_Mcu       hwDSI      ( fmc.startAddr() );
 8008792:	485b      	ldr	r0, [pc, #364]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008794:	f7fd fcc8 	bl	8006128 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>
 8008798:	4603      	mov	r3, r0
 800879a:	4619      	mov	r1, r3
 800879c:	4859      	ldr	r0, [pc, #356]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800879e:	f7fd fd97 	bl	80062d0 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
                        
DisplayGraphic_OTM8009Aram dispGraphic( hwDSI,lcdResetPin, 
                                        DisplayGraphic_OTM8009A::LANDSCAPE_90, 
                                        fontFont_8x12, 
                                        2 );
<<<<<<< HEAD
 800891e:	2302      	movs	r3, #2
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	4a4e      	ldr	r2, [pc, #312]	@ (8008a5c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008924:	466b      	mov	r3, sp
 8008926:	ca07      	ldmia	r2, {r0, r1, r2}
 8008928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800892c:	2301      	movs	r3, #1
 800892e:	4a52      	ldr	r2, [pc, #328]	@ (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008930:	4953      	ldr	r1, [pc, #332]	@ (8008a80 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008932:	4854      	ldr	r0, [pc, #336]	@ (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8008934:	f7ff f98a 	bl	8007c4c <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>

ScreenChar    screenChar   ( dispGraphic );
 8008938:	4952      	ldr	r1, [pc, #328]	@ (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800893a:	4853      	ldr	r0, [pc, #332]	@ (8008a88 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800893c:	f7fb fd62 	bl	8004404 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>
ScreenGraphic screenGraphic( dispGraphic );
 8008940:	4950      	ldr	r1, [pc, #320]	@ (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8008942:	4852      	ldr	r0, [pc, #328]	@ (8008a8c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008944:	f7fb fdde 	bl	8004504 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>
=======
 80087a2:	2302      	movs	r3, #2
 80087a4:	9303      	str	r3, [sp, #12]
 80087a6:	4a4e      	ldr	r2, [pc, #312]	; (80088e0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80087a8:	466b      	mov	r3, sp
 80087aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80087ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80087b0:	2301      	movs	r3, #1
 80087b2:	4a52      	ldr	r2, [pc, #328]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80087b4:	4953      	ldr	r1, [pc, #332]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80087b6:	4854      	ldr	r0, [pc, #336]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80087b8:	f7ff fa56 	bl	8007c68 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>

ScreenChar    screenChar   ( dispGraphic );
 80087bc:	4952      	ldr	r1, [pc, #328]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80087be:	4853      	ldr	r0, [pc, #332]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80087c0:	f7fb fe2e 	bl	8004420 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>
ScreenGraphic screenGraphic( dispGraphic );
 80087c4:	4950      	ldr	r1, [pc, #320]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80087c6:	4852      	ldr	r0, [pc, #328]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80087c8:	f7fb feaa 	bl	8004520 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
#endif

//-------------------------------------------------------------------
// Touch
//-------------------------------------------------------------------
Touch_FT6206 touch( i2cBusTouch, 480, 800, Touch::ROTATION_90 );
<<<<<<< HEAD
 8008948:	2301      	movs	r3, #1
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8008950:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008954:	4936      	ldr	r1, [pc, #216]	@ (8008a30 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008956:	484e      	ldr	r0, [pc, #312]	@ (8008a90 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008958:	f7ff fa98 	bl	8007e8c <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE>

Pointer        pointer( touch );
 800895c:	494c      	ldr	r1, [pc, #304]	@ (8008a90 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800895e:	484d      	ldr	r0, [pc, #308]	@ (8008a94 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8008960:	f7fc fab2 	bl	8004ec8 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>
=======
 80087cc:	2301      	movs	r3, #1
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80087d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80087d8:	4936      	ldr	r1, [pc, #216]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80087da:	484e      	ldr	r0, [pc, #312]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80087dc:	f7ff fb64 	bl	8007ea8 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE>

Pointer        pointer( touch );
 80087e0:	494c      	ldr	r1, [pc, #304]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80087e2:	484d      	ldr	r0, [pc, #308]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80087e4:	f7fc fb7e 	bl	8004ee4 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

//-------------------------------------------------------------------
// Digital
//-------------------------------------------------------------------
Digital    led_A( portJ,13, Digital::Out, 0 ); // LD1 (red)
<<<<<<< HEAD
 8008964:	2300      	movs	r3, #0
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2301      	movs	r3, #1
 800896a:	220d      	movs	r2, #13
 800896c:	492d      	ldr	r1, [pc, #180]	@ (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800896e:	484a      	ldr	r0, [pc, #296]	@ (8008a98 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008970:	f7fb fcd2 	bl	8004318 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btn_A( portA, 0, Digital::In,  0 ); // B1 (user button)
 8008974:	2300      	movs	r3, #0
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	4926      	ldr	r1, [pc, #152]	@ (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800897e:	4847      	ldr	r0, [pc, #284]	@ (8008a9c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008980:	f7fb fcca 	bl	8004318 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

Digital    btnLeft ( portF, 8, Digital::InPU  , 1 );
 8008984:	2301      	movs	r3, #1
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2304      	movs	r3, #4
 800898a:	2208      	movs	r2, #8
 800898c:	4924      	ldr	r1, [pc, #144]	@ (8008a20 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800898e:	4844      	ldr	r0, [pc, #272]	@ (8008aa0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008990:	f7fb fcc2 	bl	8004318 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnCtrl ( portF, 9, Digital::InPU  , 1 );
 8008994:	2301      	movs	r3, #1
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	2304      	movs	r3, #4
 800899a:	2209      	movs	r2, #9
 800899c:	4920      	ldr	r1, [pc, #128]	@ (8008a20 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800899e:	4841      	ldr	r0, [pc, #260]	@ (8008aa4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80089a0:	f7fb fcba 	bl	8004318 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnRight( portA, 6, Digital::InPU  , 1 );
 80089a4:	2301      	movs	r3, #1
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2304      	movs	r3, #4
 80089aa:	2206      	movs	r2, #6
 80089ac:	491a      	ldr	r1, [pc, #104]	@ (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80089ae:	483e      	ldr	r0, [pc, #248]	@ (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80089b0:	f7fb fcb2 	bl	8004318 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
=======
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2301      	movs	r3, #1
 80087ee:	220d      	movs	r2, #13
 80087f0:	492d      	ldr	r1, [pc, #180]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80087f2:	484a      	ldr	r0, [pc, #296]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80087f4:	f7fb fd9e 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btn_A( portA, 0, Digital::In,  0 ); // B1 (user button)
 80087f8:	2300      	movs	r3, #0
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	2300      	movs	r3, #0
 80087fe:	2200      	movs	r2, #0
 8008800:	4926      	ldr	r1, [pc, #152]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008802:	4847      	ldr	r0, [pc, #284]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008804:	f7fb fd96 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

Digital    btnLeft ( portF, 8, Digital::InPU  , 1 );
 8008808:	2301      	movs	r3, #1
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2304      	movs	r3, #4
 800880e:	2208      	movs	r2, #8
 8008810:	4924      	ldr	r1, [pc, #144]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008812:	4844      	ldr	r0, [pc, #272]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008814:	f7fb fd8e 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnCtrl ( portF, 9, Digital::InPU  , 1 );
 8008818:	2301      	movs	r3, #1
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2304      	movs	r3, #4
 800881e:	2209      	movs	r2, #9
 8008820:	4920      	ldr	r1, [pc, #128]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008822:	4841      	ldr	r0, [pc, #260]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008824:	f7fb fd86 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnRight( portA, 6, Digital::InPU  , 1 );
 8008828:	2301      	movs	r3, #1
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	2304      	movs	r3, #4
 800882e:	2206      	movs	r2, #6
 8008830:	491a      	ldr	r1, [pc, #104]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008832:	483e      	ldr	r0, [pc, #248]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008834:	f7fb fd7e 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

//-------------------------------------------------------------------
// Control
//-------------------------------------------------------------------
DigitalIndicator indicator( led_A, taskManager );
<<<<<<< HEAD
 80089b4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80089b6:	4938      	ldr	r1, [pc, #224]	@ (8008a98 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80089b8:	483c      	ldr	r0, [pc, #240]	@ (8008aac <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80089ba:	f7fc fe1f 	bl	80055fc <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>
DigitalButton    button   ( btn_A, taskManager, 40, 1000 );
 80089be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2328      	movs	r3, #40	@ 0x28
 80089c6:	4a19      	ldr	r2, [pc, #100]	@ (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80089c8:	4934      	ldr	r1, [pc, #208]	@ (8008a9c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80089ca:	4839      	ldr	r0, [pc, #228]	@ (8008ab0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80089cc:	f7fc fc06 	bl	80051dc <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>
=======
 8008838:	4a1d      	ldr	r2, [pc, #116]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800883a:	4938      	ldr	r1, [pc, #224]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800883c:	483c      	ldr	r0, [pc, #240]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800883e:	f7fc feeb 	bl	8005618 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>
DigitalButton    button   ( btn_A, taskManager, 40, 1000 );
 8008842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	2328      	movs	r3, #40	; 0x28
 800884a:	4a19      	ldr	r2, [pc, #100]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800884c:	4934      	ldr	r1, [pc, #208]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800884e:	4839      	ldr	r0, [pc, #228]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008850:	f7fc fcd2 	bl	80051f8 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a

#if USE_ROTARY_KNOB == true
  DigitalEncoderRotaryknob  encoder( &btnLeft, &btnRight, &btnCtrl, taskManager );
#else
  DigitalEncoderJoystick    encoder( &btnLeft, &btnRight, &btnCtrl, taskManager, 150 );
<<<<<<< HEAD
 80089d0:	2396      	movs	r3, #150	@ 0x96
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	4b15      	ldr	r3, [pc, #84]	@ (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4b32      	ldr	r3, [pc, #200]	@ (8008aa4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80089da:	4a33      	ldr	r2, [pc, #204]	@ (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80089dc:	4930      	ldr	r1, [pc, #192]	@ (8008aa0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80089de:	4835      	ldr	r0, [pc, #212]	@ (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80089e0:	f7fc fd68 	bl	80054b4 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>
 80089e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80089e8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <_Z41__static_initialization_and_destruction_0ii+0x292>
 80089f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80089f6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d102      	bne.n	8008a0a <_Z41__static_initialization_and_destruction_0ii+0x292>
 8008a04:	4803      	ldr	r0, [pc, #12]	@ (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008a06:	f7ff fea5 	bl	8008754 <_ZN15myReportHandlerD1Ev>
 8008a0a:	bf00      	nop
 8008a0c:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	200001e8 	.word	0x200001e8
 8008a18:	200001ec 	.word	0x200001ec
 8008a1c:	200001f8 	.word	0x200001f8
 8008a20:	20000204 	.word	0x20000204
 8008a24:	20000210 	.word	0x20000210
 8008a28:	2000021c 	.word	0x2000021c
 8008a2c:	20000238 	.word	0x20000238
 8008a30:	20000258 	.word	0x20000258
 8008a34:	20000268 	.word	0x20000268
 8008a38:	08009808 	.word	0x08009808
 8008a3c:	0800980c 	.word	0x0800980c
 8008a40:	20000290 	.word	0x20000290
 8008a44:	200002b8 	.word	0x200002b8
 8008a48:	08009810 	.word	0x08009810
 8008a4c:	200002d4 	.word	0x200002d4
 8008a50:	0800981c 	.word	0x0800981c
 8008a54:	200002e0 	.word	0x200002e0
 8008a58:	08009828 	.word	0x08009828
 8008a5c:	200002ec 	.word	0x200002ec
 8008a60:	08009834 	.word	0x08009834
 8008a64:	200002f8 	.word	0x200002f8
 8008a68:	08009840 	.word	0x08009840
 8008a6c:	20000304 	.word	0x20000304
 8008a70:	08009850 	.word	0x08009850
 8008a74:	2000030c 	.word	0x2000030c
 8008a78:	20000314 	.word	0x20000314
 8008a7c:	20000324 	.word	0x20000324
 8008a80:	20000328 	.word	0x20000328
 8008a84:	20000330 	.word	0x20000330
 8008a88:	2000037c 	.word	0x2000037c
 8008a8c:	2000038c 	.word	0x2000038c
 8008a90:	2000039c 	.word	0x2000039c
 8008a94:	200003bc 	.word	0x200003bc
 8008a98:	200003dc 	.word	0x200003dc
 8008a9c:	200003f4 	.word	0x200003f4
 8008aa0:	2000040c 	.word	0x2000040c
 8008aa4:	20000424 	.word	0x20000424
 8008aa8:	2000043c 	.word	0x2000043c
 8008aac:	20000454 	.word	0x20000454
 8008ab0:	2000046c 	.word	0x2000046c
 8008ab4:	20000484 	.word	0x20000484

08008ab8 <_GLOBAL__sub_I_report>:
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	f7ff fe59 	bl	8008778 <_Z41__static_initialization_and_destruction_0ii>
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <_GLOBAL__sub_D_report>:
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f7ff fe51 	bl	8008778 <_Z41__static_initialization_and_destruction_0ii>
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <Reset_Handler>:
  ldr   r0, =_estack
 8008ad8:	480d      	ldr	r0, [pc, #52]	@ (8008b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008ada:	4685      	mov	sp, r0
  bl  SystemInit
 8008adc:	f7f7 fe7a 	bl	80007d4 <SystemInit>
  ldr r0, =_sdata
 8008ae0:	480c      	ldr	r0, [pc, #48]	@ (8008b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8008ae2:	490d      	ldr	r1, [pc, #52]	@ (8008b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8008b1c <LoopForever+0xe>)
  movs r3, #0
 8008ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ae8:	e002      	b.n	8008af0 <LoopCopyDataInit>

08008aea <CopyDataInit>:
  ldr r4, [r2, r3]
 8008aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008aee:	3304      	adds	r3, #4

08008af0 <LoopCopyDataInit>:
  adds r4, r0, r3
 8008af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008af4:	d3f9      	bcc.n	8008aea <CopyDataInit>
  ldr r2, =_sbss
 8008af6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008af8:	4c0a      	ldr	r4, [pc, #40]	@ (8008b24 <LoopForever+0x16>)
  movs r3, #0
 8008afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008afc:	e001      	b.n	8008b02 <LoopFillZerobss>

08008afe <FillZerobss>:
  str  r3, [r2]
 8008afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b00:	3204      	adds	r2, #4

08008b02 <LoopFillZerobss>:
  cmp r2, r4
 8008b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b04:	d3fb      	bcc.n	8008afe <FillZerobss>
  bl __libc_init_array
 8008b06:	f000 f9ab 	bl	8008e60 <__libc_init_array>
  bl main
 8008b0a:	f7ff fd5d 	bl	80085c8 <main>

08008b0e <LoopForever>:
    b LoopForever
 8008b0e:	e7fe      	b.n	8008b0e <LoopForever>
  ldr   r0, =_estack
 8008b10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8008b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b18:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8008b1c:	08009d80 	.word	0x08009d80
  ldr r2, =_sbss
 8008b20:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8008b24:	200005fc 	.word	0x200005fc

08008b28 <BusFault_Handler>:
  b Infinite_Loop
 8008b28:	e7fe      	b.n	8008b28 <BusFault_Handler>

08008b2a <_Znwj>:
 8008b2a:	2801      	cmp	r0, #1
 8008b2c:	bf38      	it	cc
 8008b2e:	2001      	movcc	r0, #1
 8008b30:	b510      	push	{r4, lr}
 8008b32:	4604      	mov	r4, r0
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 f81b 	bl	8008b70 <malloc>
 8008b3a:	b100      	cbz	r0, 8008b3e <_Znwj+0x14>
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	f000 f807 	bl	8008b50 <_ZSt15get_new_handlerv>
 8008b42:	b908      	cbnz	r0, 8008b48 <_Znwj+0x1e>
 8008b44:	f000 f80c 	bl	8008b60 <abort>
 8008b48:	4780      	blx	r0
 8008b4a:	e7f3      	b.n	8008b34 <_Znwj+0xa>

08008b4c <_Znaj>:
 8008b4c:	f7ff bfed 	b.w	8008b2a <_Znwj>

08008b50 <_ZSt15get_new_handlerv>:
 8008b50:	4b02      	ldr	r3, [pc, #8]	@ (8008b5c <_ZSt15get_new_handlerv+0xc>)
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	f3bf 8f5b 	dmb	ish
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	200004ac 	.word	0x200004ac

08008b60 <abort>:
 8008b60:	b508      	push	{r3, lr}
 8008b62:	2006      	movs	r0, #6
 8008b64:	f000 f950 	bl	8008e08 <raise>
 8008b68:	2001      	movs	r0, #1
 8008b6a:	f000 fd4b 	bl	8009604 <_exit>
	...

08008b70 <malloc>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	@ (8008b7c <malloc+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f000 b825 	b.w	8008bc4 <_malloc_r>
 8008b7a:	bf00      	nop
 8008b7c:	20000104 	.word	0x20000104

08008b80 <sbrk_aligned>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4e0f      	ldr	r6, [pc, #60]	@ (8008bc0 <sbrk_aligned+0x40>)
 8008b84:	460c      	mov	r4, r1
 8008b86:	6831      	ldr	r1, [r6, #0]
 8008b88:	4605      	mov	r5, r0
 8008b8a:	b911      	cbnz	r1, 8008b92 <sbrk_aligned+0x12>
 8008b8c:	f000 f958 	bl	8008e40 <_sbrk_r>
 8008b90:	6030      	str	r0, [r6, #0]
 8008b92:	4621      	mov	r1, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f953 	bl	8008e40 <_sbrk_r>
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	d103      	bne.n	8008ba6 <sbrk_aligned+0x26>
 8008b9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
 8008ba6:	1cc4      	adds	r4, r0, #3
 8008ba8:	f024 0403 	bic.w	r4, r4, #3
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d0f8      	beq.n	8008ba2 <sbrk_aligned+0x22>
 8008bb0:	1a21      	subs	r1, r4, r0
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f944 	bl	8008e40 <_sbrk_r>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d1f2      	bne.n	8008ba2 <sbrk_aligned+0x22>
 8008bbc:	e7ef      	b.n	8008b9e <sbrk_aligned+0x1e>
 8008bbe:	bf00      	nop
 8008bc0:	200004b0 	.word	0x200004b0

08008bc4 <_malloc_r>:
 8008bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc8:	1ccd      	adds	r5, r1, #3
 8008bca:	f025 0503 	bic.w	r5, r5, #3
 8008bce:	3508      	adds	r5, #8
 8008bd0:	2d0c      	cmp	r5, #12
 8008bd2:	bf38      	it	cc
 8008bd4:	250c      	movcc	r5, #12
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	4606      	mov	r6, r0
 8008bda:	db01      	blt.n	8008be0 <_malloc_r+0x1c>
 8008bdc:	42a9      	cmp	r1, r5
 8008bde:	d904      	bls.n	8008bea <_malloc_r+0x26>
 8008be0:	230c      	movs	r3, #12
 8008be2:	6033      	str	r3, [r6, #0]
 8008be4:	2000      	movs	r0, #0
 8008be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cc0 <_malloc_r+0xfc>
 8008bee:	f000 f869 	bl	8008cc4 <__malloc_lock>
 8008bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bf6:	461c      	mov	r4, r3
 8008bf8:	bb44      	cbnz	r4, 8008c4c <_malloc_r+0x88>
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff ffbf 	bl	8008b80 <sbrk_aligned>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	4604      	mov	r4, r0
 8008c06:	d158      	bne.n	8008cba <_malloc_r+0xf6>
 8008c08:	f8d8 4000 	ldr.w	r4, [r8]
 8008c0c:	4627      	mov	r7, r4
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	d143      	bne.n	8008c9a <_malloc_r+0xd6>
 8008c12:	2c00      	cmp	r4, #0
 8008c14:	d04b      	beq.n	8008cae <_malloc_r+0xea>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	4639      	mov	r1, r7
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	eb04 0903 	add.w	r9, r4, r3
 8008c20:	f000 f90e 	bl	8008e40 <_sbrk_r>
 8008c24:	4581      	cmp	r9, r0
 8008c26:	d142      	bne.n	8008cae <_malloc_r+0xea>
 8008c28:	6821      	ldr	r1, [r4, #0]
 8008c2a:	1a6d      	subs	r5, r5, r1
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ffa6 	bl	8008b80 <sbrk_aligned>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d03a      	beq.n	8008cae <_malloc_r+0xea>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	442b      	add	r3, r5
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	bb62      	cbnz	r2, 8008ca0 <_malloc_r+0xdc>
 8008c46:	f8c8 7000 	str.w	r7, [r8]
 8008c4a:	e00f      	b.n	8008c6c <_malloc_r+0xa8>
 8008c4c:	6822      	ldr	r2, [r4, #0]
 8008c4e:	1b52      	subs	r2, r2, r5
 8008c50:	d420      	bmi.n	8008c94 <_malloc_r+0xd0>
 8008c52:	2a0b      	cmp	r2, #11
 8008c54:	d917      	bls.n	8008c86 <_malloc_r+0xc2>
 8008c56:	1961      	adds	r1, r4, r5
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	6025      	str	r5, [r4, #0]
 8008c5c:	bf18      	it	ne
 8008c5e:	6059      	strne	r1, [r3, #4]
 8008c60:	6863      	ldr	r3, [r4, #4]
 8008c62:	bf08      	it	eq
 8008c64:	f8c8 1000 	streq.w	r1, [r8]
 8008c68:	5162      	str	r2, [r4, r5]
 8008c6a:	604b      	str	r3, [r1, #4]
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f000 f82f 	bl	8008cd0 <__malloc_unlock>
 8008c72:	f104 000b 	add.w	r0, r4, #11
 8008c76:	1d23      	adds	r3, r4, #4
 8008c78:	f020 0007 	bic.w	r0, r0, #7
 8008c7c:	1ac2      	subs	r2, r0, r3
 8008c7e:	bf1c      	itt	ne
 8008c80:	1a1b      	subne	r3, r3, r0
 8008c82:	50a3      	strne	r3, [r4, r2]
 8008c84:	e7af      	b.n	8008be6 <_malloc_r+0x22>
 8008c86:	6862      	ldr	r2, [r4, #4]
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	bf0c      	ite	eq
 8008c8c:	f8c8 2000 	streq.w	r2, [r8]
 8008c90:	605a      	strne	r2, [r3, #4]
 8008c92:	e7eb      	b.n	8008c6c <_malloc_r+0xa8>
 8008c94:	4623      	mov	r3, r4
 8008c96:	6864      	ldr	r4, [r4, #4]
 8008c98:	e7ae      	b.n	8008bf8 <_malloc_r+0x34>
 8008c9a:	463c      	mov	r4, r7
 8008c9c:	687f      	ldr	r7, [r7, #4]
 8008c9e:	e7b6      	b.n	8008c0e <_malloc_r+0x4a>
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d1fb      	bne.n	8008ca0 <_malloc_r+0xdc>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6053      	str	r3, [r2, #4]
 8008cac:	e7de      	b.n	8008c6c <_malloc_r+0xa8>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	6033      	str	r3, [r6, #0]
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f000 f80c 	bl	8008cd0 <__malloc_unlock>
 8008cb8:	e794      	b.n	8008be4 <_malloc_r+0x20>
 8008cba:	6005      	str	r5, [r0, #0]
 8008cbc:	e7d6      	b.n	8008c6c <_malloc_r+0xa8>
 8008cbe:	bf00      	nop
 8008cc0:	200004b4 	.word	0x200004b4

08008cc4 <__malloc_lock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	@ (8008ccc <__malloc_lock+0x8>)
 8008cc6:	f000 b8ef 	b.w	8008ea8 <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	200005f4 	.word	0x200005f4

08008cd0 <__malloc_unlock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	@ (8008cd8 <__malloc_unlock+0x8>)
 8008cd2:	f000 b8ea 	b.w	8008eaa <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	200005f4 	.word	0x200005f4

08008cdc <sniprintf>:
 8008cdc:	b40c      	push	{r2, r3}
 8008cde:	b530      	push	{r4, r5, lr}
 8008ce0:	4b17      	ldr	r3, [pc, #92]	@ (8008d40 <sniprintf+0x64>)
 8008ce2:	1e0c      	subs	r4, r1, #0
 8008ce4:	681d      	ldr	r5, [r3, #0]
 8008ce6:	b09d      	sub	sp, #116	@ 0x74
 8008ce8:	da08      	bge.n	8008cfc <sniprintf+0x20>
 8008cea:	238b      	movs	r3, #139	@ 0x8b
 8008cec:	602b      	str	r3, [r5, #0]
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf2:	b01d      	add	sp, #116	@ 0x74
 8008cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cf8:	b002      	add	sp, #8
 8008cfa:	4770      	bx	lr
 8008cfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d04:	bf14      	ite	ne
 8008d06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d0a:	4623      	moveq	r3, r4
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d14:	9002      	str	r0, [sp, #8]
 8008d16:	9006      	str	r0, [sp, #24]
 8008d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d1e:	ab21      	add	r3, sp, #132	@ 0x84
 8008d20:	a902      	add	r1, sp, #8
 8008d22:	4628      	mov	r0, r5
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	f000 f975 	bl	8009014 <_svfiprintf_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	bfbc      	itt	lt
 8008d2e:	238b      	movlt	r3, #139	@ 0x8b
 8008d30:	602b      	strlt	r3, [r5, #0]
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	d0dd      	beq.n	8008cf2 <sniprintf+0x16>
 8008d36:	9b02      	ldr	r3, [sp, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e7d9      	b.n	8008cf2 <sniprintf+0x16>
 8008d3e:	bf00      	nop
 8008d40:	20000104 	.word	0x20000104

08008d44 <_vsniprintf_r>:
 8008d44:	b530      	push	{r4, r5, lr}
 8008d46:	4614      	mov	r4, r2
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	b09b      	sub	sp, #108	@ 0x6c
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	da05      	bge.n	8008d5e <_vsniprintf_r+0x1a>
 8008d52:	238b      	movs	r3, #139	@ 0x8b
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	b01b      	add	sp, #108	@ 0x6c
 8008d5c:	bd30      	pop	{r4, r5, pc}
 8008d5e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d62:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d66:	bf14      	ite	ne
 8008d68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d6c:	4623      	moveq	r3, r4
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	9305      	str	r3, [sp, #20]
 8008d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d76:	9100      	str	r1, [sp, #0]
 8008d78:	9104      	str	r1, [sp, #16]
 8008d7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d7e:	4669      	mov	r1, sp
 8008d80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008d82:	f000 f947 	bl	8009014 <_svfiprintf_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	bfbc      	itt	lt
 8008d8a:	238b      	movlt	r3, #139	@ 0x8b
 8008d8c:	602b      	strlt	r3, [r5, #0]
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	d0e3      	beq.n	8008d5a <_vsniprintf_r+0x16>
 8008d92:	9b00      	ldr	r3, [sp, #0]
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
 8008d98:	e7df      	b.n	8008d5a <_vsniprintf_r+0x16>
	...

08008d9c <vsniprintf>:
 8008d9c:	b507      	push	{r0, r1, r2, lr}
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	460a      	mov	r2, r1
 8008da4:	4601      	mov	r1, r0
 8008da6:	4803      	ldr	r0, [pc, #12]	@ (8008db4 <vsniprintf+0x18>)
 8008da8:	6800      	ldr	r0, [r0, #0]
 8008daa:	f7ff ffcb 	bl	8008d44 <_vsniprintf_r>
 8008dae:	b003      	add	sp, #12
 8008db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008db4:	20000104 	.word	0x20000104

08008db8 <_raise_r>:
 8008db8:	291f      	cmp	r1, #31
 8008dba:	b538      	push	{r3, r4, r5, lr}
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	d904      	bls.n	8008dcc <_raise_r+0x14>
 8008dc2:	2316      	movs	r3, #22
 8008dc4:	6003      	str	r3, [r0, #0]
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008dce:	b112      	cbz	r2, 8008dd6 <_raise_r+0x1e>
 8008dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dd4:	b94b      	cbnz	r3, 8008dea <_raise_r+0x32>
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f000 f830 	bl	8008e3c <_getpid_r>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4601      	mov	r1, r0
 8008de0:	4628      	mov	r0, r5
 8008de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de6:	f000 b817 	b.w	8008e18 <_kill_r>
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d00a      	beq.n	8008e04 <_raise_r+0x4c>
 8008dee:	1c59      	adds	r1, r3, #1
 8008df0:	d103      	bne.n	8008dfa <_raise_r+0x42>
 8008df2:	2316      	movs	r3, #22
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	2001      	movs	r0, #1
 8008df8:	e7e7      	b.n	8008dca <_raise_r+0x12>
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e00:	4620      	mov	r0, r4
 8008e02:	4798      	blx	r3
 8008e04:	2000      	movs	r0, #0
 8008e06:	e7e0      	b.n	8008dca <_raise_r+0x12>

08008e08 <raise>:
 8008e08:	4b02      	ldr	r3, [pc, #8]	@ (8008e14 <raise+0xc>)
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	f7ff bfd3 	b.w	8008db8 <_raise_r>
 8008e12:	bf00      	nop
 8008e14:	20000104 	.word	0x20000104

08008e18 <_kill_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	@ (8008e38 <_kill_r+0x20>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	f000 fbd7 	bl	80095d8 <_kill>
 8008e2a:	1c43      	adds	r3, r0, #1
 8008e2c:	d102      	bne.n	8008e34 <_kill_r+0x1c>
 8008e2e:	682b      	ldr	r3, [r5, #0]
 8008e30:	b103      	cbz	r3, 8008e34 <_kill_r+0x1c>
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	bd38      	pop	{r3, r4, r5, pc}
 8008e36:	bf00      	nop
 8008e38:	200005f0 	.word	0x200005f0

08008e3c <_getpid_r>:
 8008e3c:	f000 bbc4 	b.w	80095c8 <_getpid>

08008e40 <_sbrk_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	@ (8008e5c <_sbrk_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f000 fbcc 	bl	80095e8 <_sbrk>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_sbrk_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_sbrk_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	200005f0 	.word	0x200005f0

08008e60 <__libc_init_array>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4d0d      	ldr	r5, [pc, #52]	@ (8008e98 <__libc_init_array+0x38>)
 8008e64:	4c0d      	ldr	r4, [pc, #52]	@ (8008e9c <__libc_init_array+0x3c>)
 8008e66:	1b64      	subs	r4, r4, r5
 8008e68:	10a4      	asrs	r4, r4, #2
 8008e6a:	2600      	movs	r6, #0
 8008e6c:	42a6      	cmp	r6, r4
 8008e6e:	d109      	bne.n	8008e84 <__libc_init_array+0x24>
 8008e70:	4d0b      	ldr	r5, [pc, #44]	@ (8008ea0 <__libc_init_array+0x40>)
 8008e72:	4c0c      	ldr	r4, [pc, #48]	@ (8008ea4 <__libc_init_array+0x44>)
 8008e74:	f000 fbc8 	bl	8009608 <_init>
 8008e78:	1b64      	subs	r4, r4, r5
 8008e7a:	10a4      	asrs	r4, r4, #2
 8008e7c:	2600      	movs	r6, #0
 8008e7e:	42a6      	cmp	r6, r4
 8008e80:	d105      	bne.n	8008e8e <__libc_init_array+0x2e>
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e88:	4798      	blx	r3
 8008e8a:	3601      	adds	r6, #1
 8008e8c:	e7ee      	b.n	8008e6c <__libc_init_array+0xc>
 8008e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e92:	4798      	blx	r3
 8008e94:	3601      	adds	r6, #1
 8008e96:	e7f2      	b.n	8008e7e <__libc_init_array+0x1e>
 8008e98:	08009d6c 	.word	0x08009d6c
 8008e9c:	08009d6c 	.word	0x08009d6c
 8008ea0:	08009d6c 	.word	0x08009d6c
 8008ea4:	08009d78 	.word	0x08009d78

08008ea8 <__retarget_lock_acquire_recursive>:
 8008ea8:	4770      	bx	lr

08008eaa <__retarget_lock_release_recursive>:
 8008eaa:	4770      	bx	lr

08008eac <memcpy>:
 8008eac:	440a      	add	r2, r1
 8008eae:	4291      	cmp	r1, r2
 8008eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eb4:	d100      	bne.n	8008eb8 <memcpy+0xc>
 8008eb6:	4770      	bx	lr
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ec2:	4291      	cmp	r1, r2
 8008ec4:	d1f9      	bne.n	8008eba <memcpy+0xe>
 8008ec6:	bd10      	pop	{r4, pc}

08008ec8 <_free_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4605      	mov	r5, r0
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d041      	beq.n	8008f54 <_free_r+0x8c>
 8008ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed4:	1f0c      	subs	r4, r1, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfb8      	it	lt
 8008eda:	18e4      	addlt	r4, r4, r3
 8008edc:	f7ff fef2 	bl	8008cc4 <__malloc_lock>
 8008ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f58 <_free_r+0x90>)
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	b933      	cbnz	r3, 8008ef4 <_free_r+0x2c>
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	6014      	str	r4, [r2, #0]
 8008eea:	4628      	mov	r0, r5
 8008eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef0:	f7ff beee 	b.w	8008cd0 <__malloc_unlock>
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d908      	bls.n	8008f0a <_free_r+0x42>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	1821      	adds	r1, r4, r0
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf01      	itttt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	1809      	addeq	r1, r1, r0
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	e7ed      	b.n	8008ee6 <_free_r+0x1e>
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	b10b      	cbz	r3, 8008f14 <_free_r+0x4c>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d9fa      	bls.n	8008f0a <_free_r+0x42>
 8008f14:	6811      	ldr	r1, [r2, #0]
 8008f16:	1850      	adds	r0, r2, r1
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d10b      	bne.n	8008f34 <_free_r+0x6c>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	4401      	add	r1, r0
 8008f20:	1850      	adds	r0, r2, r1
 8008f22:	4283      	cmp	r3, r0
 8008f24:	6011      	str	r1, [r2, #0]
 8008f26:	d1e0      	bne.n	8008eea <_free_r+0x22>
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	6053      	str	r3, [r2, #4]
 8008f2e:	4408      	add	r0, r1
 8008f30:	6010      	str	r0, [r2, #0]
 8008f32:	e7da      	b.n	8008eea <_free_r+0x22>
 8008f34:	d902      	bls.n	8008f3c <_free_r+0x74>
 8008f36:	230c      	movs	r3, #12
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	e7d6      	b.n	8008eea <_free_r+0x22>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	1821      	adds	r1, r4, r0
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf04      	itt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	bf04      	itt	eq
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	6054      	str	r4, [r2, #4]
 8008f52:	e7ca      	b.n	8008eea <_free_r+0x22>
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	200004b4 	.word	0x200004b4

08008f5c <__ssputs_r>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	688e      	ldr	r6, [r1, #8]
 8008f62:	461f      	mov	r7, r3
 8008f64:	42be      	cmp	r6, r7
 8008f66:	680b      	ldr	r3, [r1, #0]
 8008f68:	4682      	mov	sl, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	4690      	mov	r8, r2
 8008f6e:	d82d      	bhi.n	8008fcc <__ssputs_r+0x70>
 8008f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f78:	d026      	beq.n	8008fc8 <__ssputs_r+0x6c>
 8008f7a:	6965      	ldr	r5, [r4, #20]
 8008f7c:	6909      	ldr	r1, [r1, #16]
 8008f7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f82:	eba3 0901 	sub.w	r9, r3, r1
 8008f86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f8a:	1c7b      	adds	r3, r7, #1
 8008f8c:	444b      	add	r3, r9
 8008f8e:	106d      	asrs	r5, r5, #1
 8008f90:	429d      	cmp	r5, r3
 8008f92:	bf38      	it	cc
 8008f94:	461d      	movcc	r5, r3
 8008f96:	0553      	lsls	r3, r2, #21
 8008f98:	d527      	bpl.n	8008fea <__ssputs_r+0x8e>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	f7ff fe12 	bl	8008bc4 <_malloc_r>
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	b360      	cbz	r0, 8008ffe <__ssputs_r+0xa2>
 8008fa4:	6921      	ldr	r1, [r4, #16]
 8008fa6:	464a      	mov	r2, r9
 8008fa8:	f7ff ff80 	bl	8008eac <memcpy>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	6126      	str	r6, [r4, #16]
 8008fba:	6165      	str	r5, [r4, #20]
 8008fbc:	444e      	add	r6, r9
 8008fbe:	eba5 0509 	sub.w	r5, r5, r9
 8008fc2:	6026      	str	r6, [r4, #0]
 8008fc4:	60a5      	str	r5, [r4, #8]
 8008fc6:	463e      	mov	r6, r7
 8008fc8:	42be      	cmp	r6, r7
 8008fca:	d900      	bls.n	8008fce <__ssputs_r+0x72>
 8008fcc:	463e      	mov	r6, r7
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	f000 faa8 	bl	8009528 <memmove>
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	1b9b      	subs	r3, r3, r6
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	4433      	add	r3, r6
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fea:	462a      	mov	r2, r5
 8008fec:	f000 fab6 	bl	800955c <_realloc_r>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d1e0      	bne.n	8008fb8 <__ssputs_r+0x5c>
 8008ff6:	6921      	ldr	r1, [r4, #16]
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	f7ff ff65 	bl	8008ec8 <_free_r>
 8008ffe:	230c      	movs	r3, #12
 8009000:	f8ca 3000 	str.w	r3, [sl]
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e7e9      	b.n	8008fe6 <__ssputs_r+0x8a>
	...

08009014 <_svfiprintf_r>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	4698      	mov	r8, r3
 800901a:	898b      	ldrh	r3, [r1, #12]
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	b09d      	sub	sp, #116	@ 0x74
 8009020:	4607      	mov	r7, r0
 8009022:	460d      	mov	r5, r1
 8009024:	4614      	mov	r4, r2
 8009026:	d510      	bpl.n	800904a <_svfiprintf_r+0x36>
 8009028:	690b      	ldr	r3, [r1, #16]
 800902a:	b973      	cbnz	r3, 800904a <_svfiprintf_r+0x36>
 800902c:	2140      	movs	r1, #64	@ 0x40
 800902e:	f7ff fdc9 	bl	8008bc4 <_malloc_r>
 8009032:	6028      	str	r0, [r5, #0]
 8009034:	6128      	str	r0, [r5, #16]
 8009036:	b930      	cbnz	r0, 8009046 <_svfiprintf_r+0x32>
 8009038:	230c      	movs	r3, #12
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	b01d      	add	sp, #116	@ 0x74
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	2340      	movs	r3, #64	@ 0x40
 8009048:	616b      	str	r3, [r5, #20]
 800904a:	2300      	movs	r3, #0
 800904c:	9309      	str	r3, [sp, #36]	@ 0x24
 800904e:	2320      	movs	r3, #32
 8009050:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009054:	f8cd 800c 	str.w	r8, [sp, #12]
 8009058:	2330      	movs	r3, #48	@ 0x30
 800905a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091f8 <_svfiprintf_r+0x1e4>
 800905e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009062:	f04f 0901 	mov.w	r9, #1
 8009066:	4623      	mov	r3, r4
 8009068:	469a      	mov	sl, r3
 800906a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800906e:	b10a      	cbz	r2, 8009074 <_svfiprintf_r+0x60>
 8009070:	2a25      	cmp	r2, #37	@ 0x25
 8009072:	d1f9      	bne.n	8009068 <_svfiprintf_r+0x54>
 8009074:	ebba 0b04 	subs.w	fp, sl, r4
 8009078:	d00b      	beq.n	8009092 <_svfiprintf_r+0x7e>
 800907a:	465b      	mov	r3, fp
 800907c:	4622      	mov	r2, r4
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff ff6b 	bl	8008f5c <__ssputs_r>
 8009086:	3001      	adds	r0, #1
 8009088:	f000 80a7 	beq.w	80091da <_svfiprintf_r+0x1c6>
 800908c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800908e:	445a      	add	r2, fp
 8009090:	9209      	str	r2, [sp, #36]	@ 0x24
 8009092:	f89a 3000 	ldrb.w	r3, [sl]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 809f 	beq.w	80091da <_svfiprintf_r+0x1c6>
 800909c:	2300      	movs	r3, #0
 800909e:	f04f 32ff 	mov.w	r2, #4294967295
 80090a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a6:	f10a 0a01 	add.w	sl, sl, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80090b4:	4654      	mov	r4, sl
 80090b6:	2205      	movs	r2, #5
 80090b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090bc:	484e      	ldr	r0, [pc, #312]	@ (80091f8 <_svfiprintf_r+0x1e4>)
 80090be:	f7f7 f8f7 	bl	80002b0 <memchr>
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	b9d8      	cbnz	r0, 80090fe <_svfiprintf_r+0xea>
 80090c6:	06d0      	lsls	r0, r2, #27
 80090c8:	bf44      	itt	mi
 80090ca:	2320      	movmi	r3, #32
 80090cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090d0:	0711      	lsls	r1, r2, #28
 80090d2:	bf44      	itt	mi
 80090d4:	232b      	movmi	r3, #43	@ 0x2b
 80090d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090da:	f89a 3000 	ldrb.w	r3, [sl]
 80090de:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e0:	d015      	beq.n	800910e <_svfiprintf_r+0xfa>
 80090e2:	9a07      	ldr	r2, [sp, #28]
 80090e4:	4654      	mov	r4, sl
 80090e6:	2000      	movs	r0, #0
 80090e8:	f04f 0c0a 	mov.w	ip, #10
 80090ec:	4621      	mov	r1, r4
 80090ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f2:	3b30      	subs	r3, #48	@ 0x30
 80090f4:	2b09      	cmp	r3, #9
 80090f6:	d94b      	bls.n	8009190 <_svfiprintf_r+0x17c>
 80090f8:	b1b0      	cbz	r0, 8009128 <_svfiprintf_r+0x114>
 80090fa:	9207      	str	r2, [sp, #28]
 80090fc:	e014      	b.n	8009128 <_svfiprintf_r+0x114>
 80090fe:	eba0 0308 	sub.w	r3, r0, r8
 8009102:	fa09 f303 	lsl.w	r3, r9, r3
 8009106:	4313      	orrs	r3, r2
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	46a2      	mov	sl, r4
 800910c:	e7d2      	b.n	80090b4 <_svfiprintf_r+0xa0>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d19      	adds	r1, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9103      	str	r1, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfbb      	ittet	lt
 800911a:	425b      	neglt	r3, r3
 800911c:	f042 0202 	orrlt.w	r2, r2, #2
 8009120:	9307      	strge	r3, [sp, #28]
 8009122:	9307      	strlt	r3, [sp, #28]
 8009124:	bfb8      	it	lt
 8009126:	9204      	strlt	r2, [sp, #16]
 8009128:	7823      	ldrb	r3, [r4, #0]
 800912a:	2b2e      	cmp	r3, #46	@ 0x2e
 800912c:	d10a      	bne.n	8009144 <_svfiprintf_r+0x130>
 800912e:	7863      	ldrb	r3, [r4, #1]
 8009130:	2b2a      	cmp	r3, #42	@ 0x2a
 8009132:	d132      	bne.n	800919a <_svfiprintf_r+0x186>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	1d1a      	adds	r2, r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	9203      	str	r2, [sp, #12]
 800913c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009140:	3402      	adds	r4, #2
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009208 <_svfiprintf_r+0x1f4>
 8009148:	7821      	ldrb	r1, [r4, #0]
 800914a:	2203      	movs	r2, #3
 800914c:	4650      	mov	r0, sl
 800914e:	f7f7 f8af 	bl	80002b0 <memchr>
 8009152:	b138      	cbz	r0, 8009164 <_svfiprintf_r+0x150>
 8009154:	9b04      	ldr	r3, [sp, #16]
 8009156:	eba0 000a 	sub.w	r0, r0, sl
 800915a:	2240      	movs	r2, #64	@ 0x40
 800915c:	4082      	lsls	r2, r0
 800915e:	4313      	orrs	r3, r2
 8009160:	3401      	adds	r4, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	4824      	ldr	r0, [pc, #144]	@ (80091fc <_svfiprintf_r+0x1e8>)
 800916a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800916e:	2206      	movs	r2, #6
 8009170:	f7f7 f89e 	bl	80002b0 <memchr>
 8009174:	2800      	cmp	r0, #0
 8009176:	d036      	beq.n	80091e6 <_svfiprintf_r+0x1d2>
 8009178:	4b21      	ldr	r3, [pc, #132]	@ (8009200 <_svfiprintf_r+0x1ec>)
 800917a:	bb1b      	cbnz	r3, 80091c4 <_svfiprintf_r+0x1b0>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	3307      	adds	r3, #7
 8009180:	f023 0307 	bic.w	r3, r3, #7
 8009184:	3308      	adds	r3, #8
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918a:	4433      	add	r3, r6
 800918c:	9309      	str	r3, [sp, #36]	@ 0x24
 800918e:	e76a      	b.n	8009066 <_svfiprintf_r+0x52>
 8009190:	fb0c 3202 	mla	r2, ip, r2, r3
 8009194:	460c      	mov	r4, r1
 8009196:	2001      	movs	r0, #1
 8009198:	e7a8      	b.n	80090ec <_svfiprintf_r+0xd8>
 800919a:	2300      	movs	r3, #0
 800919c:	3401      	adds	r4, #1
 800919e:	9305      	str	r3, [sp, #20]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f04f 0c0a 	mov.w	ip, #10
 80091a6:	4620      	mov	r0, r4
 80091a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ac:	3a30      	subs	r2, #48	@ 0x30
 80091ae:	2a09      	cmp	r2, #9
 80091b0:	d903      	bls.n	80091ba <_svfiprintf_r+0x1a6>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0c6      	beq.n	8009144 <_svfiprintf_r+0x130>
 80091b6:	9105      	str	r1, [sp, #20]
 80091b8:	e7c4      	b.n	8009144 <_svfiprintf_r+0x130>
 80091ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80091be:	4604      	mov	r4, r0
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7f0      	b.n	80091a6 <_svfiprintf_r+0x192>
 80091c4:	ab03      	add	r3, sp, #12
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	462a      	mov	r2, r5
 80091ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <_svfiprintf_r+0x1f0>)
 80091cc:	a904      	add	r1, sp, #16
 80091ce:	4638      	mov	r0, r7
 80091d0:	f3af 8000 	nop.w
 80091d4:	1c42      	adds	r2, r0, #1
 80091d6:	4606      	mov	r6, r0
 80091d8:	d1d6      	bne.n	8009188 <_svfiprintf_r+0x174>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	065b      	lsls	r3, r3, #25
 80091de:	f53f af2d 	bmi.w	800903c <_svfiprintf_r+0x28>
 80091e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091e4:	e72c      	b.n	8009040 <_svfiprintf_r+0x2c>
 80091e6:	ab03      	add	r3, sp, #12
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	462a      	mov	r2, r5
 80091ec:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <_svfiprintf_r+0x1f0>)
 80091ee:	a904      	add	r1, sp, #16
 80091f0:	4638      	mov	r0, r7
 80091f2:	f000 f879 	bl	80092e8 <_printf_i>
 80091f6:	e7ed      	b.n	80091d4 <_svfiprintf_r+0x1c0>
 80091f8:	08009d30 	.word	0x08009d30
 80091fc:	08009d3a 	.word	0x08009d3a
 8009200:	00000000 	.word	0x00000000
 8009204:	08008f5d 	.word	0x08008f5d
 8009208:	08009d36 	.word	0x08009d36

0800920c <_printf_common>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	4616      	mov	r6, r2
 8009212:	4698      	mov	r8, r3
 8009214:	688a      	ldr	r2, [r1, #8]
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800921c:	4293      	cmp	r3, r2
 800921e:	bfb8      	it	lt
 8009220:	4613      	movlt	r3, r2
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	b10a      	cbz	r2, 8009232 <_printf_common+0x26>
 800922e:	3301      	adds	r3, #1
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	0699      	lsls	r1, r3, #26
 8009236:	bf42      	ittt	mi
 8009238:	6833      	ldrmi	r3, [r6, #0]
 800923a:	3302      	addmi	r3, #2
 800923c:	6033      	strmi	r3, [r6, #0]
 800923e:	6825      	ldr	r5, [r4, #0]
 8009240:	f015 0506 	ands.w	r5, r5, #6
 8009244:	d106      	bne.n	8009254 <_printf_common+0x48>
 8009246:	f104 0a19 	add.w	sl, r4, #25
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	6832      	ldr	r2, [r6, #0]
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	42ab      	cmp	r3, r5
 8009252:	dc26      	bgt.n	80092a2 <_printf_common+0x96>
 8009254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	3b00      	subs	r3, #0
 800925c:	bf18      	it	ne
 800925e:	2301      	movne	r3, #1
 8009260:	0692      	lsls	r2, r2, #26
 8009262:	d42b      	bmi.n	80092bc <_printf_common+0xb0>
 8009264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009268:	4641      	mov	r1, r8
 800926a:	4638      	mov	r0, r7
 800926c:	47c8      	blx	r9
 800926e:	3001      	adds	r0, #1
 8009270:	d01e      	beq.n	80092b0 <_printf_common+0xa4>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	f003 0306 	and.w	r3, r3, #6
 800927a:	2b04      	cmp	r3, #4
 800927c:	bf02      	ittt	eq
 800927e:	68e5      	ldreq	r5, [r4, #12]
 8009280:	6833      	ldreq	r3, [r6, #0]
 8009282:	1aed      	subeq	r5, r5, r3
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	bf0c      	ite	eq
 8009288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800928c:	2500      	movne	r5, #0
 800928e:	4293      	cmp	r3, r2
 8009290:	bfc4      	itt	gt
 8009292:	1a9b      	subgt	r3, r3, r2
 8009294:	18ed      	addgt	r5, r5, r3
 8009296:	2600      	movs	r6, #0
 8009298:	341a      	adds	r4, #26
 800929a:	42b5      	cmp	r5, r6
 800929c:	d11a      	bne.n	80092d4 <_printf_common+0xc8>
 800929e:	2000      	movs	r0, #0
 80092a0:	e008      	b.n	80092b4 <_printf_common+0xa8>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4652      	mov	r2, sl
 80092a6:	4641      	mov	r1, r8
 80092a8:	4638      	mov	r0, r7
 80092aa:	47c8      	blx	r9
 80092ac:	3001      	adds	r0, #1
 80092ae:	d103      	bne.n	80092b8 <_printf_common+0xac>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	3501      	adds	r5, #1
 80092ba:	e7c6      	b.n	800924a <_printf_common+0x3e>
 80092bc:	18e1      	adds	r1, r4, r3
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	2030      	movs	r0, #48	@ 0x30
 80092c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092c6:	4422      	add	r2, r4
 80092c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092d0:	3302      	adds	r3, #2
 80092d2:	e7c7      	b.n	8009264 <_printf_common+0x58>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4622      	mov	r2, r4
 80092d8:	4641      	mov	r1, r8
 80092da:	4638      	mov	r0, r7
 80092dc:	47c8      	blx	r9
 80092de:	3001      	adds	r0, #1
 80092e0:	d0e6      	beq.n	80092b0 <_printf_common+0xa4>
 80092e2:	3601      	adds	r6, #1
 80092e4:	e7d9      	b.n	800929a <_printf_common+0x8e>
	...

080092e8 <_printf_i>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	7e0f      	ldrb	r7, [r1, #24]
 80092ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092f0:	2f78      	cmp	r7, #120	@ 0x78
 80092f2:	4691      	mov	r9, r2
 80092f4:	4680      	mov	r8, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	469a      	mov	sl, r3
 80092fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092fe:	d807      	bhi.n	8009310 <_printf_i+0x28>
 8009300:	2f62      	cmp	r7, #98	@ 0x62
 8009302:	d80a      	bhi.n	800931a <_printf_i+0x32>
 8009304:	2f00      	cmp	r7, #0
 8009306:	f000 80d2 	beq.w	80094ae <_printf_i+0x1c6>
 800930a:	2f58      	cmp	r7, #88	@ 0x58
 800930c:	f000 80b9 	beq.w	8009482 <_printf_i+0x19a>
 8009310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009318:	e03a      	b.n	8009390 <_printf_i+0xa8>
 800931a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800931e:	2b15      	cmp	r3, #21
 8009320:	d8f6      	bhi.n	8009310 <_printf_i+0x28>
 8009322:	a101      	add	r1, pc, #4	@ (adr r1, 8009328 <_printf_i+0x40>)
 8009324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009328:	08009381 	.word	0x08009381
 800932c:	08009395 	.word	0x08009395
 8009330:	08009311 	.word	0x08009311
 8009334:	08009311 	.word	0x08009311
 8009338:	08009311 	.word	0x08009311
 800933c:	08009311 	.word	0x08009311
 8009340:	08009395 	.word	0x08009395
 8009344:	08009311 	.word	0x08009311
 8009348:	08009311 	.word	0x08009311
 800934c:	08009311 	.word	0x08009311
 8009350:	08009311 	.word	0x08009311
 8009354:	08009495 	.word	0x08009495
 8009358:	080093bf 	.word	0x080093bf
 800935c:	0800944f 	.word	0x0800944f
 8009360:	08009311 	.word	0x08009311
 8009364:	08009311 	.word	0x08009311
 8009368:	080094b7 	.word	0x080094b7
 800936c:	08009311 	.word	0x08009311
 8009370:	080093bf 	.word	0x080093bf
 8009374:	08009311 	.word	0x08009311
 8009378:	08009311 	.word	0x08009311
 800937c:	08009457 	.word	0x08009457
 8009380:	6833      	ldr	r3, [r6, #0]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6032      	str	r2, [r6, #0]
 8009388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800938c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009390:	2301      	movs	r3, #1
 8009392:	e09d      	b.n	80094d0 <_printf_i+0x1e8>
 8009394:	6833      	ldr	r3, [r6, #0]
 8009396:	6820      	ldr	r0, [r4, #0]
 8009398:	1d19      	adds	r1, r3, #4
 800939a:	6031      	str	r1, [r6, #0]
 800939c:	0606      	lsls	r6, r0, #24
 800939e:	d501      	bpl.n	80093a4 <_printf_i+0xbc>
 80093a0:	681d      	ldr	r5, [r3, #0]
 80093a2:	e003      	b.n	80093ac <_printf_i+0xc4>
 80093a4:	0645      	lsls	r5, r0, #25
 80093a6:	d5fb      	bpl.n	80093a0 <_printf_i+0xb8>
 80093a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xd0>
 80093b0:	232d      	movs	r3, #45	@ 0x2d
 80093b2:	426d      	negs	r5, r5
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b8:	4859      	ldr	r0, [pc, #356]	@ (8009520 <_printf_i+0x238>)
 80093ba:	230a      	movs	r3, #10
 80093bc:	e011      	b.n	80093e2 <_printf_i+0xfa>
 80093be:	6821      	ldr	r1, [r4, #0]
 80093c0:	6833      	ldr	r3, [r6, #0]
 80093c2:	0608      	lsls	r0, r1, #24
 80093c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093c8:	d402      	bmi.n	80093d0 <_printf_i+0xe8>
 80093ca:	0649      	lsls	r1, r1, #25
 80093cc:	bf48      	it	mi
 80093ce:	b2ad      	uxthmi	r5, r5
 80093d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093d2:	4853      	ldr	r0, [pc, #332]	@ (8009520 <_printf_i+0x238>)
 80093d4:	6033      	str	r3, [r6, #0]
 80093d6:	bf14      	ite	ne
 80093d8:	230a      	movne	r3, #10
 80093da:	2308      	moveq	r3, #8
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093e2:	6866      	ldr	r6, [r4, #4]
 80093e4:	60a6      	str	r6, [r4, #8]
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	bfa2      	ittt	ge
 80093ea:	6821      	ldrge	r1, [r4, #0]
 80093ec:	f021 0104 	bicge.w	r1, r1, #4
 80093f0:	6021      	strge	r1, [r4, #0]
 80093f2:	b90d      	cbnz	r5, 80093f8 <_printf_i+0x110>
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	d04b      	beq.n	8009490 <_printf_i+0x1a8>
 80093f8:	4616      	mov	r6, r2
 80093fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80093fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009402:	5dc7      	ldrb	r7, [r0, r7]
 8009404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009408:	462f      	mov	r7, r5
 800940a:	42bb      	cmp	r3, r7
 800940c:	460d      	mov	r5, r1
 800940e:	d9f4      	bls.n	80093fa <_printf_i+0x112>
 8009410:	2b08      	cmp	r3, #8
 8009412:	d10b      	bne.n	800942c <_printf_i+0x144>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	07df      	lsls	r7, r3, #31
 8009418:	d508      	bpl.n	800942c <_printf_i+0x144>
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4299      	cmp	r1, r3
 8009420:	bfde      	ittt	le
 8009422:	2330      	movle	r3, #48	@ 0x30
 8009424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009428:	f106 36ff 	addle.w	r6, r6, #4294967295
 800942c:	1b92      	subs	r2, r2, r6
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	f8cd a000 	str.w	sl, [sp]
 8009434:	464b      	mov	r3, r9
 8009436:	aa03      	add	r2, sp, #12
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fee6 	bl	800920c <_printf_common>
 8009440:	3001      	adds	r0, #1
 8009442:	d14a      	bne.n	80094da <_printf_i+0x1f2>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f043 0320 	orr.w	r3, r3, #32
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	4833      	ldr	r0, [pc, #204]	@ (8009524 <_printf_i+0x23c>)
 8009458:	2778      	movs	r7, #120	@ 0x78
 800945a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	6831      	ldr	r1, [r6, #0]
 8009462:	061f      	lsls	r7, r3, #24
 8009464:	f851 5b04 	ldr.w	r5, [r1], #4
 8009468:	d402      	bmi.n	8009470 <_printf_i+0x188>
 800946a:	065f      	lsls	r7, r3, #25
 800946c:	bf48      	it	mi
 800946e:	b2ad      	uxthmi	r5, r5
 8009470:	6031      	str	r1, [r6, #0]
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	bf44      	itt	mi
 8009476:	f043 0320 	orrmi.w	r3, r3, #32
 800947a:	6023      	strmi	r3, [r4, #0]
 800947c:	b11d      	cbz	r5, 8009486 <_printf_i+0x19e>
 800947e:	2310      	movs	r3, #16
 8009480:	e7ac      	b.n	80093dc <_printf_i+0xf4>
 8009482:	4827      	ldr	r0, [pc, #156]	@ (8009520 <_printf_i+0x238>)
 8009484:	e7e9      	b.n	800945a <_printf_i+0x172>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	f023 0320 	bic.w	r3, r3, #32
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	e7f6      	b.n	800947e <_printf_i+0x196>
 8009490:	4616      	mov	r6, r2
 8009492:	e7bd      	b.n	8009410 <_printf_i+0x128>
 8009494:	6833      	ldr	r3, [r6, #0]
 8009496:	6825      	ldr	r5, [r4, #0]
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6030      	str	r0, [r6, #0]
 800949e:	062e      	lsls	r6, r5, #24
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0x1c0>
 80094a4:	6019      	str	r1, [r3, #0]
 80094a6:	e002      	b.n	80094ae <_printf_i+0x1c6>
 80094a8:	0668      	lsls	r0, r5, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0x1bc>
 80094ac:	8019      	strh	r1, [r3, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	4616      	mov	r6, r2
 80094b4:	e7bc      	b.n	8009430 <_printf_i+0x148>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	6032      	str	r2, [r6, #0]
 80094bc:	681e      	ldr	r6, [r3, #0]
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7f6 fef4 	bl	80002b0 <memchr>
 80094c8:	b108      	cbz	r0, 80094ce <_printf_i+0x1e6>
 80094ca:	1b80      	subs	r0, r0, r6
 80094cc:	6060      	str	r0, [r4, #4]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	2300      	movs	r3, #0
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d8:	e7aa      	b.n	8009430 <_printf_i+0x148>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	4632      	mov	r2, r6
 80094de:	4649      	mov	r1, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	47d0      	blx	sl
 80094e4:	3001      	adds	r0, #1
 80094e6:	d0ad      	beq.n	8009444 <_printf_i+0x15c>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	079b      	lsls	r3, r3, #30
 80094ec:	d413      	bmi.n	8009516 <_printf_i+0x22e>
 80094ee:	68e0      	ldr	r0, [r4, #12]
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	4298      	cmp	r0, r3
 80094f4:	bfb8      	it	lt
 80094f6:	4618      	movlt	r0, r3
 80094f8:	e7a6      	b.n	8009448 <_printf_i+0x160>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4632      	mov	r2, r6
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	47d0      	blx	sl
 8009504:	3001      	adds	r0, #1
 8009506:	d09d      	beq.n	8009444 <_printf_i+0x15c>
 8009508:	3501      	adds	r5, #1
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	9903      	ldr	r1, [sp, #12]
 800950e:	1a5b      	subs	r3, r3, r1
 8009510:	42ab      	cmp	r3, r5
 8009512:	dcf2      	bgt.n	80094fa <_printf_i+0x212>
 8009514:	e7eb      	b.n	80094ee <_printf_i+0x206>
 8009516:	2500      	movs	r5, #0
 8009518:	f104 0619 	add.w	r6, r4, #25
 800951c:	e7f5      	b.n	800950a <_printf_i+0x222>
 800951e:	bf00      	nop
 8009520:	08009d41 	.word	0x08009d41
 8009524:	08009d52 	.word	0x08009d52

08009528 <memmove>:
 8009528:	4288      	cmp	r0, r1
 800952a:	b510      	push	{r4, lr}
 800952c:	eb01 0402 	add.w	r4, r1, r2
 8009530:	d902      	bls.n	8009538 <memmove+0x10>
 8009532:	4284      	cmp	r4, r0
 8009534:	4623      	mov	r3, r4
 8009536:	d807      	bhi.n	8009548 <memmove+0x20>
 8009538:	1e43      	subs	r3, r0, #1
 800953a:	42a1      	cmp	r1, r4
 800953c:	d008      	beq.n	8009550 <memmove+0x28>
 800953e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009546:	e7f8      	b.n	800953a <memmove+0x12>
 8009548:	4402      	add	r2, r0
 800954a:	4601      	mov	r1, r0
 800954c:	428a      	cmp	r2, r1
 800954e:	d100      	bne.n	8009552 <memmove+0x2a>
 8009550:	bd10      	pop	{r4, pc}
 8009552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800955a:	e7f7      	b.n	800954c <memmove+0x24>

0800955c <_realloc_r>:
 800955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009560:	4680      	mov	r8, r0
 8009562:	4615      	mov	r5, r2
 8009564:	460c      	mov	r4, r1
 8009566:	b921      	cbnz	r1, 8009572 <_realloc_r+0x16>
 8009568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800956c:	4611      	mov	r1, r2
 800956e:	f7ff bb29 	b.w	8008bc4 <_malloc_r>
 8009572:	b92a      	cbnz	r2, 8009580 <_realloc_r+0x24>
 8009574:	f7ff fca8 	bl	8008ec8 <_free_r>
 8009578:	2400      	movs	r4, #0
 800957a:	4620      	mov	r0, r4
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	f000 f81a 	bl	80095b8 <_malloc_usable_size_r>
 8009584:	4285      	cmp	r5, r0
 8009586:	4606      	mov	r6, r0
 8009588:	d802      	bhi.n	8009590 <_realloc_r+0x34>
 800958a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800958e:	d8f4      	bhi.n	800957a <_realloc_r+0x1e>
 8009590:	4629      	mov	r1, r5
 8009592:	4640      	mov	r0, r8
 8009594:	f7ff fb16 	bl	8008bc4 <_malloc_r>
 8009598:	4607      	mov	r7, r0
 800959a:	2800      	cmp	r0, #0
 800959c:	d0ec      	beq.n	8009578 <_realloc_r+0x1c>
 800959e:	42b5      	cmp	r5, r6
 80095a0:	462a      	mov	r2, r5
 80095a2:	4621      	mov	r1, r4
 80095a4:	bf28      	it	cs
 80095a6:	4632      	movcs	r2, r6
 80095a8:	f7ff fc80 	bl	8008eac <memcpy>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4640      	mov	r0, r8
 80095b0:	f7ff fc8a 	bl	8008ec8 <_free_r>
 80095b4:	463c      	mov	r4, r7
 80095b6:	e7e0      	b.n	800957a <_realloc_r+0x1e>

080095b8 <_malloc_usable_size_r>:
 80095b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095bc:	1f18      	subs	r0, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfbc      	itt	lt
 80095c2:	580b      	ldrlt	r3, [r1, r0]
 80095c4:	18c0      	addlt	r0, r0, r3
 80095c6:	4770      	bx	lr

080095c8 <_getpid>:
 80095c8:	4b02      	ldr	r3, [pc, #8]	@ (80095d4 <_getpid+0xc>)
 80095ca:	2258      	movs	r2, #88	@ 0x58
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	f04f 30ff 	mov.w	r0, #4294967295
 80095d2:	4770      	bx	lr
 80095d4:	200005f0 	.word	0x200005f0

080095d8 <_kill>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	@ (80095e4 <_kill+0xc>)
 80095da:	2258      	movs	r2, #88	@ 0x58
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	f04f 30ff 	mov.w	r0, #4294967295
 80095e2:	4770      	bx	lr
 80095e4:	200005f0 	.word	0x200005f0

080095e8 <_sbrk>:
 80095e8:	4a04      	ldr	r2, [pc, #16]	@ (80095fc <_sbrk+0x14>)
 80095ea:	6811      	ldr	r1, [r2, #0]
 80095ec:	4603      	mov	r3, r0
 80095ee:	b909      	cbnz	r1, 80095f4 <_sbrk+0xc>
 80095f0:	4903      	ldr	r1, [pc, #12]	@ (8009600 <_sbrk+0x18>)
 80095f2:	6011      	str	r1, [r2, #0]
 80095f4:	6810      	ldr	r0, [r2, #0]
 80095f6:	4403      	add	r3, r0
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	4770      	bx	lr
 80095fc:	200005f8 	.word	0x200005f8
 8009600:	20000600 	.word	0x20000600

08009604 <_exit>:
 8009604:	e7fe      	b.n	8009604 <_exit>
	...

08009608 <_init>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr

08009614 <_fini>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	bf00      	nop
 8009618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961a:	bc08      	pop	{r3}
 800961c:	469e      	mov	lr, r3
 800961e:	4770      	bx	lr
=======
 8008854:	2396      	movs	r3, #150	; 0x96
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4b32      	ldr	r3, [pc, #200]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800885e:	4a33      	ldr	r2, [pc, #204]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008860:	4930      	ldr	r1, [pc, #192]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008862:	4835      	ldr	r0, [pc, #212]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008864:	f7fc fe34 	bl	80054d0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>
 8008868:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800886c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10b      	bne.n	800888e <_Z41__static_initialization_and_destruction_0ii+0x292>
 8008876:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800887a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008884:	4293      	cmp	r3, r2
 8008886:	d102      	bne.n	800888e <_Z41__static_initialization_and_destruction_0ii+0x292>
 8008888:	4803      	ldr	r0, [pc, #12]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800888a:	f7ff fea5 	bl	80085d8 <_ZN15myReportHandlerD1Ev>
 800888e:	bf00      	nop
 8008890:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200001e8 	.word	0x200001e8
 800889c:	200001ec 	.word	0x200001ec
 80088a0:	200001f8 	.word	0x200001f8
 80088a4:	20000204 	.word	0x20000204
 80088a8:	20000210 	.word	0x20000210
 80088ac:	2000021c 	.word	0x2000021c
 80088b0:	20000238 	.word	0x20000238
 80088b4:	20000258 	.word	0x20000258
 80088b8:	20000268 	.word	0x20000268
 80088bc:	08009614 	.word	0x08009614
 80088c0:	08009618 	.word	0x08009618
 80088c4:	20000290 	.word	0x20000290
 80088c8:	200002b8 	.word	0x200002b8
 80088cc:	0800961c 	.word	0x0800961c
 80088d0:	200002d4 	.word	0x200002d4
 80088d4:	08009628 	.word	0x08009628
 80088d8:	200002e0 	.word	0x200002e0
 80088dc:	08009634 	.word	0x08009634
 80088e0:	200002ec 	.word	0x200002ec
 80088e4:	08009640 	.word	0x08009640
 80088e8:	200002f8 	.word	0x200002f8
 80088ec:	0800964c 	.word	0x0800964c
 80088f0:	20000304 	.word	0x20000304
 80088f4:	0800965c 	.word	0x0800965c
 80088f8:	2000030c 	.word	0x2000030c
 80088fc:	20000314 	.word	0x20000314
 8008900:	20000324 	.word	0x20000324
 8008904:	20000328 	.word	0x20000328
 8008908:	20000330 	.word	0x20000330
 800890c:	2000037c 	.word	0x2000037c
 8008910:	2000038c 	.word	0x2000038c
 8008914:	2000039c 	.word	0x2000039c
 8008918:	200003bc 	.word	0x200003bc
 800891c:	200003dc 	.word	0x200003dc
 8008920:	200003f4 	.word	0x200003f4
 8008924:	2000040c 	.word	0x2000040c
 8008928:	20000424 	.word	0x20000424
 800892c:	2000043c 	.word	0x2000043c
 8008930:	20000454 	.word	0x20000454
 8008934:	2000046c 	.word	0x2000046c
 8008938:	20000484 	.word	0x20000484

0800893c <_GLOBAL__sub_I_report>:
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
 8008940:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008944:	2001      	movs	r0, #1
 8008946:	f7ff fe59 	bl	80085fc <_Z41__static_initialization_and_destruction_0ii>
 800894a:	bd80      	pop	{r7, pc}

0800894c <_GLOBAL__sub_D_report>:
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
 8008950:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008954:	2000      	movs	r0, #0
 8008956:	f7ff fe51 	bl	80085fc <_Z41__static_initialization_and_destruction_0ii>
 800895a:	bd80      	pop	{r7, pc}

0800895c <Reset_Handler>:
  ldr   r0, =_estack
 800895c:	480d      	ldr	r0, [pc, #52]	; (8008994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800895e:	4685      	mov	sp, r0
  bl  SystemInit
 8008960:	f7f7 ff38 	bl	80007d4 <SystemInit>
  ldr r0, =_sdata
 8008964:	480c      	ldr	r0, [pc, #48]	; (8008998 <LoopForever+0x6>)
  ldr r1, =_edata
 8008966:	490d      	ldr	r1, [pc, #52]	; (800899c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008968:	4a0d      	ldr	r2, [pc, #52]	; (80089a0 <LoopForever+0xe>)
  movs r3, #0
 800896a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800896c:	e002      	b.n	8008974 <LoopCopyDataInit>

0800896e <CopyDataInit>:
  ldr r4, [r2, r3]
 800896e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008972:	3304      	adds	r3, #4

08008974 <LoopCopyDataInit>:
  adds r4, r0, r3
 8008974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008978:	d3f9      	bcc.n	800896e <CopyDataInit>
  ldr r2, =_sbss
 800897a:	4a0a      	ldr	r2, [pc, #40]	; (80089a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800897c:	4c0a      	ldr	r4, [pc, #40]	; (80089a8 <LoopForever+0x16>)
  movs r3, #0
 800897e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008980:	e001      	b.n	8008986 <LoopFillZerobss>

08008982 <FillZerobss>:
  str  r3, [r2]
 8008982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008984:	3204      	adds	r2, #4

08008986 <LoopFillZerobss>:
  cmp r2, r4
 8008986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008988:	d3fb      	bcc.n	8008982 <FillZerobss>
  bl __libc_init_array
 800898a:	f000 f9a9 	bl	8008ce0 <__libc_init_array>
  bl main
 800898e:	f7ff fd77 	bl	8008480 <main>

08008992 <LoopForever>:
    b LoopForever
 8008992:	e7fe      	b.n	8008992 <LoopForever>
  ldr   r0, =_estack
 8008994:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8008998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800899c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80089a0:	08009b84 	.word	0x08009b84
  ldr r2, =_sbss
 80089a4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80089a8:	200005fc 	.word	0x200005fc

080089ac <BusFault_Handler>:
  b Infinite_Loop
 80089ac:	e7fe      	b.n	80089ac <BusFault_Handler>

080089ae <_Znwj>:
 80089ae:	2801      	cmp	r0, #1
 80089b0:	bf38      	it	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4604      	mov	r4, r0
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f81b 	bl	80089f4 <malloc>
 80089be:	b100      	cbz	r0, 80089c2 <_Znwj+0x14>
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	f000 f807 	bl	80089d4 <_ZSt15get_new_handlerv>
 80089c6:	b908      	cbnz	r0, 80089cc <_Znwj+0x1e>
 80089c8:	f000 f80c 	bl	80089e4 <abort>
 80089cc:	4780      	blx	r0
 80089ce:	e7f3      	b.n	80089b8 <_Znwj+0xa>

080089d0 <_Znaj>:
 80089d0:	f7ff bfed 	b.w	80089ae <_Znwj>

080089d4 <_ZSt15get_new_handlerv>:
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <_ZSt15get_new_handlerv+0xc>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	f3bf 8f5b 	dmb	ish
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	200004ac 	.word	0x200004ac

080089e4 <abort>:
 80089e4:	b508      	push	{r3, lr}
 80089e6:	2006      	movs	r0, #6
 80089e8:	f000 f94e 	bl	8008c88 <raise>
 80089ec:	2001      	movs	r0, #1
 80089ee:	f000 fd4f 	bl	8009490 <_exit>
	...

080089f4 <malloc>:
 80089f4:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <malloc+0xc>)
 80089f6:	4601      	mov	r1, r0
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	f000 b823 	b.w	8008a44 <_malloc_r>
 80089fe:	bf00      	nop
 8008a00:	20000150 	.word	0x20000150

08008a04 <sbrk_aligned>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	4e0e      	ldr	r6, [pc, #56]	; (8008a40 <sbrk_aligned+0x3c>)
 8008a08:	460c      	mov	r4, r1
 8008a0a:	6831      	ldr	r1, [r6, #0]
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	b911      	cbnz	r1, 8008a16 <sbrk_aligned+0x12>
 8008a10:	f000 f956 	bl	8008cc0 <_sbrk_r>
 8008a14:	6030      	str	r0, [r6, #0]
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 f951 	bl	8008cc0 <_sbrk_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d00a      	beq.n	8008a38 <sbrk_aligned+0x34>
 8008a22:	1cc4      	adds	r4, r0, #3
 8008a24:	f024 0403 	bic.w	r4, r4, #3
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d007      	beq.n	8008a3c <sbrk_aligned+0x38>
 8008a2c:	1a21      	subs	r1, r4, r0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f946 	bl	8008cc0 <_sbrk_r>
 8008a34:	3001      	adds	r0, #1
 8008a36:	d101      	bne.n	8008a3c <sbrk_aligned+0x38>
 8008a38:	f04f 34ff 	mov.w	r4, #4294967295
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	200004b4 	.word	0x200004b4

08008a44 <_malloc_r>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	1ccd      	adds	r5, r1, #3
 8008a4a:	f025 0503 	bic.w	r5, r5, #3
 8008a4e:	3508      	adds	r5, #8
 8008a50:	2d0c      	cmp	r5, #12
 8008a52:	bf38      	it	cc
 8008a54:	250c      	movcc	r5, #12
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	4607      	mov	r7, r0
 8008a5a:	db01      	blt.n	8008a60 <_malloc_r+0x1c>
 8008a5c:	42a9      	cmp	r1, r5
 8008a5e:	d905      	bls.n	8008a6c <_malloc_r+0x28>
 8008a60:	230c      	movs	r3, #12
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	2600      	movs	r6, #0
 8008a66:	4630      	mov	r0, r6
 8008a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b40 <_malloc_r+0xfc>
 8008a70:	f000 f868 	bl	8008b44 <__malloc_lock>
 8008a74:	f8d8 3000 	ldr.w	r3, [r8]
 8008a78:	461c      	mov	r4, r3
 8008a7a:	bb5c      	cbnz	r4, 8008ad4 <_malloc_r+0x90>
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4638      	mov	r0, r7
 8008a80:	f7ff ffc0 	bl	8008a04 <sbrk_aligned>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	4604      	mov	r4, r0
 8008a88:	d155      	bne.n	8008b36 <_malloc_r+0xf2>
 8008a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a8e:	4626      	mov	r6, r4
 8008a90:	2e00      	cmp	r6, #0
 8008a92:	d145      	bne.n	8008b20 <_malloc_r+0xdc>
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	d048      	beq.n	8008b2a <_malloc_r+0xe6>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	eb04 0903 	add.w	r9, r4, r3
 8008aa2:	f000 f90d 	bl	8008cc0 <_sbrk_r>
 8008aa6:	4581      	cmp	r9, r0
 8008aa8:	d13f      	bne.n	8008b2a <_malloc_r+0xe6>
 8008aaa:	6821      	ldr	r1, [r4, #0]
 8008aac:	1a6d      	subs	r5, r5, r1
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff ffa7 	bl	8008a04 <sbrk_aligned>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d037      	beq.n	8008b2a <_malloc_r+0xe6>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	442b      	add	r3, r5
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d038      	beq.n	8008b3a <_malloc_r+0xf6>
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	42a2      	cmp	r2, r4
 8008acc:	d12b      	bne.n	8008b26 <_malloc_r+0xe2>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	e00f      	b.n	8008af4 <_malloc_r+0xb0>
 8008ad4:	6822      	ldr	r2, [r4, #0]
 8008ad6:	1b52      	subs	r2, r2, r5
 8008ad8:	d41f      	bmi.n	8008b1a <_malloc_r+0xd6>
 8008ada:	2a0b      	cmp	r2, #11
 8008adc:	d917      	bls.n	8008b0e <_malloc_r+0xca>
 8008ade:	1961      	adds	r1, r4, r5
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	6025      	str	r5, [r4, #0]
 8008ae4:	bf18      	it	ne
 8008ae6:	6059      	strne	r1, [r3, #4]
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	bf08      	it	eq
 8008aec:	f8c8 1000 	streq.w	r1, [r8]
 8008af0:	5162      	str	r2, [r4, r5]
 8008af2:	604b      	str	r3, [r1, #4]
 8008af4:	4638      	mov	r0, r7
 8008af6:	f104 060b 	add.w	r6, r4, #11
 8008afa:	f000 f829 	bl	8008b50 <__malloc_unlock>
 8008afe:	f026 0607 	bic.w	r6, r6, #7
 8008b02:	1d23      	adds	r3, r4, #4
 8008b04:	1af2      	subs	r2, r6, r3
 8008b06:	d0ae      	beq.n	8008a66 <_malloc_r+0x22>
 8008b08:	1b9b      	subs	r3, r3, r6
 8008b0a:	50a3      	str	r3, [r4, r2]
 8008b0c:	e7ab      	b.n	8008a66 <_malloc_r+0x22>
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	6862      	ldr	r2, [r4, #4]
 8008b12:	d1dd      	bne.n	8008ad0 <_malloc_r+0x8c>
 8008b14:	f8c8 2000 	str.w	r2, [r8]
 8008b18:	e7ec      	b.n	8008af4 <_malloc_r+0xb0>
 8008b1a:	4623      	mov	r3, r4
 8008b1c:	6864      	ldr	r4, [r4, #4]
 8008b1e:	e7ac      	b.n	8008a7a <_malloc_r+0x36>
 8008b20:	4634      	mov	r4, r6
 8008b22:	6876      	ldr	r6, [r6, #4]
 8008b24:	e7b4      	b.n	8008a90 <_malloc_r+0x4c>
 8008b26:	4613      	mov	r3, r2
 8008b28:	e7cc      	b.n	8008ac4 <_malloc_r+0x80>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f000 f80e 	bl	8008b50 <__malloc_unlock>
 8008b34:	e797      	b.n	8008a66 <_malloc_r+0x22>
 8008b36:	6025      	str	r5, [r4, #0]
 8008b38:	e7dc      	b.n	8008af4 <_malloc_r+0xb0>
 8008b3a:	605b      	str	r3, [r3, #4]
 8008b3c:	deff      	udf	#255	; 0xff
 8008b3e:	bf00      	nop
 8008b40:	200004b0 	.word	0x200004b0

08008b44 <__malloc_lock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	; (8008b4c <__malloc_lock+0x8>)
 8008b46:	f000 b8ef 	b.w	8008d28 <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	200005f4 	.word	0x200005f4

08008b50 <__malloc_unlock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__malloc_unlock+0x8>)
 8008b52:	f000 b8ea 	b.w	8008d2a <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	200005f4 	.word	0x200005f4

08008b5c <sniprintf>:
 8008b5c:	b40c      	push	{r2, r3}
 8008b5e:	b530      	push	{r4, r5, lr}
 8008b60:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <sniprintf+0x64>)
 8008b62:	1e0c      	subs	r4, r1, #0
 8008b64:	681d      	ldr	r5, [r3, #0]
 8008b66:	b09d      	sub	sp, #116	; 0x74
 8008b68:	da08      	bge.n	8008b7c <sniprintf+0x20>
 8008b6a:	238b      	movs	r3, #139	; 0x8b
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b72:	b01d      	add	sp, #116	; 0x74
 8008b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b78:	b002      	add	sp, #8
 8008b7a:	4770      	bx	lr
 8008b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b84:	bf14      	ite	ne
 8008b86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b8a:	4623      	moveq	r3, r4
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b94:	9002      	str	r0, [sp, #8]
 8008b96:	9006      	str	r0, [sp, #24]
 8008b98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b9e:	ab21      	add	r3, sp, #132	; 0x84
 8008ba0:	a902      	add	r1, sp, #8
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	f000 f975 	bl	8008e94 <_svfiprintf_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	bfbc      	itt	lt
 8008bae:	238b      	movlt	r3, #139	; 0x8b
 8008bb0:	602b      	strlt	r3, [r5, #0]
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	d0dd      	beq.n	8008b72 <sniprintf+0x16>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e7d9      	b.n	8008b72 <sniprintf+0x16>
 8008bbe:	bf00      	nop
 8008bc0:	20000150 	.word	0x20000150

08008bc4 <_vsniprintf_r>:
 8008bc4:	b530      	push	{r4, r5, lr}
 8008bc6:	4614      	mov	r4, r2
 8008bc8:	2c00      	cmp	r4, #0
 8008bca:	b09b      	sub	sp, #108	; 0x6c
 8008bcc:	4605      	mov	r5, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	da05      	bge.n	8008bde <_vsniprintf_r+0x1a>
 8008bd2:	238b      	movs	r3, #139	; 0x8b
 8008bd4:	6003      	str	r3, [r0, #0]
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	b01b      	add	sp, #108	; 0x6c
 8008bdc:	bd30      	pop	{r4, r5, pc}
 8008bde:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008be2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008be6:	bf14      	ite	ne
 8008be8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bec:	4623      	moveq	r3, r4
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bf6:	9100      	str	r1, [sp, #0]
 8008bf8:	9104      	str	r1, [sp, #16]
 8008bfa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008bfe:	4669      	mov	r1, sp
 8008c00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c02:	f000 f947 	bl	8008e94 <_svfiprintf_r>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	bfbc      	itt	lt
 8008c0a:	238b      	movlt	r3, #139	; 0x8b
 8008c0c:	602b      	strlt	r3, [r5, #0]
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d0e3      	beq.n	8008bda <_vsniprintf_r+0x16>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e7df      	b.n	8008bda <_vsniprintf_r+0x16>
	...

08008c1c <vsniprintf>:
 8008c1c:	b507      	push	{r0, r1, r2, lr}
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	460a      	mov	r2, r1
 8008c24:	4601      	mov	r1, r0
 8008c26:	4803      	ldr	r0, [pc, #12]	; (8008c34 <vsniprintf+0x18>)
 8008c28:	6800      	ldr	r0, [r0, #0]
 8008c2a:	f7ff ffcb 	bl	8008bc4 <_vsniprintf_r>
 8008c2e:	b003      	add	sp, #12
 8008c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c34:	20000150 	.word	0x20000150

08008c38 <_raise_r>:
 8008c38:	291f      	cmp	r1, #31
 8008c3a:	b538      	push	{r3, r4, r5, lr}
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	d904      	bls.n	8008c4c <_raise_r+0x14>
 8008c42:	2316      	movs	r3, #22
 8008c44:	6003      	str	r3, [r0, #0]
 8008c46:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008c4e:	b112      	cbz	r2, 8008c56 <_raise_r+0x1e>
 8008c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c54:	b94b      	cbnz	r3, 8008c6a <_raise_r+0x32>
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 f830 	bl	8008cbc <_getpid_r>
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4601      	mov	r1, r0
 8008c60:	4620      	mov	r0, r4
 8008c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c66:	f000 b817 	b.w	8008c98 <_kill_r>
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d00a      	beq.n	8008c84 <_raise_r+0x4c>
 8008c6e:	1c59      	adds	r1, r3, #1
 8008c70:	d103      	bne.n	8008c7a <_raise_r+0x42>
 8008c72:	2316      	movs	r3, #22
 8008c74:	6003      	str	r3, [r0, #0]
 8008c76:	2001      	movs	r0, #1
 8008c78:	e7e7      	b.n	8008c4a <_raise_r+0x12>
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c80:	4628      	mov	r0, r5
 8008c82:	4798      	blx	r3
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7e0      	b.n	8008c4a <_raise_r+0x12>

08008c88 <raise>:
 8008c88:	4b02      	ldr	r3, [pc, #8]	; (8008c94 <raise+0xc>)
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	f7ff bfd3 	b.w	8008c38 <_raise_r>
 8008c92:	bf00      	nop
 8008c94:	20000150 	.word	0x20000150

08008c98 <_kill_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	; (8008cb8 <_kill_r+0x20>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	602b      	str	r3, [r5, #0]
 8008ca6:	f000 fbdd 	bl	8009464 <_kill>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d102      	bne.n	8008cb4 <_kill_r+0x1c>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	b103      	cbz	r3, 8008cb4 <_kill_r+0x1c>
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200005f0 	.word	0x200005f0

08008cbc <_getpid_r>:
 8008cbc:	f000 bbca 	b.w	8009454 <_getpid>

08008cc0 <_sbrk_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d06      	ldr	r5, [pc, #24]	; (8008cdc <_sbrk_r+0x1c>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f000 fbd2 	bl	8009474 <_sbrk>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_sbrk_r+0x1a>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_sbrk_r+0x1a>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	200005f0 	.word	0x200005f0

08008ce0 <__libc_init_array>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4d0d      	ldr	r5, [pc, #52]	; (8008d18 <__libc_init_array+0x38>)
 8008ce4:	4c0d      	ldr	r4, [pc, #52]	; (8008d1c <__libc_init_array+0x3c>)
 8008ce6:	1b64      	subs	r4, r4, r5
 8008ce8:	10a4      	asrs	r4, r4, #2
 8008cea:	2600      	movs	r6, #0
 8008cec:	42a6      	cmp	r6, r4
 8008cee:	d109      	bne.n	8008d04 <__libc_init_array+0x24>
 8008cf0:	4d0b      	ldr	r5, [pc, #44]	; (8008d20 <__libc_init_array+0x40>)
 8008cf2:	4c0c      	ldr	r4, [pc, #48]	; (8008d24 <__libc_init_array+0x44>)
 8008cf4:	f000 fbce 	bl	8009494 <_init>
 8008cf8:	1b64      	subs	r4, r4, r5
 8008cfa:	10a4      	asrs	r4, r4, #2
 8008cfc:	2600      	movs	r6, #0
 8008cfe:	42a6      	cmp	r6, r4
 8008d00:	d105      	bne.n	8008d0e <__libc_init_array+0x2e>
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d08:	4798      	blx	r3
 8008d0a:	3601      	adds	r6, #1
 8008d0c:	e7ee      	b.n	8008cec <__libc_init_array+0xc>
 8008d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d12:	4798      	blx	r3
 8008d14:	3601      	adds	r6, #1
 8008d16:	e7f2      	b.n	8008cfe <__libc_init_array+0x1e>
 8008d18:	08009b70 	.word	0x08009b70
 8008d1c:	08009b70 	.word	0x08009b70
 8008d20:	08009b70 	.word	0x08009b70
 8008d24:	08009b7c 	.word	0x08009b7c

08008d28 <__retarget_lock_acquire_recursive>:
 8008d28:	4770      	bx	lr

08008d2a <__retarget_lock_release_recursive>:
 8008d2a:	4770      	bx	lr

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d42:	4291      	cmp	r1, r2
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <_free_r>:
 8008d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4a:	2900      	cmp	r1, #0
 8008d4c:	d044      	beq.n	8008dd8 <_free_r+0x90>
 8008d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d52:	9001      	str	r0, [sp, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f1a1 0404 	sub.w	r4, r1, #4
 8008d5a:	bfb8      	it	lt
 8008d5c:	18e4      	addlt	r4, r4, r3
 8008d5e:	f7ff fef1 	bl	8008b44 <__malloc_lock>
 8008d62:	4a1e      	ldr	r2, [pc, #120]	; (8008ddc <_free_r+0x94>)
 8008d64:	9801      	ldr	r0, [sp, #4]
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	b933      	cbnz	r3, 8008d78 <_free_r+0x30>
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	6014      	str	r4, [r2, #0]
 8008d6e:	b003      	add	sp, #12
 8008d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d74:	f7ff beec 	b.w	8008b50 <__malloc_unlock>
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	d908      	bls.n	8008d8e <_free_r+0x46>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf01      	itttt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	1949      	addeq	r1, r1, r5
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	e7ed      	b.n	8008d6a <_free_r+0x22>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	b10b      	cbz	r3, 8008d98 <_free_r+0x50>
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d9fa      	bls.n	8008d8e <_free_r+0x46>
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	1855      	adds	r5, r2, r1
 8008d9c:	42a5      	cmp	r5, r4
 8008d9e:	d10b      	bne.n	8008db8 <_free_r+0x70>
 8008da0:	6824      	ldr	r4, [r4, #0]
 8008da2:	4421      	add	r1, r4
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	d1e0      	bne.n	8008d6e <_free_r+0x26>
 8008dac:	681c      	ldr	r4, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	6053      	str	r3, [r2, #4]
 8008db2:	440c      	add	r4, r1
 8008db4:	6014      	str	r4, [r2, #0]
 8008db6:	e7da      	b.n	8008d6e <_free_r+0x26>
 8008db8:	d902      	bls.n	8008dc0 <_free_r+0x78>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6003      	str	r3, [r0, #0]
 8008dbe:	e7d6      	b.n	8008d6e <_free_r+0x26>
 8008dc0:	6825      	ldr	r5, [r4, #0]
 8008dc2:	1961      	adds	r1, r4, r5
 8008dc4:	428b      	cmp	r3, r1
 8008dc6:	bf04      	itt	eq
 8008dc8:	6819      	ldreq	r1, [r3, #0]
 8008dca:	685b      	ldreq	r3, [r3, #4]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	bf04      	itt	eq
 8008dd0:	1949      	addeq	r1, r1, r5
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	6054      	str	r4, [r2, #4]
 8008dd6:	e7ca      	b.n	8008d6e <_free_r+0x26>
 8008dd8:	b003      	add	sp, #12
 8008dda:	bd30      	pop	{r4, r5, pc}
 8008ddc:	200004b0 	.word	0x200004b0

08008de0 <__ssputs_r>:
 8008de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de4:	688e      	ldr	r6, [r1, #8]
 8008de6:	461f      	mov	r7, r3
 8008de8:	42be      	cmp	r6, r7
 8008dea:	680b      	ldr	r3, [r1, #0]
 8008dec:	4682      	mov	sl, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	4690      	mov	r8, r2
 8008df2:	d82c      	bhi.n	8008e4e <__ssputs_r+0x6e>
 8008df4:	898a      	ldrh	r2, [r1, #12]
 8008df6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dfa:	d026      	beq.n	8008e4a <__ssputs_r+0x6a>
 8008dfc:	6965      	ldr	r5, [r4, #20]
 8008dfe:	6909      	ldr	r1, [r1, #16]
 8008e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e04:	eba3 0901 	sub.w	r9, r3, r1
 8008e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e0c:	1c7b      	adds	r3, r7, #1
 8008e0e:	444b      	add	r3, r9
 8008e10:	106d      	asrs	r5, r5, #1
 8008e12:	429d      	cmp	r5, r3
 8008e14:	bf38      	it	cc
 8008e16:	461d      	movcc	r5, r3
 8008e18:	0553      	lsls	r3, r2, #21
 8008e1a:	d527      	bpl.n	8008e6c <__ssputs_r+0x8c>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7ff fe11 	bl	8008a44 <_malloc_r>
 8008e22:	4606      	mov	r6, r0
 8008e24:	b360      	cbz	r0, 8008e80 <__ssputs_r+0xa0>
 8008e26:	6921      	ldr	r1, [r4, #16]
 8008e28:	464a      	mov	r2, r9
 8008e2a:	f7ff ff7f 	bl	8008d2c <memcpy>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	6126      	str	r6, [r4, #16]
 8008e3c:	6165      	str	r5, [r4, #20]
 8008e3e:	444e      	add	r6, r9
 8008e40:	eba5 0509 	sub.w	r5, r5, r9
 8008e44:	6026      	str	r6, [r4, #0]
 8008e46:	60a5      	str	r5, [r4, #8]
 8008e48:	463e      	mov	r6, r7
 8008e4a:	42be      	cmp	r6, r7
 8008e4c:	d900      	bls.n	8008e50 <__ssputs_r+0x70>
 8008e4e:	463e      	mov	r6, r7
 8008e50:	6820      	ldr	r0, [r4, #0]
 8008e52:	4632      	mov	r2, r6
 8008e54:	4641      	mov	r1, r8
 8008e56:	f000 faab 	bl	80093b0 <memmove>
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	1b9b      	subs	r3, r3, r6
 8008e5e:	60a3      	str	r3, [r4, #8]
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	4433      	add	r3, r6
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	2000      	movs	r0, #0
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	f000 fab9 	bl	80093e4 <_realloc_r>
 8008e72:	4606      	mov	r6, r0
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d1e0      	bne.n	8008e3a <__ssputs_r+0x5a>
 8008e78:	6921      	ldr	r1, [r4, #16]
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f7ff ff64 	bl	8008d48 <_free_r>
 8008e80:	230c      	movs	r3, #12
 8008e82:	f8ca 3000 	str.w	r3, [sl]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	e7e9      	b.n	8008e68 <__ssputs_r+0x88>

08008e94 <_svfiprintf_r>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	4698      	mov	r8, r3
 8008e9a:	898b      	ldrh	r3, [r1, #12]
 8008e9c:	061b      	lsls	r3, r3, #24
 8008e9e:	b09d      	sub	sp, #116	; 0x74
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	d50e      	bpl.n	8008ec6 <_svfiprintf_r+0x32>
 8008ea8:	690b      	ldr	r3, [r1, #16]
 8008eaa:	b963      	cbnz	r3, 8008ec6 <_svfiprintf_r+0x32>
 8008eac:	2140      	movs	r1, #64	; 0x40
 8008eae:	f7ff fdc9 	bl	8008a44 <_malloc_r>
 8008eb2:	6028      	str	r0, [r5, #0]
 8008eb4:	6128      	str	r0, [r5, #16]
 8008eb6:	b920      	cbnz	r0, 8008ec2 <_svfiprintf_r+0x2e>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	e0d0      	b.n	8009064 <_svfiprintf_r+0x1d0>
 8008ec2:	2340      	movs	r3, #64	; 0x40
 8008ec4:	616b      	str	r3, [r5, #20]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eca:	2320      	movs	r3, #32
 8008ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed4:	2330      	movs	r3, #48	; 0x30
 8008ed6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800907c <_svfiprintf_r+0x1e8>
 8008eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ede:	f04f 0901 	mov.w	r9, #1
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	469a      	mov	sl, r3
 8008ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eea:	b10a      	cbz	r2, 8008ef0 <_svfiprintf_r+0x5c>
 8008eec:	2a25      	cmp	r2, #37	; 0x25
 8008eee:	d1f9      	bne.n	8008ee4 <_svfiprintf_r+0x50>
 8008ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef4:	d00b      	beq.n	8008f0e <_svfiprintf_r+0x7a>
 8008ef6:	465b      	mov	r3, fp
 8008ef8:	4622      	mov	r2, r4
 8008efa:	4629      	mov	r1, r5
 8008efc:	4638      	mov	r0, r7
 8008efe:	f7ff ff6f 	bl	8008de0 <__ssputs_r>
 8008f02:	3001      	adds	r0, #1
 8008f04:	f000 80a9 	beq.w	800905a <_svfiprintf_r+0x1c6>
 8008f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0a:	445a      	add	r2, fp
 8008f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 80a1 	beq.w	800905a <_svfiprintf_r+0x1c6>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f22:	f10a 0a01 	add.w	sl, sl, #1
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	9307      	str	r3, [sp, #28]
 8008f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8008f30:	4654      	mov	r4, sl
 8008f32:	2205      	movs	r2, #5
 8008f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f38:	4850      	ldr	r0, [pc, #320]	; (800907c <_svfiprintf_r+0x1e8>)
 8008f3a:	f7f7 f9b9 	bl	80002b0 <memchr>
 8008f3e:	9a04      	ldr	r2, [sp, #16]
 8008f40:	b9d8      	cbnz	r0, 8008f7a <_svfiprintf_r+0xe6>
 8008f42:	06d0      	lsls	r0, r2, #27
 8008f44:	bf44      	itt	mi
 8008f46:	2320      	movmi	r3, #32
 8008f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4c:	0711      	lsls	r1, r2, #28
 8008f4e:	bf44      	itt	mi
 8008f50:	232b      	movmi	r3, #43	; 0x2b
 8008f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f56:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5c:	d015      	beq.n	8008f8a <_svfiprintf_r+0xf6>
 8008f5e:	9a07      	ldr	r2, [sp, #28]
 8008f60:	4654      	mov	r4, sl
 8008f62:	2000      	movs	r0, #0
 8008f64:	f04f 0c0a 	mov.w	ip, #10
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6e:	3b30      	subs	r3, #48	; 0x30
 8008f70:	2b09      	cmp	r3, #9
 8008f72:	d94d      	bls.n	8009010 <_svfiprintf_r+0x17c>
 8008f74:	b1b0      	cbz	r0, 8008fa4 <_svfiprintf_r+0x110>
 8008f76:	9207      	str	r2, [sp, #28]
 8008f78:	e014      	b.n	8008fa4 <_svfiprintf_r+0x110>
 8008f7a:	eba0 0308 	sub.w	r3, r0, r8
 8008f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f82:	4313      	orrs	r3, r2
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	46a2      	mov	sl, r4
 8008f88:	e7d2      	b.n	8008f30 <_svfiprintf_r+0x9c>
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	1d19      	adds	r1, r3, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	9103      	str	r1, [sp, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfbb      	ittet	lt
 8008f96:	425b      	neglt	r3, r3
 8008f98:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9c:	9307      	strge	r3, [sp, #28]
 8008f9e:	9307      	strlt	r3, [sp, #28]
 8008fa0:	bfb8      	it	lt
 8008fa2:	9204      	strlt	r2, [sp, #16]
 8008fa4:	7823      	ldrb	r3, [r4, #0]
 8008fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa8:	d10c      	bne.n	8008fc4 <_svfiprintf_r+0x130>
 8008faa:	7863      	ldrb	r3, [r4, #1]
 8008fac:	2b2a      	cmp	r3, #42	; 0x2a
 8008fae:	d134      	bne.n	800901a <_svfiprintf_r+0x186>
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	1d1a      	adds	r2, r3, #4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	9203      	str	r2, [sp, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bfb8      	it	lt
 8008fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fc0:	3402      	adds	r4, #2
 8008fc2:	9305      	str	r3, [sp, #20]
 8008fc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800908c <_svfiprintf_r+0x1f8>
 8008fc8:	7821      	ldrb	r1, [r4, #0]
 8008fca:	2203      	movs	r2, #3
 8008fcc:	4650      	mov	r0, sl
 8008fce:	f7f7 f96f 	bl	80002b0 <memchr>
 8008fd2:	b138      	cbz	r0, 8008fe4 <_svfiprintf_r+0x150>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	eba0 000a 	sub.w	r0, r0, sl
 8008fda:	2240      	movs	r2, #64	; 0x40
 8008fdc:	4082      	lsls	r2, r0
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	3401      	adds	r4, #1
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	4825      	ldr	r0, [pc, #148]	; (8009080 <_svfiprintf_r+0x1ec>)
 8008fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fee:	2206      	movs	r2, #6
 8008ff0:	f7f7 f95e 	bl	80002b0 <memchr>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d038      	beq.n	800906a <_svfiprintf_r+0x1d6>
 8008ff8:	4b22      	ldr	r3, [pc, #136]	; (8009084 <_svfiprintf_r+0x1f0>)
 8008ffa:	bb1b      	cbnz	r3, 8009044 <_svfiprintf_r+0x1b0>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	3307      	adds	r3, #7
 8009000:	f023 0307 	bic.w	r3, r3, #7
 8009004:	3308      	adds	r3, #8
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	4433      	add	r3, r6
 800900c:	9309      	str	r3, [sp, #36]	; 0x24
 800900e:	e768      	b.n	8008ee2 <_svfiprintf_r+0x4e>
 8009010:	fb0c 3202 	mla	r2, ip, r2, r3
 8009014:	460c      	mov	r4, r1
 8009016:	2001      	movs	r0, #1
 8009018:	e7a6      	b.n	8008f68 <_svfiprintf_r+0xd4>
 800901a:	2300      	movs	r3, #0
 800901c:	3401      	adds	r4, #1
 800901e:	9305      	str	r3, [sp, #20]
 8009020:	4619      	mov	r1, r3
 8009022:	f04f 0c0a 	mov.w	ip, #10
 8009026:	4620      	mov	r0, r4
 8009028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902c:	3a30      	subs	r2, #48	; 0x30
 800902e:	2a09      	cmp	r2, #9
 8009030:	d903      	bls.n	800903a <_svfiprintf_r+0x1a6>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0c6      	beq.n	8008fc4 <_svfiprintf_r+0x130>
 8009036:	9105      	str	r1, [sp, #20]
 8009038:	e7c4      	b.n	8008fc4 <_svfiprintf_r+0x130>
 800903a:	fb0c 2101 	mla	r1, ip, r1, r2
 800903e:	4604      	mov	r4, r0
 8009040:	2301      	movs	r3, #1
 8009042:	e7f0      	b.n	8009026 <_svfiprintf_r+0x192>
 8009044:	ab03      	add	r3, sp, #12
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	462a      	mov	r2, r5
 800904a:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <_svfiprintf_r+0x1f4>)
 800904c:	a904      	add	r1, sp, #16
 800904e:	4638      	mov	r0, r7
 8009050:	f3af 8000 	nop.w
 8009054:	1c42      	adds	r2, r0, #1
 8009056:	4606      	mov	r6, r0
 8009058:	d1d6      	bne.n	8009008 <_svfiprintf_r+0x174>
 800905a:	89ab      	ldrh	r3, [r5, #12]
 800905c:	065b      	lsls	r3, r3, #25
 800905e:	f53f af2d 	bmi.w	8008ebc <_svfiprintf_r+0x28>
 8009062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009064:	b01d      	add	sp, #116	; 0x74
 8009066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906a:	ab03      	add	r3, sp, #12
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	462a      	mov	r2, r5
 8009070:	4b05      	ldr	r3, [pc, #20]	; (8009088 <_svfiprintf_r+0x1f4>)
 8009072:	a904      	add	r1, sp, #16
 8009074:	4638      	mov	r0, r7
 8009076:	f000 f879 	bl	800916c <_printf_i>
 800907a:	e7eb      	b.n	8009054 <_svfiprintf_r+0x1c0>
 800907c:	08009b3c 	.word	0x08009b3c
 8009080:	08009b46 	.word	0x08009b46
 8009084:	00000000 	.word	0x00000000
 8009088:	08008de1 	.word	0x08008de1
 800908c:	08009b42 	.word	0x08009b42

08009090 <_printf_common>:
 8009090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	4616      	mov	r6, r2
 8009096:	4699      	mov	r9, r3
 8009098:	688a      	ldr	r2, [r1, #8]
 800909a:	690b      	ldr	r3, [r1, #16]
 800909c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090a0:	4293      	cmp	r3, r2
 80090a2:	bfb8      	it	lt
 80090a4:	4613      	movlt	r3, r2
 80090a6:	6033      	str	r3, [r6, #0]
 80090a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090ac:	4607      	mov	r7, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	b10a      	cbz	r2, 80090b6 <_printf_common+0x26>
 80090b2:	3301      	adds	r3, #1
 80090b4:	6033      	str	r3, [r6, #0]
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	0699      	lsls	r1, r3, #26
 80090ba:	bf42      	ittt	mi
 80090bc:	6833      	ldrmi	r3, [r6, #0]
 80090be:	3302      	addmi	r3, #2
 80090c0:	6033      	strmi	r3, [r6, #0]
 80090c2:	6825      	ldr	r5, [r4, #0]
 80090c4:	f015 0506 	ands.w	r5, r5, #6
 80090c8:	d106      	bne.n	80090d8 <_printf_common+0x48>
 80090ca:	f104 0a19 	add.w	sl, r4, #25
 80090ce:	68e3      	ldr	r3, [r4, #12]
 80090d0:	6832      	ldr	r2, [r6, #0]
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	dc26      	bgt.n	8009126 <_printf_common+0x96>
 80090d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090dc:	1e13      	subs	r3, r2, #0
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	bf18      	it	ne
 80090e2:	2301      	movne	r3, #1
 80090e4:	0692      	lsls	r2, r2, #26
 80090e6:	d42b      	bmi.n	8009140 <_printf_common+0xb0>
 80090e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ec:	4649      	mov	r1, r9
 80090ee:	4638      	mov	r0, r7
 80090f0:	47c0      	blx	r8
 80090f2:	3001      	adds	r0, #1
 80090f4:	d01e      	beq.n	8009134 <_printf_common+0xa4>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	6922      	ldr	r2, [r4, #16]
 80090fa:	f003 0306 	and.w	r3, r3, #6
 80090fe:	2b04      	cmp	r3, #4
 8009100:	bf02      	ittt	eq
 8009102:	68e5      	ldreq	r5, [r4, #12]
 8009104:	6833      	ldreq	r3, [r6, #0]
 8009106:	1aed      	subeq	r5, r5, r3
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	bf0c      	ite	eq
 800910c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009110:	2500      	movne	r5, #0
 8009112:	4293      	cmp	r3, r2
 8009114:	bfc4      	itt	gt
 8009116:	1a9b      	subgt	r3, r3, r2
 8009118:	18ed      	addgt	r5, r5, r3
 800911a:	2600      	movs	r6, #0
 800911c:	341a      	adds	r4, #26
 800911e:	42b5      	cmp	r5, r6
 8009120:	d11a      	bne.n	8009158 <_printf_common+0xc8>
 8009122:	2000      	movs	r0, #0
 8009124:	e008      	b.n	8009138 <_printf_common+0xa8>
 8009126:	2301      	movs	r3, #1
 8009128:	4652      	mov	r2, sl
 800912a:	4649      	mov	r1, r9
 800912c:	4638      	mov	r0, r7
 800912e:	47c0      	blx	r8
 8009130:	3001      	adds	r0, #1
 8009132:	d103      	bne.n	800913c <_printf_common+0xac>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913c:	3501      	adds	r5, #1
 800913e:	e7c6      	b.n	80090ce <_printf_common+0x3e>
 8009140:	18e1      	adds	r1, r4, r3
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	2030      	movs	r0, #48	; 0x30
 8009146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800914a:	4422      	add	r2, r4
 800914c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009154:	3302      	adds	r3, #2
 8009156:	e7c7      	b.n	80090e8 <_printf_common+0x58>
 8009158:	2301      	movs	r3, #1
 800915a:	4622      	mov	r2, r4
 800915c:	4649      	mov	r1, r9
 800915e:	4638      	mov	r0, r7
 8009160:	47c0      	blx	r8
 8009162:	3001      	adds	r0, #1
 8009164:	d0e6      	beq.n	8009134 <_printf_common+0xa4>
 8009166:	3601      	adds	r6, #1
 8009168:	e7d9      	b.n	800911e <_printf_common+0x8e>
	...

0800916c <_printf_i>:
 800916c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	7e0f      	ldrb	r7, [r1, #24]
 8009172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009174:	2f78      	cmp	r7, #120	; 0x78
 8009176:	4691      	mov	r9, r2
 8009178:	4680      	mov	r8, r0
 800917a:	460c      	mov	r4, r1
 800917c:	469a      	mov	sl, r3
 800917e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009182:	d807      	bhi.n	8009194 <_printf_i+0x28>
 8009184:	2f62      	cmp	r7, #98	; 0x62
 8009186:	d80a      	bhi.n	800919e <_printf_i+0x32>
 8009188:	2f00      	cmp	r7, #0
 800918a:	f000 80d4 	beq.w	8009336 <_printf_i+0x1ca>
 800918e:	2f58      	cmp	r7, #88	; 0x58
 8009190:	f000 80c0 	beq.w	8009314 <_printf_i+0x1a8>
 8009194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800919c:	e03a      	b.n	8009214 <_printf_i+0xa8>
 800919e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091a2:	2b15      	cmp	r3, #21
 80091a4:	d8f6      	bhi.n	8009194 <_printf_i+0x28>
 80091a6:	a101      	add	r1, pc, #4	; (adr r1, 80091ac <_printf_i+0x40>)
 80091a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091ac:	08009205 	.word	0x08009205
 80091b0:	08009219 	.word	0x08009219
 80091b4:	08009195 	.word	0x08009195
 80091b8:	08009195 	.word	0x08009195
 80091bc:	08009195 	.word	0x08009195
 80091c0:	08009195 	.word	0x08009195
 80091c4:	08009219 	.word	0x08009219
 80091c8:	08009195 	.word	0x08009195
 80091cc:	08009195 	.word	0x08009195
 80091d0:	08009195 	.word	0x08009195
 80091d4:	08009195 	.word	0x08009195
 80091d8:	0800931d 	.word	0x0800931d
 80091dc:	08009245 	.word	0x08009245
 80091e0:	080092d7 	.word	0x080092d7
 80091e4:	08009195 	.word	0x08009195
 80091e8:	08009195 	.word	0x08009195
 80091ec:	0800933f 	.word	0x0800933f
 80091f0:	08009195 	.word	0x08009195
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009195 	.word	0x08009195
 80091fc:	08009195 	.word	0x08009195
 8009200:	080092df 	.word	0x080092df
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	1d1a      	adds	r2, r3, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	602a      	str	r2, [r5, #0]
 800920c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009214:	2301      	movs	r3, #1
 8009216:	e09f      	b.n	8009358 <_printf_i+0x1ec>
 8009218:	6820      	ldr	r0, [r4, #0]
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	0607      	lsls	r7, r0, #24
 800921e:	f103 0104 	add.w	r1, r3, #4
 8009222:	6029      	str	r1, [r5, #0]
 8009224:	d501      	bpl.n	800922a <_printf_i+0xbe>
 8009226:	681e      	ldr	r6, [r3, #0]
 8009228:	e003      	b.n	8009232 <_printf_i+0xc6>
 800922a:	0646      	lsls	r6, r0, #25
 800922c:	d5fb      	bpl.n	8009226 <_printf_i+0xba>
 800922e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009232:	2e00      	cmp	r6, #0
 8009234:	da03      	bge.n	800923e <_printf_i+0xd2>
 8009236:	232d      	movs	r3, #45	; 0x2d
 8009238:	4276      	negs	r6, r6
 800923a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800923e:	485a      	ldr	r0, [pc, #360]	; (80093a8 <_printf_i+0x23c>)
 8009240:	230a      	movs	r3, #10
 8009242:	e012      	b.n	800926a <_printf_i+0xfe>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	1d19      	adds	r1, r3, #4
 800924a:	6029      	str	r1, [r5, #0]
 800924c:	0605      	lsls	r5, r0, #24
 800924e:	d501      	bpl.n	8009254 <_printf_i+0xe8>
 8009250:	681e      	ldr	r6, [r3, #0]
 8009252:	e002      	b.n	800925a <_printf_i+0xee>
 8009254:	0641      	lsls	r1, r0, #25
 8009256:	d5fb      	bpl.n	8009250 <_printf_i+0xe4>
 8009258:	881e      	ldrh	r6, [r3, #0]
 800925a:	4853      	ldr	r0, [pc, #332]	; (80093a8 <_printf_i+0x23c>)
 800925c:	2f6f      	cmp	r7, #111	; 0x6f
 800925e:	bf0c      	ite	eq
 8009260:	2308      	moveq	r3, #8
 8009262:	230a      	movne	r3, #10
 8009264:	2100      	movs	r1, #0
 8009266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800926a:	6865      	ldr	r5, [r4, #4]
 800926c:	60a5      	str	r5, [r4, #8]
 800926e:	2d00      	cmp	r5, #0
 8009270:	bfa2      	ittt	ge
 8009272:	6821      	ldrge	r1, [r4, #0]
 8009274:	f021 0104 	bicge.w	r1, r1, #4
 8009278:	6021      	strge	r1, [r4, #0]
 800927a:	b90e      	cbnz	r6, 8009280 <_printf_i+0x114>
 800927c:	2d00      	cmp	r5, #0
 800927e:	d04b      	beq.n	8009318 <_printf_i+0x1ac>
 8009280:	4615      	mov	r5, r2
 8009282:	fbb6 f1f3 	udiv	r1, r6, r3
 8009286:	fb03 6711 	mls	r7, r3, r1, r6
 800928a:	5dc7      	ldrb	r7, [r0, r7]
 800928c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009290:	4637      	mov	r7, r6
 8009292:	42bb      	cmp	r3, r7
 8009294:	460e      	mov	r6, r1
 8009296:	d9f4      	bls.n	8009282 <_printf_i+0x116>
 8009298:	2b08      	cmp	r3, #8
 800929a:	d10b      	bne.n	80092b4 <_printf_i+0x148>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	07de      	lsls	r6, r3, #31
 80092a0:	d508      	bpl.n	80092b4 <_printf_i+0x148>
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	6861      	ldr	r1, [r4, #4]
 80092a6:	4299      	cmp	r1, r3
 80092a8:	bfde      	ittt	le
 80092aa:	2330      	movle	r3, #48	; 0x30
 80092ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092b4:	1b52      	subs	r2, r2, r5
 80092b6:	6122      	str	r2, [r4, #16]
 80092b8:	f8cd a000 	str.w	sl, [sp]
 80092bc:	464b      	mov	r3, r9
 80092be:	aa03      	add	r2, sp, #12
 80092c0:	4621      	mov	r1, r4
 80092c2:	4640      	mov	r0, r8
 80092c4:	f7ff fee4 	bl	8009090 <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d14a      	bne.n	8009362 <_printf_i+0x1f6>
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	b004      	add	sp, #16
 80092d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	f043 0320 	orr.w	r3, r3, #32
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	4833      	ldr	r0, [pc, #204]	; (80093ac <_printf_i+0x240>)
 80092e0:	2778      	movs	r7, #120	; 0x78
 80092e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	6829      	ldr	r1, [r5, #0]
 80092ea:	061f      	lsls	r7, r3, #24
 80092ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80092f0:	d402      	bmi.n	80092f8 <_printf_i+0x18c>
 80092f2:	065f      	lsls	r7, r3, #25
 80092f4:	bf48      	it	mi
 80092f6:	b2b6      	uxthmi	r6, r6
 80092f8:	07df      	lsls	r7, r3, #31
 80092fa:	bf48      	it	mi
 80092fc:	f043 0320 	orrmi.w	r3, r3, #32
 8009300:	6029      	str	r1, [r5, #0]
 8009302:	bf48      	it	mi
 8009304:	6023      	strmi	r3, [r4, #0]
 8009306:	b91e      	cbnz	r6, 8009310 <_printf_i+0x1a4>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	f023 0320 	bic.w	r3, r3, #32
 800930e:	6023      	str	r3, [r4, #0]
 8009310:	2310      	movs	r3, #16
 8009312:	e7a7      	b.n	8009264 <_printf_i+0xf8>
 8009314:	4824      	ldr	r0, [pc, #144]	; (80093a8 <_printf_i+0x23c>)
 8009316:	e7e4      	b.n	80092e2 <_printf_i+0x176>
 8009318:	4615      	mov	r5, r2
 800931a:	e7bd      	b.n	8009298 <_printf_i+0x12c>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	6826      	ldr	r6, [r4, #0]
 8009320:	6961      	ldr	r1, [r4, #20]
 8009322:	1d18      	adds	r0, r3, #4
 8009324:	6028      	str	r0, [r5, #0]
 8009326:	0635      	lsls	r5, r6, #24
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	d501      	bpl.n	8009330 <_printf_i+0x1c4>
 800932c:	6019      	str	r1, [r3, #0]
 800932e:	e002      	b.n	8009336 <_printf_i+0x1ca>
 8009330:	0670      	lsls	r0, r6, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0x1c0>
 8009334:	8019      	strh	r1, [r3, #0]
 8009336:	2300      	movs	r3, #0
 8009338:	6123      	str	r3, [r4, #16]
 800933a:	4615      	mov	r5, r2
 800933c:	e7bc      	b.n	80092b8 <_printf_i+0x14c>
 800933e:	682b      	ldr	r3, [r5, #0]
 8009340:	1d1a      	adds	r2, r3, #4
 8009342:	602a      	str	r2, [r5, #0]
 8009344:	681d      	ldr	r5, [r3, #0]
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	2100      	movs	r1, #0
 800934a:	4628      	mov	r0, r5
 800934c:	f7f6 ffb0 	bl	80002b0 <memchr>
 8009350:	b108      	cbz	r0, 8009356 <_printf_i+0x1ea>
 8009352:	1b40      	subs	r0, r0, r5
 8009354:	6060      	str	r0, [r4, #4]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	2300      	movs	r3, #0
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009360:	e7aa      	b.n	80092b8 <_printf_i+0x14c>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	462a      	mov	r2, r5
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	47d0      	blx	sl
 800936c:	3001      	adds	r0, #1
 800936e:	d0ad      	beq.n	80092cc <_printf_i+0x160>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	d413      	bmi.n	800939e <_printf_i+0x232>
 8009376:	68e0      	ldr	r0, [r4, #12]
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	4298      	cmp	r0, r3
 800937c:	bfb8      	it	lt
 800937e:	4618      	movlt	r0, r3
 8009380:	e7a6      	b.n	80092d0 <_printf_i+0x164>
 8009382:	2301      	movs	r3, #1
 8009384:	4632      	mov	r2, r6
 8009386:	4649      	mov	r1, r9
 8009388:	4640      	mov	r0, r8
 800938a:	47d0      	blx	sl
 800938c:	3001      	adds	r0, #1
 800938e:	d09d      	beq.n	80092cc <_printf_i+0x160>
 8009390:	3501      	adds	r5, #1
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	9903      	ldr	r1, [sp, #12]
 8009396:	1a5b      	subs	r3, r3, r1
 8009398:	42ab      	cmp	r3, r5
 800939a:	dcf2      	bgt.n	8009382 <_printf_i+0x216>
 800939c:	e7eb      	b.n	8009376 <_printf_i+0x20a>
 800939e:	2500      	movs	r5, #0
 80093a0:	f104 0619 	add.w	r6, r4, #25
 80093a4:	e7f5      	b.n	8009392 <_printf_i+0x226>
 80093a6:	bf00      	nop
 80093a8:	08009b4d 	.word	0x08009b4d
 80093ac:	08009b5e 	.word	0x08009b5e

080093b0 <memmove>:
 80093b0:	4288      	cmp	r0, r1
 80093b2:	b510      	push	{r4, lr}
 80093b4:	eb01 0402 	add.w	r4, r1, r2
 80093b8:	d902      	bls.n	80093c0 <memmove+0x10>
 80093ba:	4284      	cmp	r4, r0
 80093bc:	4623      	mov	r3, r4
 80093be:	d807      	bhi.n	80093d0 <memmove+0x20>
 80093c0:	1e43      	subs	r3, r0, #1
 80093c2:	42a1      	cmp	r1, r4
 80093c4:	d008      	beq.n	80093d8 <memmove+0x28>
 80093c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ce:	e7f8      	b.n	80093c2 <memmove+0x12>
 80093d0:	4402      	add	r2, r0
 80093d2:	4601      	mov	r1, r0
 80093d4:	428a      	cmp	r2, r1
 80093d6:	d100      	bne.n	80093da <memmove+0x2a>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093e2:	e7f7      	b.n	80093d4 <memmove+0x24>

080093e4 <_realloc_r>:
 80093e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	4680      	mov	r8, r0
 80093ea:	4614      	mov	r4, r2
 80093ec:	460e      	mov	r6, r1
 80093ee:	b921      	cbnz	r1, 80093fa <_realloc_r+0x16>
 80093f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f4:	4611      	mov	r1, r2
 80093f6:	f7ff bb25 	b.w	8008a44 <_malloc_r>
 80093fa:	b92a      	cbnz	r2, 8009408 <_realloc_r+0x24>
 80093fc:	f7ff fca4 	bl	8008d48 <_free_r>
 8009400:	4625      	mov	r5, r4
 8009402:	4628      	mov	r0, r5
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009408:	f000 f81b 	bl	8009442 <_malloc_usable_size_r>
 800940c:	4284      	cmp	r4, r0
 800940e:	4607      	mov	r7, r0
 8009410:	d802      	bhi.n	8009418 <_realloc_r+0x34>
 8009412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009416:	d812      	bhi.n	800943e <_realloc_r+0x5a>
 8009418:	4621      	mov	r1, r4
 800941a:	4640      	mov	r0, r8
 800941c:	f7ff fb12 	bl	8008a44 <_malloc_r>
 8009420:	4605      	mov	r5, r0
 8009422:	2800      	cmp	r0, #0
 8009424:	d0ed      	beq.n	8009402 <_realloc_r+0x1e>
 8009426:	42bc      	cmp	r4, r7
 8009428:	4622      	mov	r2, r4
 800942a:	4631      	mov	r1, r6
 800942c:	bf28      	it	cs
 800942e:	463a      	movcs	r2, r7
 8009430:	f7ff fc7c 	bl	8008d2c <memcpy>
 8009434:	4631      	mov	r1, r6
 8009436:	4640      	mov	r0, r8
 8009438:	f7ff fc86 	bl	8008d48 <_free_r>
 800943c:	e7e1      	b.n	8009402 <_realloc_r+0x1e>
 800943e:	4635      	mov	r5, r6
 8009440:	e7df      	b.n	8009402 <_realloc_r+0x1e>

08009442 <_malloc_usable_size_r>:
 8009442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009446:	1f18      	subs	r0, r3, #4
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfbc      	itt	lt
 800944c:	580b      	ldrlt	r3, [r1, r0]
 800944e:	18c0      	addlt	r0, r0, r3
 8009450:	4770      	bx	lr
	...

08009454 <_getpid>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <_getpid+0xc>)
 8009456:	2258      	movs	r2, #88	; 0x58
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	4770      	bx	lr
 8009460:	200005f0 	.word	0x200005f0

08009464 <_kill>:
 8009464:	4b02      	ldr	r3, [pc, #8]	; (8009470 <_kill+0xc>)
 8009466:	2258      	movs	r2, #88	; 0x58
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	4770      	bx	lr
 8009470:	200005f0 	.word	0x200005f0

08009474 <_sbrk>:
 8009474:	4a04      	ldr	r2, [pc, #16]	; (8009488 <_sbrk+0x14>)
 8009476:	6811      	ldr	r1, [r2, #0]
 8009478:	4603      	mov	r3, r0
 800947a:	b909      	cbnz	r1, 8009480 <_sbrk+0xc>
 800947c:	4903      	ldr	r1, [pc, #12]	; (800948c <_sbrk+0x18>)
 800947e:	6011      	str	r1, [r2, #0]
 8009480:	6810      	ldr	r0, [r2, #0]
 8009482:	4403      	add	r3, r0
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4770      	bx	lr
 8009488:	200005f8 	.word	0x200005f8
 800948c:	20000600 	.word	0x20000600

08009490 <_exit>:
 8009490:	e7fe      	b.n	8009490 <_exit>
	...

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
>>>>>>> 1afb8ef1cd9ebcacaaa8db70be9628155ff5486a
