
STM32F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009578  08009578  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  08009578  08009578  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009578  08009578  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800958c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000158  080096e0  00020158  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  080096e0  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f29  00000000  00000000  000201c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a9  00000000  00000000  000450ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00046a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff0  00000000  00000000  00047f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025292  00000000  00000000  00048f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf22  00000000  00000000  0006e1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7e69  00000000  00000000  0007b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006740  00000000  00000000  00152f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  00159680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000158 	.word	0x20000158
 800021c:	00000000 	.word	0x00000000
 8000220:	08008f20 	.word	0x08008f20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000015c 	.word	0x2000015c
 800023c:	08008f20 	.word	0x08008f20
 8000240:	0800958c 	.word	0x0800958c
 8000244:	20000000 	.word	0x20000000
 8000248:	20000154 	.word	0x20000154
 800024c:	20000158 	.word	0x20000158
 8000250:	200005fc 	.word	0x200005fc

08000254 <save_context>:
.type    save_context, %function
.global load_context
.type    load_context, %function

save_context:
               MRS    r0, msp
 8000254:	f3ef 8008 	mrs	r0, MSP
               STMDB  r0!, {r4-r11}
 8000258:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 800025c:	f380 8808 	msr	MSP, r0
               VPUSH.32  {s0-s15}
 8000260:	ed2d 0a10 	vpush	{s0-s15}
               VPUSH.32  {s16-s31}
 8000264:	ed2d 8a10 	vpush	{s16-s31}
               MRS    r0, msp
 8000268:	f3ef 8008 	mrs	r0, MSP
               BX     lr
 800026c:	4770      	bx	lr

0800026e <load_context>:

load_context:
               MSR    msp, r0
 800026e:	f380 8808 	msr	MSP, r0
               VPOP.32  {s16-s31}
 8000272:	ecbd 8a10 	vpop	{s16-s31}
               VPOP.32  {s0-s15}
 8000276:	ecbd 0a10 	vpop	{s0-s15}
               MRS    r0, msp
 800027a:	f3ef 8008 	mrs	r0, MSP
               LDMFD  r0!, {r4-r11}
 800027e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
               MSR    msp, r0
 8000282:	f380 8808 	msr	MSP, r0
               BX     lr
 8000286:	4770      	bx	lr

08000288 <strcmp>:
 8000288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800028c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000290:	2a01      	cmp	r2, #1
 8000292:	bf28      	it	cs
 8000294:	429a      	cmpcs	r2, r3
 8000296:	d0f7      	beq.n	8000288 <strcmp>
 8000298:	1ad0      	subs	r0, r2, r3
 800029a:	4770      	bx	lr

0800029c <strlen>:
 800029c:	4603      	mov	r3, r0
 800029e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a2:	2a00      	cmp	r2, #0
 80002a4:	d1fb      	bne.n	800029e <strlen+0x2>
 80002a6:	1a18      	subs	r0, r3, r0
 80002a8:	3801      	subs	r0, #1
 80002aa:	4770      	bx	lr
 80002ac:	0000      	movs	r0, r0
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	2b00      	cmp	r3, #0
 8000360:	db0b      	blt.n	800037a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 021f 	and.w	r2, r3, #31
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <__NVIC_EnableIRQ+0x38>)
 800036a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036e:	095b      	lsrs	r3, r3, #5
 8000370:	2001      	movs	r0, #1
 8000372:	fa00 f202 	lsl.w	r2, r0, r2
 8000376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e100 	.word	0xe000e100

0800038c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000390:	f3bf 8f4f 	dsb	sy
}
 8000394:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <__NVIC_SystemReset+0x24>)
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800039e:	4904      	ldr	r1, [pc, #16]	; (80003b0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <__NVIC_SystemReset+0x28>)
 80003a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80003a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <__NVIC_SystemReset+0x20>
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	05fa0004 	.word	0x05fa0004

080003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>:
    /*!
    \class Task

    \brief Base class for timer interrupt tasks
    */
    class Task : public Std::Sequence<Task>::Item
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3304      	adds	r3, #4
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f005 f9df 	bl	800578a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>
 80003cc:	4a03      	ldr	r2, [pc, #12]	; (80003dc <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev+0x24>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	080093e8 	.word	0x080093e8

080003e0 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh>:
    {
      public:
      BYTE *ptr;
      DWORD size;

      SectorInfo( BYTE sector )
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	70fb      	strb	r3, [r7, #3]
      {
        switch( sector )
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	2b0b      	cmp	r3, #11
 80003f0:	d87c      	bhi.n	80004ec <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x10c>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x18>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000429 	.word	0x08000429
 80003fc:	0800043b 	.word	0x0800043b
 8000400:	0800044b 	.word	0x0800044b
 8000404:	0800045b 	.word	0x0800045b
 8000408:	0800046b 	.word	0x0800046b
 800040c:	0800047b 	.word	0x0800047b
 8000410:	0800048b 	.word	0x0800048b
 8000414:	0800049b 	.word	0x0800049b
 8000418:	080004ab 	.word	0x080004ab
 800041c:	080004bd 	.word	0x080004bd
 8000420:	080004cd 	.word	0x080004cd
 8000424:	080004dd 	.word	0x080004dd
        {
          case  0: ptr = (BYTE*)0x08000000; size = 0x08000; break; //  32k
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	e05f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  1: ptr = (BYTE*)0x08008000; size = 0x08000; break; //  32k
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a32      	ldr	r2, [pc, #200]	; (8000508 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x128>)
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	e057      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  2: ptr = (BYTE*)0x08010000; size = 0x08000; break; //  32k
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a2f      	ldr	r2, [pc, #188]	; (800050c <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x12c>)
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	e04f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  3: ptr = (BYTE*)0x08018000; size = 0x08000; break; //  32k
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a2c      	ldr	r2, [pc, #176]	; (8000510 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x130>)
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	e047      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  4: ptr = (BYTE*)0x08020000; size = 0x20000; break; // 128k
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a29      	ldr	r2, [pc, #164]	; (8000514 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x134>)
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	e03f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  5: ptr = (BYTE*)0x08040000; size = 0x40000; break; // 256k
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a26      	ldr	r2, [pc, #152]	; (8000518 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x138>)
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	e037      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  6: ptr = (BYTE*)0x08080000; size = 0x40000; break; // 256k
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a23      	ldr	r2, [pc, #140]	; (800051c <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x13c>)
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	e02f      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  7: ptr = (BYTE*)0x080C0000; size = 0x40000; break; // 256k
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a20      	ldr	r2, [pc, #128]	; (8000520 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x140>)
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	e027      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  8: ptr = (BYTE*)0x08100000; size = 0x40000; break; // 256k
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	e01e      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case  9: ptr = (BYTE*)0x08140000; size = 0x40000; break; // 256k
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a19      	ldr	r2, [pc, #100]	; (8000524 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x144>)
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	e016      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case 10: ptr = (BYTE*)0x08180000; size = 0x40000; break; // 256k
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a16      	ldr	r2, [pc, #88]	; (8000528 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x148>)
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	e00e      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          case 11: ptr = (BYTE*)0x081C0000; size = 0x40000; break; // 256k
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x14c>)
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	e006      	b.n	80004fa <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh+0x11a>
          default: ptr = (BYTE*)NULL;       size = 0;       break;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	bf00      	nop
        }
      }
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	08008000 	.word	0x08008000
 800050c:	08010000 	.word	0x08010000
 8000510:	08018000 	.word	0x08018000
 8000514:	08020000 	.word	0x08020000
 8000518:	08040000 	.word	0x08040000
 800051c:	08080000 	.word	0x08080000
 8000520:	080c0000 	.word	0x080c0000
 8000524:	08140000 	.word	0x08140000
 8000528:	08180000 	.word	0x08180000
 800052c:	081c0000 	.word	0x081c0000

08000530 <_ZN9EmbSysLib2Hw14DisplayGraphic7refreshEv>:

    //---------------------------------------------------------------
    /*! Refresh the display.
        Some display need a refresh to display new content
    */
    virtual void refresh( void )
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    {
    }
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <_ZN9EmbSysLib2Hw14DisplayGraphic8getWidthEv>:

    //---------------------------------------------------------------
    /*! Get horizontal display size
        \return Number of pixel
    */
    virtual WORD getWidth( void )
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    {
      return( Hsize );
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	8a1b      	ldrh	r3, [r3, #16]
    }
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN9EmbSysLib2Hw14DisplayGraphic9getHeightEv>:

    //---------------------------------------------------------------
    /*! Get vertical display size
        \return Number of pixel
    */
    virtual WORD getHeight( void )
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
		{
			return( Vsize );
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8a5b      	ldrh	r3, [r3, #18]
		}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>:
        \param red
        \param green
        \param blue
        \return Color code
    */
    static WORD RGB2color( BYTE red, BYTE green, BYTE blue )
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	460b      	mov	r3, r1
 8000580:	71bb      	strb	r3, [r7, #6]
 8000582:	4613      	mov	r3, r2
 8000584:	717b      	strb	r3, [r7, #5]
    {
      return(    ((blue  & 0xF8) >> 3)  // 5 bit,  0.. 4
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b21a      	sxth	r2, r3
               | ((green & 0xFC) << 3)  // 6 bit,  5..10
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	b21b      	sxth	r3, r3
 8000594:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21a      	sxth	r2, r3
               | ((red   & 0xF8) << 8)  // 5 bit, 11..15
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b219      	sxth	r1, r3
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh+0x48>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b21b      	sxth	r3, r3
             );
 80005ae:	b29b      	uxth	r3, r3
    }
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	fffff800 	.word	0xfffff800

080005c0 <_ZN9EmbSysLib3Dev7Digital3setEv>:
    virtual void set( bool value );

    //---------------------------------------------------------------
    /*! Set digital output to logic level 'true'
    */
    virtual void set( void )
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    {
      set( 1 );
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3304      	adds	r3, #4
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	4798      	blx	r3
    }
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_ZN9EmbSysLib3Dev7Digital3clrEv>:

    //---------------------------------------------------------------
    /*! Clear digital output to logic level 'false'
    */
    virtual void clr( void )
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
    {
      set( 0 );
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3304      	adds	r3, #4
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2100      	movs	r1, #0
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	4798      	blx	r3
    }
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_ZN9EmbSysLib3Dev7Digital6toggleEv>:

    //---------------------------------------------------------------
    /*! Invert digital output
    */
    virtual void toggle( void )
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    {
      set( !valueOut );
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7952      	ldrb	r2, [r2, #5]
 8000610:	f082 0201 	eor.w	r2, r2, #1
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	4798      	blx	r3
    }
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZN9EmbSysLib3Dev7Digital8getEventEv>:

    //---------------------------------------------------------------
    /*! Read input state and compare with previous state
        \return Event (NONE, ACTIVATED or RELEASED)
    */
    virtual Event getEvent( void )
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    {
      bool valueInLast = valueIn;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	73fb      	strb	r3, [r7, #15]
      valueIn = get();
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3314      	adds	r3, #20
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	4798      	blx	r3
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	711a      	strb	r2, [r3, #4]
      if( valueIn != valueInLast )
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	429a      	cmp	r2, r3
 800064e:	d007      	beq.n	8000660 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3c>
      {
        return( (valueIn)?ACTIVATED:RELEASED );
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x38>
 8000658:	2301      	movs	r3, #1
 800065a:	e002      	b.n	8000662 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
 800065c:	2302      	movs	r3, #2
 800065e:	e000      	b.n	8000662 <_ZN9EmbSysLib3Dev7Digital8getEventEv+0x3e>
      }
      return( NONE );
 8000660:	2300      	movs	r3, #0
    }
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZN9EmbSysLib3Dev7DigitalaSEb>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param value Logic level of digital output
        \return value
    */
    virtual bool operator=( bool value )
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	70fb      	strb	r3, [r7, #3]
    {
      set( value );
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3304      	adds	r3, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	4611      	mov	r1, r2
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	4798      	blx	r3
      return( value );
 8000686:	78fb      	ldrb	r3, [r7, #3]
    }
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <_ZN9EmbSysLib3Dev7DigitalaSERS1_>:
    //---------------------------------------------------------------
    /*! Set digital output
        \param x Reference to an Digital object
        \return Logic input level
    */
    virtual bool operator=( Digital &x)
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
    {
      set( x.get() );
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3304      	adds	r3, #4
 80006a0:	681c      	ldr	r4, [r3, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3314      	adds	r3, #20
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6838      	ldr	r0, [r7, #0]
 80006ac:	4798      	blx	r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	47a0      	blx	r4
      return( valueOut );
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795b      	ldrb	r3, [r3, #5]
    }
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <_ZN9EmbSysLib3Dev7DigitalcvbEv>:

    //---------------------------------------------------------------
    /*! Get the input state
        \return Digital input state (logic level)
    */
    virtual operator bool( void )
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
    {
      return( get() );
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3314      	adds	r3, #20
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	4798      	blx	r3
 80006d6:	4603      	mov	r3, r0
    }
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>:
  enableInterrupt();
}

//-------------------------------------------------------------------
void System::disableInterrupt( void )
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  __disable_irq();
  cntInterrupt++;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <_ZN9EmbSysLib2Hw6System16disableInterruptEv+0x20>)
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000174 	.word	0x20000174

08000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>:

//-------------------------------------------------------------------
void System::enableInterrupt( void )
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  if( cntInterrupt > 0 )
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x18>
  {
    cntInterrupt--;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800071a:	701a      	strb	r2, [r3, #0]
  }
  if( cntInterrupt == 0 )
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x30>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <_ZN9EmbSysLib2Hw6System15enableInterruptEv+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8000724:	b662      	cpsie	i
}
 8000726:	bf00      	nop
  {
     __enable_irq();
  }
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000174 	.word	0x20000174

08000738 <_ZN9EmbSysLib2Hw6System5resetEv>:
  IWDG->KR  = 0xAAAA;
}

//-------------------------------------------------------------------
void System::reset( void )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800073c:	f3bf 8f4f 	dsb	sy
}
 8000740:	bf00      	nop
  __DSB();
  *((unsigned long *)(0x2000FFF0)) = 0xDEADBEEF;
 8000742:	4b02      	ldr	r3, [pc, #8]	; (800074c <_ZN9EmbSysLib2Hw6System5resetEv+0x14>)
 8000744:	4a02      	ldr	r2, [pc, #8]	; (8000750 <_ZN9EmbSysLib2Hw6System5resetEv+0x18>)
 8000746:	601a      	str	r2, [r3, #0]
  NVIC_SystemReset();
 8000748:	f7ff fe20 	bl	800038c <__NVIC_SystemReset>
 800074c:	2000fff0 	.word	0x2000fff0
 8000750:	deadbeef 	.word	0xdeadbeef
 8000754:	00000000 	.word	0x00000000

08000758 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt>:

#pragma GCC push_options
#pragma GCC optimize ("-O0")
//-------------------------------------------------------------------
void System::delayMicroSec( unsigned short delay )
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
  //! \todo check calibration
  // Calibrated at delayMilliSec( 1000 )
  // Calibrated with System::delayMilliSec( 1000 ), f_clk = 200 MHz, no interrupts

  unsigned steps = 0.499E-6*system_PCLK*delay;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800076c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80007a0 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x48>
 8000770:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee17 3a90 	vmov	r3, s15
 800077c:	60fb      	str	r3, [r7, #12]
  for( ; steps > 0; steps-- )
 800077e:	e003      	b.n	8000788 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x30>
  {
    asm volatile("nop");
 8000780:	bf00      	nop
  for( ; steps > 0; steps-- )
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3b01      	subs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f8      	bne.n	8000780 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt+0x28>
  }
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	f3af 8000 	nop.w
 80007a0:	33333333 	.word	0x33333333
 80007a4:	4058f333 	.word	0x4058f333

080007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>:

//-------------------------------------------------------------------
void System::delayMilliSec( unsigned short delay )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  for( ; delay > 0; delay-- )
 80007b2:	e006      	b.n	80007c2 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt+0x1a>
  {
    delayMicroSec(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b8:	f7ff ffce 	bl	8000758 <_ZN9EmbSysLib2Hw6System13delayMicroSecEt>
  for( ; delay > 0; delay-- )
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	3b01      	subs	r3, #1
 80007c0:	80fb      	strh	r3, [r7, #6]
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f5      	bne.n	80007b4 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt+0xc>
  }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <SystemInit>:
//
// SystemInit
//
//*******************************************************************
void SystemInit( void )
{
 80007d4:	b480      	push	{r7}
 80007d6:	b091      	sub	sp, #68	; 0x44
 80007d8:	af00      	add	r7, sp, #0
  // Set FPU
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    // System Control Block (SCB), Coprocessor Access Control Register
    SCB->CPACR |=   (3UL << 10*2)  // CP10: Full access
 80007da:	4ba1      	ldr	r3, [pc, #644]	; (8000a60 <SystemInit+0x28c>)
 80007dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e0:	4a9f      	ldr	r2, [pc, #636]	; (8000a60 <SystemInit+0x28c>)
 80007e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

//	SCB_DisableDCache();

  // Clock control register
  RCC->CR |= RCC_CR_HSION;    //! \todo why is it switched on here?
 80007ea:	4b9e      	ldr	r3, [pc, #632]	; (8000a64 <SystemInit+0x290>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a9d      	ldr	r2, [pc, #628]	; (8000a64 <SystemInit+0x290>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

  // Clock configuration register
  RCC->CFGR = 0x00000000;       // reset ...
 80007f6:	4b9b      	ldr	r3, [pc, #620]	; (8000a64 <SystemInit+0x290>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]

  // Clock control register
  RCC->CR &= ~(   RCC_CR_PLLON  // reset ...
 80007fc:	4b99      	ldr	r3, [pc, #612]	; (8000a64 <SystemInit+0x290>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4998      	ldr	r1, [pc, #608]	; (8000a64 <SystemInit+0x290>)
 8000802:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <SystemInit+0x294>)
 8000804:	4013      	ands	r3, r2
 8000806:	600b      	str	r3, [r1, #0]
                | RCC_CR_CSSON
                | RCC_CR_HSEON );

  // PLL configuration register
  RCC->PLLCFGR = 0x24003010;   // Reset value,
 8000808:	4b96      	ldr	r3, [pc, #600]	; (8000a64 <SystemInit+0x290>)
 800080a:	4a98      	ldr	r2, [pc, #608]	; (8000a6c <SystemInit+0x298>)
 800080c:	605a      	str	r2, [r3, #4]
                               // see Reference manual

  // Clock control register
  RCC->CR &= ~(RCC_CR_HSEBYP); // reset ...
 800080e:	4b95      	ldr	r3, [pc, #596]	; (8000a64 <SystemInit+0x290>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a94      	ldr	r2, [pc, #592]	; (8000a64 <SystemInit+0x290>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000818:	6013      	str	r3, [r2, #0]

  // Clock interrupt register
  RCC->CIR = 0;                // Disable all interrupts
 800081a:	4b92      	ldr	r3, [pc, #584]	; (8000a64 <SystemInit+0x290>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]


  // Flash Acess Control Register
  FLASH->ACR =  // FLASH_ACR_ICEN          // Instruction cache enable
 8000820:	4b93      	ldr	r3, [pc, #588]	; (8000a70 <SystemInit+0x29c>)
 8000822:	2207      	movs	r2, #7
 8000824:	601a      	str	r2, [r3, #0]
               //| FLASH_ACR_DCEN          // Data cache enable
               0| FLASH_ACR_LATENCY_7WS;  // Latency: 5 wait states

  // Advanced Peripheral Bus Enable Register
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;    // Power interface clock: enable
 8000826:	4b8f      	ldr	r3, [pc, #572]	; (8000a64 <SystemInit+0x290>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a8e      	ldr	r2, [pc, #568]	; (8000a64 <SystemInit+0x290>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
//    PWR->CR   |= (1<<14);                 // Regulator voltage scaling output selection:
                                        // VOS=1: Scale 1 mode

  // Clock Configuration Register
  //! \todo Check clock configuration
  RCC->CFGR |=   RCC_CFGR_HPRE_DIV1     // AHB prescaler:                   HCLK  = SYSCLK
 8000832:	4b8c      	ldr	r3, [pc, #560]	; (8000a64 <SystemInit+0x290>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	4a8b      	ldr	r2, [pc, #556]	; (8000a64 <SystemInit+0x290>)
 8000838:	f443 4334 	orr.w	r3, r3, #46080	; 0xb400
 800083c:	6093      	str	r3, [r2, #8]
  //
  //---- HSE --------------------------------------------------------
  #if OSCSRC == HSE || OSCSRC == HSE_BYPASS

      #if OSCSRC == HSE
        RCC->CR |= (RCC_CR_HSEON );
 800083e:	4b89      	ldr	r3, [pc, #548]	; (8000a64 <SystemInit+0x290>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a88      	ldr	r2, [pc, #544]	; (8000a64 <SystemInit+0x290>)
 8000844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000848:	6013      	str	r3, [r2, #0]
      #else
        RCC->CR |= (RCC_CR_HSEON | RCC_CR_HSEBYP);
      #endif
      const DWORD pll_Src = RCC_PLLCFGR_PLLSRC_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
      while( !(RCC->CR & RCC_CR_HSERDY) ); // wait for HSE ready
 8000850:	bf00      	nop
 8000852:	4b84      	ldr	r3, [pc, #528]	; (8000a64 <SystemInit+0x290>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f4      	bne.n	8000852 <SystemInit+0x7e>
  #undef HSI


  //! \todo Check code
  // Clock control register
  RCC->CR |= RCC_CR_HSION;   // Need HSION in ADC (only?)
 8000868:	4b7e      	ldr	r3, [pc, #504]	; (8000a64 <SystemInit+0x290>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a7d      	ldr	r2, [pc, #500]	; (8000a64 <SystemInit+0x290>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
  //-----------------------------------------------------------------
  // calculate PLL
  // f_in  =   1 MHz => M = f_osc/f_in
  // f_out = 400 MHz => N = f_out/f_in

  const DWORD pll_M = (OSCFREQ)/1000UL;  // -> f_in      =     1 MHz
 8000874:	2319      	movs	r3, #25
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  const DWORD pll_N = 400;               // -> f_out     = 400*1 MHz
 8000878:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800087c:	637b      	str	r3, [r7, #52]	; 0x34

  //-----------------------------------------------------------------
  // calculate clock divider PLL
  const DWORD pll_P = 2;                 // -> f_pllclk  = 400/2 MHz = 200  MHz
 800087e:	2302      	movs	r3, #2
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  const DWORD pll_Q = 8;                 // -> f_pll48ck = 400/8 MHz =  50  MHz
 8000882:	2308      	movs	r3, #8
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  const DWORD pll_R = 7;                 // -> f_plldsi  = 400/7 MHz =  57.1 MHz
 8000886:	2307      	movs	r3, #7
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28

  // PLL configuration register
  RCC->PLLCFGR =   pll_Src
 800088a:	4b76      	ldr	r3, [pc, #472]	; (8000a64 <SystemInit+0x290>)
 800088c:	4a79      	ldr	r2, [pc, #484]	; (8000a74 <SystemInit+0x2a0>)
 800088e:	605a      	str	r2, [r3, #4]
                 | ((pll_P/2-1) << 16)
                 | ( pll_Q      << 24)
                 | ( pll_R      << 28);

  // Clock control register
  RCC->CR |= RCC_CR_PLLON;            // PLL enable: ON
 8000890:	4b74      	ldr	r3, [pc, #464]	; (8000a64 <SystemInit+0x290>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a73      	ldr	r2, [pc, #460]	; (8000a64 <SystemInit+0x290>)
 8000896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800089a:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLRDY) );// Wait until PLL is ready
 800089c:	bf00      	nop
 800089e:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <SystemInit+0x290>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f4      	bne.n	800089e <SystemInit+0xca>

  // Clock Configuration Register
  RCC->CFGR &= ~(RCC_CFGR_SW);          // reset system clock switch
 80008b4:	4b6b      	ldr	r3, [pc, #428]	; (8000a64 <SystemInit+0x290>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a6a      	ldr	r2, [pc, #424]	; (8000a64 <SystemInit+0x290>)
 80008ba:	f023 0303 	bic.w	r3, r3, #3
 80008be:	6093      	str	r3, [r2, #8]
  RCC->CFGR |=  (RCC_CFGR_SW_PLL);      // System clock switch:
 80008c0:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <SystemInit+0x290>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4a67      	ldr	r2, [pc, #412]	; (8000a64 <SystemInit+0x290>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	6093      	str	r3, [r2, #8]
                                        //  PLL selected as system clock

  // Wait for system clock switch is ready
  while( (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 80008cc:	bf00      	nop
 80008ce:	4b65      	ldr	r3, [pc, #404]	; (8000a64 <SystemInit+0x290>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 030c 	and.w	r3, r3, #12
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f4      	bne.n	80008ce <SystemInit+0xfa>
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //-----------------------------------------------------------------
  // calculate PLLSAI
  // f_in  =   1 MHz
  // f_out = 384 MHz => N = f_out/f_in
  const DWORD pllsai_N = 384;
 80008e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24

  //-----------------------------------------------------------------
  // calculate clock divider PLLSAI
	const DWORD pllsai_P = 8;	// -> f_pllsaip = 384/8 MHz = 48 MHz (USB)
 80008ea:	2308      	movs	r3, #8
 80008ec:	623b      	str	r3, [r7, #32]
	const DWORD pllsai_Q = 4; // -> f_pllsaiq = 384/4 MHz = 96 MHz (default)
 80008ee:	2304      	movs	r3, #4
 80008f0:	61fb      	str	r3, [r7, #28]
	const DWORD pllsai_R = 5;	// -> f_pllsaip = 384/5 MHz = 76.8 MHz (LCD-TFT)
 80008f2:	2305      	movs	r3, #5
 80008f4:	61bb      	str	r3, [r7, #24]

  RCC->CR &= ~RCC_CR_PLLSAION;         // PLLSAI disable   ???
 80008f6:	4b5b      	ldr	r3, [pc, #364]	; (8000a64 <SystemInit+0x290>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a5a      	ldr	r2, [pc, #360]	; (8000a64 <SystemInit+0x290>)
 80008fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000900:	6013      	str	r3, [r2, #0]
  while( RCC->CR & RCC_CR_PLLSAIRDY ); // Wait until disabled ????
 8000902:	bf00      	nop
 8000904:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <SystemInit+0x290>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f4      	bne.n	8000904 <SystemInit+0x130>

  RCC->PLLSAICFGR =    ( pllsai_N      <<  6)
 800091a:	4b52      	ldr	r3, [pc, #328]	; (8000a64 <SystemInit+0x290>)
 800091c:	4a56      	ldr	r2, [pc, #344]	; (8000a78 <SystemInit+0x2a4>)
 800091e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                     | ((pllsai_P/2-1) << 16)
                     | ( pllsai_Q      << 24)
                     | ( pllsai_R      << 28);

  RCC->DCKCFGR1 = (RCC->DCKCFGR1 & ~RCC_DCKCFGR1_PLLSAIDIVR)  | 0/*RCC_PLLSAIDIVR_2*/;
 8000922:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <SystemInit+0x290>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000928:	4a4e      	ldr	r2, [pc, #312]	; (8000a64 <SystemInit+0x290>)
 800092a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800092e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 |= RCC_DCKCFGR2_CK48MSEL; // PLLSAI is 48Mhz-USB clock source
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <SystemInit+0x290>)
 8000934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000938:	4a4a      	ldr	r2, [pc, #296]	; (8000a64 <SystemInit+0x290>)
 800093a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800093e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Enable PLLSAI Clock */
  RCC->CR |= RCC_CR_PLLSAION;
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <SystemInit+0x290>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <SystemInit+0x290>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6013      	str	r3, [r2, #0]
  while( !(RCC->CR & RCC_CR_PLLSAIRDY) );
 800094e:	bf00      	nop
 8000950:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <SystemInit+0x290>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f4      	bne.n	8000950 <SystemInit+0x17c>
  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  // System Control Block
  SCB->VTOR = FLASH_BASE | 0x00; // Vector Table Relocation in internal FLASH
 8000966:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <SystemInit+0x28c>)
 8000968:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096c:	609a      	str	r2, [r3, #8]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <SystemInit+0x28c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000976:	f3bf 8f4f 	dsb	sy
}
 800097a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <SystemInit+0x28c>)
 800097e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000982:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	0b5b      	lsrs	r3, r3, #13
 8000988:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800098c:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	08db      	lsrs	r3, r3, #3
 8000992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000996:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	015a      	lsls	r2, r3, #5
 800099c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009a0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a6:	492e      	ldr	r1, [pc, #184]	; (8000a60 <SystemInit+0x28c>)
 80009a8:	4313      	orrs	r3, r2
 80009aa:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	603a      	str	r2, [r7, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1ea      	bne.n	8000998 <SystemInit+0x1c4>
    } while(sets-- != 0U);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1db      	bne.n	800098e <SystemInit+0x1ba>
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
}
 80009da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009dc:	f3bf 8f6f 	isb	sy
}
 80009e0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009e2:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <SystemInit+0x28c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ec:	f3bf 8f4f 	dsb	sy
}
 80009f0:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <SystemInit+0x28c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <SystemInit+0x28c>)
 80009f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009fe:	f3bf 8f4f 	dsb	sy
}
 8000a02:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <SystemInit+0x28c>)
 8000a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	0b5b      	lsrs	r3, r3, #13
 8000a10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a14:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a1e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	015a      	lsls	r2, r3, #5
 8000a24:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a28:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000a2e:	490c      	ldr	r1, [pc, #48]	; (8000a60 <SystemInit+0x28c>)
 8000a30:	4313      	orrs	r3, r2
 8000a32:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	1e5a      	subs	r2, r3, #1
 8000a3a:	60fa      	str	r2, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1ea      	bne.n	8000a20 <SystemInit+0x24c>
    } while(sets-- != 0U);
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	613a      	str	r2, [r7, #16]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1db      	bne.n	8000a16 <SystemInit+0x242>
 8000a5e:	e00d      	b.n	8000a7c <SystemInit+0x2a8>
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	40023800 	.word	0x40023800
 8000a68:	fef6ffff 	.word	0xfef6ffff
 8000a6c:	24003010 	.word	0x24003010
 8000a70:	40023c00 	.word	0x40023c00
 8000a74:	78406419 	.word	0x78406419
 8000a78:	54036000 	.word	0x54036000
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a82:	f3bf 8f6f 	isb	sy
}
 8000a86:	bf00      	nop
}
 8000a88:	bf00      	nop

  SCB_InvalidateDCache();
	SCB_DisableDCache();
}
 8000a8a:	bf00      	nop
 8000a8c:	3744      	adds	r7, #68	; 0x44
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <_Z18System_GetDSIclockv>:
//
// System_GetDSIclock
//
//*******************************************************************
DWORD System_GetDSIclock( void )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return( OSCFREQ );
 8000a9c:	f246 13a8 	movw	r3, #25000	; 0x61a8
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>:
//-------------------------------------------------------------------
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );

//-------------------------------------------------------------------
void PinConfig::set( GPIO_TypeDef *gpio, BYTE pinId, DWORD mode, BYTE af )
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b08e      	sub	sp, #56	; 0x38
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	72fb      	strb	r3, [r7, #11]
 8000aba:	4613      	mov	r3, r2
 8000abc:	72bb      	strb	r3, [r7, #10]
  BYTE pin2 = 2*pinId;
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  BYTE pin3 = pinId>>3;
 8000ac6:	7afb      	ldrb	r3, [r7, #11]
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  MTYPE bitmask1 = ~((MTYPE)0x01 <<     pinId    );
 8000ace:	7afb      	ldrb	r3, [r7, #11]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  MTYPE bitmask2 = ~((MTYPE)0x03 <<     pin2     );
 8000ada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MTYPE bitmask3 = ~((MTYPE)0x0F << (4*(pinId%8)));
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28

  MTYPE moder   = (MTYPE)((mode    )&0x03) << pin2;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f003 0203 	and.w	r2, r3, #3
 8000b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  MTYPE pupdr   = (MTYPE)((mode>> 8)&0x03) << pin2;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0203 	and.w	r2, r3, #3
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	623b      	str	r3, [r7, #32]
  MTYPE otyper  = (MTYPE)((mode>> 4)&0x01) << pinId;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	61fb      	str	r3, [r7, #28]
  MTYPE ospeedr = (MTYPE)((mode>>12)&0x03) << pin2;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	0b1b      	lsrs	r3, r3, #12
 8000b30:	f003 0203 	and.w	r2, r3, #3
 8000b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	61bb      	str	r3, [r7, #24]
  MTYPE afr     = (MTYPE)((af      )&0x0F) << (4*(pinId%8));
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	f003 020f 	and.w	r2, r3, #15
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	617b      	str	r3, [r7, #20]

  Hw::System::disableInterrupt();
 8000b52:	f7ff fdc5 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
  gpio->MODER     = ( gpio->MODER     & bitmask2 ) | moder;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	431a      	orrs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	601a      	str	r2, [r3, #0]
  gpio->PUPDR     = ( gpio->PUPDR     & bitmask2 ) | pupdr;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	60da      	str	r2, [r3, #12]
  gpio->OTYPER    = ( gpio->OTYPER    & bitmask1 ) | otyper;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	605a      	str	r2, [r3, #4]
  gpio->OSPEEDR   = ( gpio->OSPEEDR   & bitmask2 ) | ospeedr;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	609a      	str	r2, [r3, #8]
  gpio->AFR[pin3] = ( gpio->AFR[pin3] & bitmask3 ) | afr;
 8000b96:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba4:	ea02 0103 	and.w	r1, r2, r3
 8000ba8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	4319      	orrs	r1, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Hw::System::enableInterrupt();
 8000bb8:	f7ff fda4 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	; 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>:

//-------------------------------------------------------------------
bool PinConfig::set( Function func, DWORD mode )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	80fb      	strh	r3, [r7, #6]
  BYTE pin;
  BYTE af;

  GPIO_TypeDef *gpio;

  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	827b      	strh	r3, [r7, #18]
 8000bd4:	e0b0      	b.n	8000d38 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x174>
  {
    if( (table[i] >> 16) == func )
 8000bd6:	8a7b      	ldrh	r3, [r7, #18]
 8000bd8:	4a60      	ldr	r2, [pc, #384]	; (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	141a      	asrs	r2, r3, #16
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	f040 80a5 	bne.w	8000d32 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x16e>
    {
      port = (table[i]>>12)&0x0F;
 8000be8:	8a7b      	ldrh	r3, [r7, #18]
 8000bea:	4a5c      	ldr	r2, [pc, #368]	; (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	131b      	asrs	r3, r3, #12
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	747b      	strb	r3, [r7, #17]
      pin  = (table[i]>> 4)&0x0F;
 8000bfa:	8a7b      	ldrh	r3, [r7, #18]
 8000bfc:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	111b      	asrs	r3, r3, #4
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	743b      	strb	r3, [r7, #16]
      af   = (table[i]>> 0)&0x0F;
 8000c0c:	8a7b      	ldrh	r3, [r7, #18]
 8000c0e:	4a53      	ldr	r2, [pc, #332]	; (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	73fb      	strb	r3, [r7, #15]

      if( (mode & 0x0F) != ANALOG )
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d003      	beq.n	8000c2e <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x6a>
      {
        mode |= ALTERNATE_FUNC;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	603b      	str	r3, [r7, #0]
      }

      switch( port )
 8000c2e:	7c7b      	ldrb	r3, [r7, #17]
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	d871      	bhi.n	8000d18 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x154>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x78>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	08000c77 	.word	0x08000c77
 8000c44:	08000c89 	.word	0x08000c89
 8000c48:	08000c9b 	.word	0x08000c9b
 8000c4c:	08000cad 	.word	0x08000cad
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000cd1 	.word	0x08000cd1
 8000c58:	08000ce3 	.word	0x08000ce3
 8000c5c:	08000cf5 	.word	0x08000cf5
 8000c60:	08000d07 	.word	0x08000d07
      {
        case 0: gpio = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x19c>)
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a3d      	ldr	r2, [pc, #244]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	e055      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 1: gpio = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a4>)
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	e04c      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 2: gpio = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a8>)
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	e043      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 3: gpio = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1ac>)
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a30      	ldr	r2, [pc, #192]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	e03a      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 4: gpio = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b0>)
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	e031      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 5: gpio = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b4>)
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	e028      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 6: gpio = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1b8>)
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	e01f      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 7: gpio = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1bc>)
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	e016      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 8: gpio = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c0>)
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	e00d      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        case 9: gpio = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; break;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c4>)
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1a0>)
 8000d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	e004      	b.n	8000d22 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x15e>
        default:report.error( ReportID_Hw::Event::HARDWARE_NOT_SUPPORTED );
 8000d18:	210d      	movs	r1, #13
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c8>)
 8000d1c:	f002 fa6e 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
          break;
 8000d20:	bf00      	nop
      }
      set( gpio, pin, mode, af );
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	7c39      	ldrb	r1, [r7, #16]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f7ff febe 	bl	8000aaa <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
      return( true );
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x18e>
  for( WORD i = 0; table[i] != END_OF_TABLE; i++ )
 8000d32:	8a7b      	ldrh	r3, [r7, #18]
 8000d34:	3301      	adds	r3, #1
 8000d36:	827b      	strh	r3, [r7, #18]
 8000d38:	8a7b      	ldrh	r3, [r7, #18]
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x198>)
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	f47f af47 	bne.w	8000bd6 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x12>
    }
  }
  // Error: The table does not contain the func
  report.error( ReportID_Hw::Event::CONFIG_NOT_SUPPORTED );
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm+0x1c8>)
 8000d4c:	f002 fa56 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
  return( false );
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40021400 	.word	0x40021400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40021c00 	.word	0x40021c00
 8000d84:	40022000 	.word	0x40022000
 8000d88:	40022400 	.word	0x40022400
 8000d8c:	20000178 	.word	0x20000178

08000d90 <ADC_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void ADC_IRQHandler(void)
  {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    if( ADC1->SR & ADC_SR_EOC )
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <ADC_IRQHandler+0xa4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bf14      	ite	ne
 8000da0:	2301      	movne	r3, #1
 8000da2:	2300      	moveq	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00e      	beq.n	8000dc8 <ADC_IRQHandler+0x38>
    {
      ADC1->SR &= ~ADC_SR_EOC;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <ADC_IRQHandler+0xa4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <ADC_IRQHandler+0xa4>)
 8000db0:	f023 0302 	bic.w	r3, r3, #2
 8000db4:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc1->isr();
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <ADC_IRQHandler+0xa8>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <ADC_IRQHandler+0xa8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	330c      	adds	r3, #12
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4798      	blx	r3
    }
    if( ADC2->SR & ADC_SR_EOC )
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <ADC_IRQHandler+0xac>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00e      	beq.n	8000dfc <ADC_IRQHandler+0x6c>
    {
      ADC2->SR &= ~ADC_SR_EOC;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <ADC_IRQHandler+0xac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <ADC_IRQHandler+0xac>)
 8000de4:	f023 0302 	bic.w	r3, r3, #2
 8000de8:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc2->isr();
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <ADC_IRQHandler+0xb0>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <ADC_IRQHandler+0xb0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	330c      	adds	r3, #12
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4798      	blx	r3
    }
    if( ADC3->SR & ADC_SR_EOC )
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <ADC_IRQHandler+0xb4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00e      	beq.n	8000e30 <ADC_IRQHandler+0xa0>
    {
      ADC3->SR &= ~ADC_SR_EOC;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <ADC_IRQHandler+0xb4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <ADC_IRQHandler+0xb4>)
 8000e18:	f023 0302 	bic.w	r3, r3, #2
 8000e1c:	6013      	str	r3, [r2, #0]
      Adc_Mcu::adc3->isr();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <ADC_IRQHandler+0xb8>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <ADC_IRQHandler+0xb8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4798      	blx	r3
    }
  }
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012000 	.word	0x40012000
 8000e38:	2000017c 	.word	0x2000017c
 8000e3c:	40012100 	.word	0x40012100
 8000e40:	20000180 	.word	0x20000180
 8000e44:	40012200 	.word	0x40012200
 8000e48:	20000184 	.word	0x20000184

08000e4c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>:
#if ( system_PCLK_I2C != 50000000 )
  #error "system_PCLK_I2C not defined or wrong value"
#endif

//-------------------------------------------------------------------
I2Cmaster_Mcu::I2Cmaster_Mcu( I2C_ID id,
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	803b      	strh	r3, [r7, #0]
                              WORD   fclk )

: I2Cmaster( ReportID_Hw::Module::I2C_MASTER_MCU )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	21d0      	movs	r1, #208	; 0xd0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fdcf 	bl	8003a04 <_ZN9EmbSysLib2Hw9I2CmasterC1Et>
 8000e66:	4a5e      	ldr	r2, [pc, #376]	; (8000fe0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x194>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]

{
  switch( id )
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d85b      	bhi.n	8000f2c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xe0>
 8000e74:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x30>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000eb5 	.word	0x08000eb5
 8000e84:	08000edd 	.word	0x08000edd
 8000e88:	08000f05 	.word	0x08000f05
  {
    case I2C_1:
      ptr           = I2C1;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a55      	ldr	r2, [pc, #340]	; (8000fe4 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x198>)
 8000e90:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000e92:	4b55      	ldr	r3, [pc, #340]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a54      	ldr	r2, [pc, #336]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C1_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000e9e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000ea2:	20d5      	movs	r0, #213	; 0xd5
 8000ea4:	f7ff fe8e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C1_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ea8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000eac:	20d6      	movs	r0, #214	; 0xd6
 8000eae:	f7ff fe89 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000eb2:	e042      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_2:
      ptr           = I2C2;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	; (8000fec <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a0>)
 8000eb8:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000eba:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C2_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ec6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000eca:	20d8      	movs	r0, #216	; 0xd8
 8000ecc:	f7ff fe7a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C2_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ed0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000ed4:	20d9      	movs	r0, #217	; 0xd9
 8000ed6:	f7ff fe75 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000eda:	e02e      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_3:
      ptr           = I2C3;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a4>)
 8000ee0:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000ee2:	4b41      	ldr	r3, [pc, #260]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a40      	ldr	r2, [pc, #256]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C3_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000eee:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000ef2:	20db      	movs	r0, #219	; 0xdb
 8000ef4:	f7ff fe66 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C3_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000ef8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000efc:	20dc      	movs	r0, #220	; 0xdc
 8000efe:	f7ff fe61 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000f02:	e01a      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    case I2C_4:
      ptr           = I2C4;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3b      	ldr	r2, [pc, #236]	; (8000ff4 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x1a8>)
 8000f08:	60da      	str	r2, [r3, #12]
      RCC->APB1ENR |= RCC_APB1ENR_I2C4EN;
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0x19c>)
 8000f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::I2C4_SCL, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000f16:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f1a:	20de      	movs	r0, #222	; 0xde
 8000f1c:	f7ff fe52 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::I2C4_SDA, PinConfig::OPEN_DRAIN | PinConfig::PULL_UP );
 8000f20:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f24:	20df      	movs	r0, #223	; 0xdf
 8000f26:	f7ff fe4d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      break;
 8000f2a:	e006      	b.n	8000f3a <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xee>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3306      	adds	r3, #6
 8000f30:	2107      	movs	r1, #7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 f962 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8000f38:	bf00      	nop
  }

  ptr->CR1 = 0x00; // disable
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
  while( ptr->CR1 & I2C_CR1_PE ) {}
 8000f42:	bf00      	nop
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f3      	bne.n	8000f44 <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt+0xf8>

  ptr->CR1 |=   (!I2C_CR1_ANFOFF)   // keep analog filter on
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	601a      	str	r2, [r3, #0]
       Fm with tsclh/tscll = 2:
         fclk = 1/(tsclh + tscll), tsclh = 2*tscll
           => fclk = 1/(3*tscll) and fclk = 2/(3*tsclh)
           => scll = 1/(3*fclk*tpresc) and sclh = 2/(3*fclk*tpresc)
  */
  fclk = RANGE( fclk, (WORD)1, (WORD)1000 );
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fc35 	bl	80057e0 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_>
 8000f76:	4603      	mov	r3, r0
 8000f78:	803b      	strh	r3, [r7, #0]

  WORD sclh = MIN( (WORD)(3333/fclk - 1), (WORD)(0xFF) );
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	f640 5205 	movw	r2, #3333	; 0xd05
 8000f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	21ff      	movs	r1, #255	; 0xff
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fc12 	bl	80057b6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81fb      	strh	r3, [r7, #14]
  WORD scll = MIN( (WORD)(1667/fclk - 1), (WORD)(0xFF) );
 8000f96:	883b      	ldrh	r3, [r7, #0]
 8000f98:	f240 6283 	movw	r2, #1667	; 0x683
 8000f9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	21ff      	movs	r1, #255	; 0xff
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fc04 	bl	80057b6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	81bb      	strh	r3, [r7, #12]

  ptr->TIMINGR =  (0x0F<<28)   // PRESC
                 |(0x00<<20)   // SCLDEL, 1*0.2us
                 |(0x00<<16)   // SDADEL
                 |(sclh<< 8)   // SCLH
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	f043 4270 	orr.w	r2, r3, #4026531840	; 0xf0000000
                 |(scll<< 0);  // SCLL
 8000fba:	89bb      	ldrh	r3, [r7, #12]
 8000fbc:	431a      	orrs	r2, r3
  ptr->TIMINGR =  (0x0F<<28)   // PRESC
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  ptr->CR1 |= I2C_CR1_PE; // enable
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800933c 	.word	0x0800933c
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40005800 	.word	0x40005800
 8000ff0:	40005c00 	.word	0x40005c00
 8000ff4:	40006000 	.word	0x40006000

08000ff8 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu5startEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::start( BYTE size )
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
  ptr->CR2 = (ptr->CR2 & ~0xFF0000)|((size)<<16);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	4619      	mov	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	430a      	orrs	r2, r1
 800101a:	605a      	str	r2, [r3, #4]
  ptr->CR2 = (ptr->CR2 & ~(1<<10));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102a:	605a      	str	r2, [r3, #4]
  // set start condition AFTER setting of SADD in sendAddr
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu4stopEv>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::stop( void )
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  ptr->CR1 |= I2C_CR2_STOP;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::sendAddr( BYTE addr )
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
  if( isHardwareOK )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d029      	beq.n	80010c4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x68>
  {
    ptr->CR2 = (ptr->CR2 & ~0x2FF)|(addr&0xFE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x74>)
 8001078:	4013      	ands	r3, r2
 800107a:	78fa      	ldrb	r2, [r7, #3]
 800107c:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68d2      	ldr	r2, [r2, #12]
 8001084:	430b      	orrs	r3, r1
 8001086:	6053      	str	r3, [r2, #4]
    if(addr & 0x01)
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x48>
    {
      ptr->CR2 = (ptr->CR2 | (1<<10));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	e007      	b.n	80010b4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu8sendAddrEh+0x58>
    }
    else
    {
      ptr->CR2 = (ptr->CR2 & ~(1<<10));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010b2:	605a      	str	r2, [r3, #4]
    }
    ptr->CR2 |= I2C_CR2_START;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
  }
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	fffffd00 	.word	0xfffffd00

080010d4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu9writeByteEh>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::writeByte( BYTE byte )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  if( isHardwareOK )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00a      	beq.n	80010fe <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu9writeByteEh+0x2a>
  {
    ptr->TXDR = byte;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    waitForAckn( I2C_ISR_TXE );
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3320      	adds	r3, #32
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4798      	blx	r3
  }
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv>:

//-------------------------------------------------------------------
inline BYTE I2Cmaster_Mcu::readByteAck( void )
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  if( isHardwareOK )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv+0x28>
  {
    waitForAckn( I2C_ISR_RXNE );
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3320      	adds	r3, #32
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2104      	movs	r1, #4
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
    return( ptr->RXDR );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	b2db      	uxtb	r3, r3
 800112c:	e000      	b.n	8001130 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11readByteAckEv+0x2a>
  }
  return( 0 );
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv>:

//-------------------------------------------------------------------
inline BYTE I2Cmaster_Mcu::readByteNack( void )
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if( isHardwareOK )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv+0x28>
  {
    waitForAckn( I2C_ISR_RXNE );
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3320      	adds	r3, #32
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2104      	movs	r1, #4
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    return( ptr->RXDR );
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	b2db      	uxtb	r3, r3
 800115e:	e000      	b.n	8001162 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu12readByteNackEv+0x2a>
  }
  return( 0 );
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm>:

//-------------------------------------------------------------------
inline void I2Cmaster_Mcu::waitForAckn( MTYPE state )
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  WORD i = 0xFFFF;
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	81fb      	strh	r3, [r7, #14]

  if( isHardwareOK )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x3e>
  {
    while( (--i) && !(ptr->ISR & state)  );    // wait for ACK
 8001182:	bf00      	nop
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	3b01      	subs	r3, #1
 8001188:	81fb      	strh	r3, [r7, #14]
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x38>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x38>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x3a>
 80011a2:	2300      	movs	r3, #0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ed      	bne.n	8001184 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x1a>
  }

  if( i == 0 )
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <_ZN9EmbSysLib2Hw13I2Cmaster_Mcu11waitForAcknEm+0x56>
  {
    isHardwareOK = false;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	711a      	strb	r2, [r3, #4]
    stop();
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	330c      	adds	r3, #12
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	4798      	blx	r3
  }
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh>:
//
// Memory_Flash
//
//*******************************************************************
//-------------------------------------------------------------------
Memory_Flash::Memory_Flash( BYTE sectorFirst, BYTE sectorLast )
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
 80011d4:	4613      	mov	r3, r2
 80011d6:	70bb      	strb	r3, [r7, #2]

: Memory( ReportID_Hw::Module::MEMORY_FLASH,
          0,     // recalulate later
          0xFF,  // default value
          true ) // flash
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	23ff      	movs	r3, #255	; 0xff
 80011e0:	2200      	movs	r2, #0
 80011e2:	2181      	movs	r1, #129	; 0x81
 80011e4:	f002 fd10 	bl	8003c08 <_ZN9EmbSysLib2Hw6MemoryC1Etmhb>
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0xbc>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]

{
  if( sectorFirst >= sectorLast )
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d301      	bcc.n	80011fa <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x32>
  {
    sectorLast = sectorFirst; // set last sector if not given 
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	70bb      	strb	r3, [r7, #2]
  }
  if( sectorLast > 11 ) // number of sectors matched?
 80011fa:	78bb      	ldrb	r3, [r7, #2]
 80011fc:	2b0b      	cmp	r3, #11
 80011fe:	d905      	bls.n	800120c <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x44>
  {
    report.alert( ReportID_Hw::Event::WRONG_ID );
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	330c      	adds	r3, #12
 8001204:	2107      	movs	r1, #7
 8001206:	4618      	mov	r0, r3
 8001208:	f002 f81c 	bl	8003244 <_ZN9EmbSysLib3Std6Report5alertEt>
  }

  this->sectorFirst = sectorFirst;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	765a      	strb	r2, [r3, #25]
  this->sectorLast  = sectorLast;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	78ba      	ldrb	r2, [r7, #2]
 8001216:	769a      	strb	r2, [r3, #26]
  
  ptr = SectorInfo( sectorFirst ).ptr;
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f8dd 	bl	80003e0 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh>
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	611a      	str	r2, [r3, #16]
  
  if( ptr == NULL )
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x78>
  {
    report.error( ReportID_Hw::Event::WRONG_ID );
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	330c      	adds	r3, #12
 8001238:	2107      	movs	r1, #7
 800123a:	4618      	mov	r0, r3
 800123c:	f001 ffde 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
  }

  // calculate total memory size
  size = 0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	77fb      	strb	r3, [r7, #31]
 800124a:	e00f      	b.n	800126c <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0xa4>
  {
    size += SectorInfo( s ).size;
 800124c:	7ffa      	ldrb	r2, [r7, #31]
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f8c3 	bl	80003e0 <_ZN9EmbSysLib2Hw12Memory_Flash10SectorInfoC1Eh>
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	441a      	add	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	3301      	adds	r3, #1
 800126a:	77fb      	strb	r3, [r7, #31]
 800126c:	7ffa      	ldrb	r2, [r7, #31]
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	429a      	cmp	r2, r3
 8001272:	d9eb      	bls.n	800124c <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh+0x84>
  }
  dataDoubleWord = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
}
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	080092dc 	.word	0x080092dc

08001288 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv>:

//-------------------------------------------------------------------
void Memory_Flash::unlock( void )
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  while( FLASH->SR & FLASH_SR_BSY );
 8001290:	bf00      	nop
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f4      	bne.n	8001292 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0xa>

  FLASH->KEYR = 0x45670123;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x58>)
 80012ac:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = 0xCDEF89AB;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x5c>)
 80012b2:	605a      	str	r2, [r3, #4]

  while( FLASH->SR & FLASH_SR_BSY );
 80012b4:	bf00      	nop
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x54>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f4      	bne.n	80012b6 <_ZN9EmbSysLib2Hw12Memory_Flash6unlockEv+0x2e>
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00
 80012e0:	45670123 	.word	0x45670123
 80012e4:	cdef89ab 	.word	0xcdef89ab

080012e8 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv>:

//-------------------------------------------------------------------
void Memory_Flash::lock( void )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  FLASH->CR |= FLASH_CR_LOCK;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x3c>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x3c>)
 80012f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012fa:	6113      	str	r3, [r2, #16]
  while( FLASH->SR & FLASH_SR_BSY );
 80012fc:	bf00      	nop
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x3c>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f4      	bne.n	80012fe <_ZN9EmbSysLib2Hw12Memory_Flash4lockEv+0x16>
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <_ZN9EmbSysLib2Hw12Memory_Flash6getPtrEv>:

//-------------------------------------------------------------------
inline const BYTE *Memory_Flash::getPtr( void )
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return( (const BYTE*)ptr );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN9EmbSysLib2Hw12Memory_Flash5eraseEv>:

//-------------------------------------------------------------------
void Memory_Flash::erase( void )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  unlock();
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e5b      	ldrb	r3, [r3, #25]
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e007      	b.n	800136a <_ZN9EmbSysLib2Hw12Memory_Flash5eraseEv+0x2a>
  {
    erasePage( s );
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f868 	bl	8001434 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh>
  for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e9b      	ldrb	r3, [r3, #26]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	429a      	cmp	r2, r3
 8001372:	d9f2      	bls.n	800135a <_ZN9EmbSysLib2Hw12Memory_Flash5eraseEv+0x1a>
  }
  lock();
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3304      	adds	r3, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh>:

//-------------------------------------------------------------------
void Memory_Flash::writeByte( DWORD addr, BYTE data )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	71fb      	strb	r3, [r7, #7]
  if( addr < size )
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	d22c      	bcs.n	80013fa <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x72>
  {
    if( addr == 0 )
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d110      	bne.n	80013c8 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x40>
    {
      for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	7e5b      	ldrb	r3, [r3, #25]
 80013aa:	75fb      	strb	r3, [r7, #23]
 80013ac:	e007      	b.n	80013be <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x36>
      {
        erasePage( s );
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f83e 	bl	8001434 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh>
      for( BYTE s = sectorFirst; s <= sectorLast; s++ )
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	3301      	adds	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7e9b      	ldrb	r3, [r3, #26]
 80013c2:	7dfa      	ldrb	r2, [r7, #23]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d9f2      	bls.n	80013ae <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x26>
      }
    }

    FLASH->CR |= FLASH_CR_PG;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x88>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x88>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6113      	str	r3, [r2, #16]
    
    ptr[addr] = data;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	701a      	strb	r2, [r3, #0]
    
    while( FLASH->SR & FLASH_SR_BSY );
 80013e0:	bf00      	nop
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x88>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f4      	bne.n	80013e2 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x5a>
  }
  else
  {
    report.alert( ReportID_Hw::Event::SIZE_ERROR );
  }
}
 80013f8:	e005      	b.n	8001406 <_ZN9EmbSysLib2Hw12Memory_Flash9writeByteEmh+0x7e>
    report.alert( ReportID_Hw::Event::SIZE_ERROR );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	330c      	adds	r3, #12
 80013fe:	210c      	movs	r1, #12
 8001400:	4618      	mov	r0, r3
 8001402:	f001 ff1f 	bl	8003244 <_ZN9EmbSysLib3Std6Report5alertEt>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <_ZN9EmbSysLib2Hw12Memory_Flash8readByteEm>:

//-------------------------------------------------------------------
BYTE Memory_Flash::readByte( DWORD addr )
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  return( ptr[addr] );
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh>:

//-------------------------------------------------------------------
void Memory_Flash::erasePage( BYTE sector )
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  FLASH->CR &= ~(FLASH_CR_STRT | FLASH_CR_SER | (0xf<<3)); // set SER-bit
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	4915      	ldr	r1, [pc, #84]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x6c>)
 8001448:	4013      	ands	r3, r2
 800144a:	610b      	str	r3, [r1, #16]
  FLASH->CR |=   FLASH_CR_SER | (sector<<3); 
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	00d2      	lsls	r2, r2, #3
 8001454:	4313      	orrs	r3, r2
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6113      	str	r3, [r2, #16]
  
  FLASH->CR |= FLASH_CR_STRT;// set STRT-bit
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6113      	str	r3, [r2, #16]
  
  while( FLASH->SR & FLASH_SR_BSY );
 800146a:	bf00      	nop
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf14      	ite	ne
 8001478:	2301      	movne	r3, #1
 800147a:	2300      	moveq	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f4      	bne.n	800146c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x38>
  
  FLASH->CR &= ~(FLASH_CR_STRT | FLASH_CR_SER | (0xf<<3)); // clr SER-bit
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	4905      	ldr	r1, [pc, #20]	; (800149c <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x68>)
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <_ZN9EmbSysLib2Hw12Memory_Flash9erasePageEh+0x6c>)
 800148a:	4013      	ands	r3, r2
 800148c:	610b      	str	r3, [r1, #16]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00
 80014a0:	fffeff85 	.word	0xfffeff85

080014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>:
//
// Port_Mcu
//
//*******************************************************************
//-------------------------------------------------------------------
Port_Mcu::Port_Mcu( PortId portId )
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  : Port( ReportID_Hw::Module::PORT_MCU )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2110      	movs	r1, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fc49 	bl	8003d4c <_ZN9EmbSysLib2Hw4PortC1Et>
 80014ba:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x130>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
{
  switch( portId )
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b09      	cmp	r3, #9
 80014c4:	d87a      	bhi.n	80015bc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x118>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x28>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	08001509 	.word	0x08001509
 80014d4:	0800151d 	.word	0x0800151d
 80014d8:	08001531 	.word	0x08001531
 80014dc:	08001545 	.word	0x08001545
 80014e0:	08001559 	.word	0x08001559
 80014e4:	0800156d 	.word	0x0800156d
 80014e8:	08001581 	.word	0x08001581
 80014ec:	08001595 	.word	0x08001595
 80014f0:	080015a9 	.word	0x080015a9
  {
    case PA: gpio = (GPIO_TypeDef *)(GPIOA_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x134>)
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a37      	ldr	r2, [pc, #220]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	e060      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PB: gpio = (GPIO_TypeDef *)(GPIOB_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a35      	ldr	r2, [pc, #212]	; (80015e0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x13c>)
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a32      	ldr	r2, [pc, #200]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	e056      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PC: gpio = (GPIO_TypeDef *)(GPIOC_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a31      	ldr	r2, [pc, #196]	; (80015e4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x140>)
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2d      	ldr	r2, [pc, #180]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	e04c      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PD: gpio = (GPIO_TypeDef *)(GPIOD_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a2d      	ldr	r2, [pc, #180]	; (80015e8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x144>)
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	e042      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PE: gpio = (GPIO_TypeDef *)(GPIOE_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x148>)
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	e038      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PF: gpio = (GPIO_TypeDef *)(GPIOF_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x14c>)
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	e02e      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PG: gpio = (GPIO_TypeDef *)(GPIOG_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x150>)
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	e024      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PH: gpio = (GPIO_TypeDef *)(GPIOH_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x154>)
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	e01a      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PI: gpio = (GPIO_TypeDef *)(GPIOI_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x158>)
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	e010      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    case PJ: gpio = (GPIO_TypeDef *)(GPIOJ_BASE); RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; break;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x15c>)
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x138>)
 80015b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	e006      	b.n	80015ca <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE+0x126>
    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3304      	adds	r3, #4
 80015c0:	2107      	movs	r1, #7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fe1a 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80015c8:	bf00      	nop
  }
}
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	080092bc 	.word	0x080092bc
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40021c00 	.word	0x40021c00
 80015fc:	40022000 	.word	0x40022000
 8001600:	40022400 	.word	0x40022400

08001604 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setMode( MTYPE mask, Mode mode )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	71fb      	strb	r3, [r7, #7]
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
 8001616:	e012      	b.n	800163e <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x3a>
  {
    if( mask & 0x01 )
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x2e>
    {
      setPinMode( i, mode );
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3304      	adds	r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	7df9      	ldrb	r1, [r7, #23]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	4798      	blx	r3
  for( BYTE i = 0; i < 16; i++, mask >>= 1 )
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	3301      	adds	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d9e9      	bls.n	8001618 <_ZN9EmbSysLib2Hw8Port_Mcu7setModeEmNS0_4Port4ModeE+0x14>
    }
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE>:

//-------------------------------------------------------------------
void Port_Mcu::setPinMode( BYTE pinId, Mode mode )
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	70bb      	strb	r3, [r7, #2]
  DWORD config = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]

  if( mode & Port::Out ) config |= PinConfig::OUTPUT;
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x26>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PU  ) config |= PinConfig::PULL_UP;
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x38>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	60fb      	str	r3, [r7, #12]
  if( mode & Port::PD  ) config |= PinConfig::PULL_DOWN;
 8001686:	78bb      	ldrb	r3, [r7, #2]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x4a>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001696:	60fb      	str	r3, [r7, #12]
  if( mode & Port::OD  ) config |= PinConfig::OPEN_DRAIN;
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <_ZN9EmbSysLib2Hw8Port_Mcu10setPinModeEhNS0_4Port4ModeE+0x5c>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]

  PinConfig::set( gpio, pinId, config );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6898      	ldr	r0, [r3, #8]
 80016ae:	78f9      	ldrb	r1, [r7, #3]
 80016b0:	2300      	movs	r3, #0
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f7ff f9f9 	bl	8000aaa <_ZN9EmbSysLib2Hw9PinConfig3setEP12GPIO_TypeDefhmh>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZN9EmbSysLib2Hw8Port_Mcu3setEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask )
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
//<! \todo change BSRR to BSRRL/H in stm32*.h
  gpio->BSRR = mask;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZN9EmbSysLib2Hw8Port_Mcu3setEmm>:

//-------------------------------------------------------------------
inline void Port_Mcu::set( MTYPE mask, MTYPE value )
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  gpio->BSRR = mask &  value;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	400a      	ands	r2, r1
 80016f4:	619a      	str	r2, [r3, #24]
  gpio->BSRR = (mask & ~value)<<16;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	43da      	mvns	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	401a      	ands	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	0412      	lsls	r2, r2, #16
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_ZN9EmbSysLib2Hw8Port_Mcu3clrEm>:

//-------------------------------------------------------------------
inline void Port_Mcu::clr( MTYPE mask )
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  gpio->BSRR = mask<<16;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	0412      	lsls	r2, r2, #16
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_ZN9EmbSysLib2Hw8Port_Mcu3getEv>:

//-------------------------------------------------------------------
inline MTYPE Port_Mcu::get( void )
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  return( gpio->IDR );
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	691b      	ldr	r3, [r3, #16]
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void SysTick_Handler( void )
  {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;
    
    stackPointer = save_context();
 8001750:	f7fe fd80 	bl	8000254 <save_context>
 8001754:	4603      	mov	r3, r0
 8001756:	4a0d      	ldr	r2, [pc, #52]	; (800178c <SysTick_Handler+0x40>)
 8001758:	6013      	str	r3, [r2, #0]
    Rtos_Mcu::sysTic++;
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <SysTick_Handler+0x44>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <SysTick_Handler+0x44>)
 8001762:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, true );
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <SysTick_Handler+0x48>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <SysTick_Handler+0x40>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	4610      	mov	r0, r2
 8001770:	4798      	blx	r3
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Handler+0x40>)
 8001778:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Handler+0x40>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fd75 	bl	800026e <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 8001784:	bf00      	nop
  }
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000190 	.word	0x20000190
 8001790:	2000018c 	.word	0x2000018c
 8001794:	20000188 	.word	0x20000188

08001798 <PendSV_Handler>:

//-------------------------------------------------------------------
extern "C"
{
  void PendSV_Handler( void )
  {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    static volatile DWORD stackPointer = 0;

    stackPointer = save_context();
 800179c:	f7fe fd5a 	bl	8000254 <save_context>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <PendSV_Handler+0x34>)
 80017a4:	6013      	str	r3, [r2, #0]
    stackPointer = (DWORD)Rtos_Mcu::schedule( (Rtos_Mcu::TaskHandle)stackPointer, false );
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <PendSV_Handler+0x38>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <PendSV_Handler+0x34>)
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	2100      	movs	r1, #0
 80017b0:	4610      	mov	r0, r2
 80017b2:	4798      	blx	r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <PendSV_Handler+0x34>)
 80017ba:	601a      	str	r2, [r3, #0]
    load_context( stackPointer );
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <PendSV_Handler+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd54 	bl	800026e <load_context>
    asm("NOP");  // Workaround: armclang optimizes in a way, that load_context and POP is erroneously reordered
 80017c6:	bf00      	nop
  }
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000194 	.word	0x20000194
 80017d0:	20000188 	.word	0x20000188
 80017d4:	00000000 	.word	0x00000000

080017d8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>:
Timer_Mcu *Timer_Mcu::timerPtr_10 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_11 = 0;
Timer_Mcu *Timer_Mcu::timerPtr_14 = 0;

//-------------------------------------------------------------------
Timer_Mcu::Timer_Mcu( TimerId timerIdIn,
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	460b      	mov	r3, r1
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	72fb      	strb	r3, [r7, #11]
                      DWORD   cycleTimeIn )

: Timer( ReportID_Hw::Module::TIMER_MCU )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2130      	movs	r1, #48	; 0x30
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fb60 	bl	8003eb0 <_ZN9EmbSysLib2Hw5TimerC1Et>
 80017f0:	4aa9      	ldr	r2, [pc, #676]	; (8001a98 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c0>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]

{
  timerId = timerIdIn;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	7afa      	ldrb	r2, [r7, #11]
 80017fa:	751a      	strb	r2, [r3, #20]

  switch( timerId )
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7d1b      	ldrb	r3, [r3, #20]
 8001800:	3b01      	subs	r3, #1
 8001802:	2b0a      	cmp	r3, #10
 8001804:	f200 80cb 	bhi.w	800199e <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1c6>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x38>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800183d 	.word	0x0800183d
 8001814:	0800185d 	.word	0x0800185d
 8001818:	0800187f 	.word	0x0800187f
 800181c:	0800189f 	.word	0x0800189f
 8001820:	080018bf 	.word	0x080018bf
 8001824:	080018df 	.word	0x080018df
 8001828:	080018ff 	.word	0x080018ff
 800182c:	0800191f 	.word	0x0800191f
 8001830:	0800193f 	.word	0x0800193f
 8001834:	0800195f 	.word	0x0800195f
 8001838:	0800197f 	.word	0x0800197f
  {
   case TIM_1:
      ptr           = (TIM_TypeDef*)TIM1_BASE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a97      	ldr	r2, [pc, #604]	; (8001a9c <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c4>)
 8001840:	619a      	str	r2, [r3, #24]
      timerPtr_1    = this;
 8001842:	4a97      	ldr	r2, [pc, #604]	; (8001aa0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2c8>)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001848:	4b96      	ldr	r3, [pc, #600]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	4a95      	ldr	r2, [pc, #596]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001854:	2019      	movs	r0, #25
 8001856:	f7fe fd7b 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800185a:	e0a7      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_2:
      ptr           = (TIM_TypeDef*)TIM2_BASE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	619a      	str	r2, [r3, #24]
      timerPtr_2    = this;
 8001864:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d0>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800186a:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a8d      	ldr	r2, [pc, #564]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM2_IRQn );
 8001876:	201c      	movs	r0, #28
 8001878:	f7fe fd6a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800187c:	e096      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_3:
      ptr           = (TIM_TypeDef*)TIM3_BASE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d4>)
 8001882:	619a      	str	r2, [r3, #24]
      timerPtr_3    = this;
 8001884:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2d8>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800188a:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a85      	ldr	r2, [pc, #532]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM3_IRQn );
 8001896:	201d      	movs	r0, #29
 8001898:	f7fe fd5a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800189c:	e086      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_4:
      ptr           = (TIM_TypeDef*)TIM4_BASE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a84      	ldr	r2, [pc, #528]	; (8001ab4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2dc>)
 80018a2:	619a      	str	r2, [r3, #24]
      timerPtr_4    = this;
 80018a4:	4a84      	ldr	r2, [pc, #528]	; (8001ab8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e0>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80018aa:	4b7e      	ldr	r3, [pc, #504]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a7d      	ldr	r2, [pc, #500]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM4_IRQn );
 80018b6:	201e      	movs	r0, #30
 80018b8:	f7fe fd4a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80018bc:	e076      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_5:
      ptr           = (TIM_TypeDef*)TIM5_BASE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a7e      	ldr	r2, [pc, #504]	; (8001abc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e4>)
 80018c2:	619a      	str	r2, [r3, #24]
      timerPtr_5    = this;
 80018c4:	4a7e      	ldr	r2, [pc, #504]	; (8001ac0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2e8>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80018ca:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a75      	ldr	r2, [pc, #468]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM5_IRQn );
 80018d6:	2032      	movs	r0, #50	; 0x32
 80018d8:	f7fe fd3a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80018dc:	e066      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_7:
      ptr           = (TIM_TypeDef*)TIM7_BASE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4a78      	ldr	r2, [pc, #480]	; (8001ac4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2ec>)
 80018e2:	619a      	str	r2, [r3, #24]
      timerPtr_7    = this;
 80018e4:	4a78      	ldr	r2, [pc, #480]	; (8001ac8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f0>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80018ea:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a6d      	ldr	r2, [pc, #436]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM7_IRQn );
 80018f6:	2037      	movs	r0, #55	; 0x37
 80018f8:	f7fe fd2a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80018fc:	e056      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_8:
      ptr           = (TIM_TypeDef*)TIM8_BASE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a72      	ldr	r2, [pc, #456]	; (8001acc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f4>)
 8001902:	619a      	str	r2, [r3, #24]
      timerPtr_8    = this;
 8001904:	4a72      	ldr	r2, [pc, #456]	; (8001ad0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2f8>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 800190a:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM8_CC_IRQn );
 8001916:	202e      	movs	r0, #46	; 0x2e
 8001918:	f7fe fd1a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800191c:	e046      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_9:
      ptr           = (TIM_TypeDef*)TIM9_BASE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a6c      	ldr	r2, [pc, #432]	; (8001ad4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2fc>)
 8001922:	619a      	str	r2, [r3, #24]
      timerPtr_9    = this;
 8001924:	4a6c      	ldr	r2, [pc, #432]	; (8001ad8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x300>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 800192a:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a5d      	ldr	r2, [pc, #372]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001936:	2019      	movs	r0, #25
 8001938:	f7fe fd0a 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800193c:	e036      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_10:
      ptr           = (TIM_TypeDef*)TIM10_BASE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a66      	ldr	r2, [pc, #408]	; (8001adc <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x304>)
 8001942:	619a      	str	r2, [r3, #24]
      timerPtr_10    = this;
 8001944:	4a66      	ldr	r2, [pc, #408]	; (8001ae0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x308>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 800194a:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a55      	ldr	r2, [pc, #340]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
 8001956:	2019      	movs	r0, #25
 8001958:	f7fe fcfa 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800195c:	e026      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_11:
      ptr           = (TIM_TypeDef*)TIM11_BASE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x30c>)
 8001962:	619a      	str	r2, [r3, #24]
      timerPtr_11    = this;
 8001964:	4a60      	ldr	r2, [pc, #384]	; (8001ae8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x310>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a4d      	ldr	r2, [pc, #308]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
      NVIC_EnableIRQ( TIM1_TRG_COM_TIM11_IRQn );
 8001976:	201a      	movs	r0, #26
 8001978:	f7fe fcea 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800197c:	e016      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    case TIM_14:
      ptr           = (TIM_TypeDef*)TIM14_BASE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x314>)
 8001982:	619a      	str	r2, [r3, #24]
      timerPtr_14    = this;
 8001984:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x318>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a45      	ldr	r2, [pc, #276]	; (8001aa4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2cc>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
      NVIC_EnableIRQ( TIM8_TRG_COM_TIM14_IRQn );
 8001996:	202d      	movs	r0, #45	; 0x2d
 8001998:	f7fe fcda 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800199c:	e006      	b.n	80019ac <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1d4>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	330c      	adds	r3, #12
 80019a2:	2107      	movs	r1, #7
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fc29 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80019aa:	bf00      	nop
  }

  // calculate tics and prescaler
  float rawTics = 2.0*system_PCLK_TIM * cycleTimeIn * 1E-6f;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019b6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001a80 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>
 80019ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019be:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001a88 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b0>
 80019c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ca:	edc7 7a05 	vstr	s15, [r7, #20]
  DWORD ps      = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	613b      	str	r3, [r7, #16]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 80019d2:	e00d      	b.n	80019f0 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x218>
  {
    ps      *= 10;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	613b      	str	r3, [r7, #16]
    rawTics /= 10;
 80019e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	edc7 7a05 	vstr	s15, [r7, #20]
  while( rawTics > 0x10000 ) // tics must be < 16Bits
 80019f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001af4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x31c>
 80019f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	dce8      	bgt.n	80019d4 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x1fc>
  }

  tics      = (DWORD)rawTics;
 8001a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 2a90 	vmov	r2, s15
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	611a      	str	r2, [r3, #16]
  cycleTime = (DWORD)(1E6 * tics * ps / (2.0*system_PCLK_TIM) );
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a1e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001a90 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2b8>
 8001a22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a34:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001a80 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm+0x2a8>
 8001a38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a40:	ee17 2a90 	vmov	r2, s15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	605a      	str	r2, [r3, #4]

  ptr->DIER = TIM_DIER_UIE; // update interrupt enable
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	60da      	str	r2, [r3, #12]
  ptr->EGR  = TIM_EGR_UG;   // re-initialize timer
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2201      	movs	r2, #1
 8001a56:	615a      	str	r2, [r3, #20]
  ptr->PSC  = ps   - 1;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  ptr->ARR  = tics - 1;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  ptr->CR1  = TIM_CR1_CEN;  // counter enable
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4197d784 	.word	0x4197d784
 8001a88:	a0000000 	.word	0xa0000000
 8001a8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001a90:	00000000 	.word	0x00000000
 8001a94:	412e8480 	.word	0x412e8480
 8001a98:	080092a0 	.word	0x080092a0
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	20000198 	.word	0x20000198
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	2000019c 	.word	0x2000019c
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	200001a0 	.word	0x200001a0
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	200001a4 	.word	0x200001a4
 8001abc:	40000c00 	.word	0x40000c00
 8001ac0:	200001a8 	.word	0x200001a8
 8001ac4:	40001400 	.word	0x40001400
 8001ac8:	200001ac 	.word	0x200001ac
 8001acc:	40010400 	.word	0x40010400
 8001ad0:	200001b0 	.word	0x200001b0
 8001ad4:	40014000 	.word	0x40014000
 8001ad8:	200001b4 	.word	0x200001b4
 8001adc:	40014400 	.word	0x40014400
 8001ae0:	200001b8 	.word	0x200001b8
 8001ae4:	40014800 	.word	0x40014800
 8001ae8:	200001bc 	.word	0x200001bc
 8001aec:	40002000 	.word	0x40002000
 8001af0:	200001c0 	.word	0x200001c0
 8001af4:	47800000 	.word	0x47800000

08001af8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE>:

//-------------------------------------------------------------------
void Timer_Mcu::enablePWM( BYTE channel, Mode polarity )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	4613      	mov	r3, r2
 8001b06:	70bb      	strb	r3, [r7, #2]
  switch( timerId )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7d1b      	ldrb	r3, [r3, #20]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	f200 8198 	bhi.w	8001e44 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x34c>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x24>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001baf 	.word	0x08001baf
 8001b24:	08001c0d 	.word	0x08001c0d
 8001b28:	08001c69 	.word	0x08001c69
 8001b2c:	08001cc5 	.word	0x08001cc5
 8001b30:	08001d21 	.word	0x08001d21
 8001b34:	08001d2f 	.word	0x08001d2f
 8001b38:	08001d97 	.word	0x08001d97
 8001b3c:	08001dcb 	.word	0x08001dcb
 8001b40:	08001df7 	.word	0x08001df7
 8001b44:	08001e23 	.word	0x08001e23
  {
    case TIM_1:
      switch( channel )
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d822      	bhi.n	8001b94 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x9c>
 8001b4e:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x5c>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b7d 	.word	0x08001b7d
 8001b60:	08001b89 	.word	0x08001b89
      {
        case 0: PinConfig::set( PinConfig::TIM1_CH1     ); break;
 8001b64:	2100      	movs	r1, #0
 8001b66:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001b6a:	f7ff f82b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b6e:	e017      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 1: PinConfig::set( PinConfig::TIM1_CH2     ); break;
 8001b70:	2100      	movs	r1, #0
 8001b72:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8001b76:	f7ff f825 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b7a:	e011      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 2: PinConfig::set( PinConfig::TIM1_CH3     ); break;
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8001b82:	f7ff f81f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b86:	e00b      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        case 3: PinConfig::set( PinConfig::TIM1_CH4     ); break;
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f44f 70bb 	mov.w	r0, #374	; 0x176
 8001b8e:	f7ff f819 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001b92:	e005      	b.n	8001ba0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xa8>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	330c      	adds	r3, #12
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fb2e 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM1->BDTR |= (1<<15); // MOE Master Output Enable
 8001ba0:	4bb9      	ldr	r3, [pc, #740]	; (8001e88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x390>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	4ab8      	ldr	r2, [pc, #736]	; (8001e88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x390>)
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001baa:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8001bac:	e151      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_2:
      switch( channel )
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d823      	bhi.n	8001bfc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x104>
 8001bb4:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0xc4>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be5 	.word	0x08001be5
 8001bc8:	08001bf1 	.word	0x08001bf1
      {
        case 0: PinConfig::set( PinConfig::TIM2_CH1     ); break;
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001bd2:	f7fe fff7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001bd6:	e018      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 1: PinConfig::set( PinConfig::TIM2_CH2     ); break;
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f240 1079 	movw	r0, #377	; 0x179
 8001bde:	f7fe fff1 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001be2:	e012      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 2: PinConfig::set( PinConfig::TIM2_CH3     ); break;
 8001be4:	2100      	movs	r1, #0
 8001be6:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 8001bea:	f7fe ffeb 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001bee:	e00c      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        case 3: PinConfig::set( PinConfig::TIM2_CH4     ); break;
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f240 107b 	movw	r0, #379	; 0x17b
 8001bf6:	f7fe ffe5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001bfa:	e006      	b.n	8001c0a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x112>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	330c      	adds	r3, #12
 8001c00:	2108      	movs	r1, #8
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fafa 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001c08:	e123      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001c0a:	e122      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_3:
      switch( channel )
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d822      	bhi.n	8001c58 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x160>
 8001c12:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x120>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c35 	.word	0x08001c35
 8001c20:	08001c41 	.word	0x08001c41
 8001c24:	08001c4d 	.word	0x08001c4d
      {
        case 0: PinConfig::set( PinConfig::TIM3_CH1     ); break;
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f240 107d 	movw	r0, #381	; 0x17d
 8001c2e:	f7fe ffc9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c32:	e018      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 1: PinConfig::set( PinConfig::TIM3_CH2     ); break;
 8001c34:	2100      	movs	r1, #0
 8001c36:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 8001c3a:	f7fe ffc3 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c3e:	e012      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 2: PinConfig::set( PinConfig::TIM3_CH3     ); break;
 8001c40:	2100      	movs	r1, #0
 8001c42:	f240 107f 	movw	r0, #383	; 0x17f
 8001c46:	f7fe ffbd 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c4a:	e00c      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        case 3: PinConfig::set( PinConfig::TIM3_CH4     ); break;
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8001c52:	f7fe ffb7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c56:	e006      	b.n	8001c66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x16e>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 facc 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001c64:	e0f5      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001c66:	e0f4      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_4:
      switch( channel )
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d822      	bhi.n	8001cb4 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1bc>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x17c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c91 	.word	0x08001c91
 8001c7c:	08001c9d 	.word	0x08001c9d
 8001c80:	08001ca9 	.word	0x08001ca9
      {
        case 0: PinConfig::set( PinConfig::TIM4_CH1     ); break;
 8001c84:	2100      	movs	r1, #0
 8001c86:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8001c8a:	f7fe ff9b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c8e:	e018      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 1: PinConfig::set( PinConfig::TIM4_CH2     ); break;
 8001c90:	2100      	movs	r1, #0
 8001c92:	f240 1083 	movw	r0, #387	; 0x183
 8001c96:	f7fe ff95 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001c9a:	e012      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 2: PinConfig::set( PinConfig::TIM4_CH3     ); break;
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f44f 70c2 	mov.w	r0, #388	; 0x184
 8001ca2:	f7fe ff8f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001ca6:	e00c      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        case 3: PinConfig::set( PinConfig::TIM4_CH4     ); break;
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f240 1085 	movw	r0, #389	; 0x185
 8001cae:	f7fe ff89 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001cb2:	e006      	b.n	8001cc2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1ca>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	2108      	movs	r1, #8
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 fa9e 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001cc0:	e0c7      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001cc2:	e0c6      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_5:
      switch( channel )
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d822      	bhi.n	8001d10 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x218>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x1d8>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001cf9 	.word	0x08001cf9
 8001cdc:	08001d05 	.word	0x08001d05
      {
        case 0: PinConfig::set( PinConfig::TIM5_CH1     ); break;
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f240 1087 	movw	r0, #391	; 0x187
 8001ce6:	f7fe ff6d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001cea:	e018      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 1: PinConfig::set( PinConfig::TIM5_CH2     ); break;
 8001cec:	2100      	movs	r1, #0
 8001cee:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8001cf2:	f7fe ff67 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001cf6:	e012      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 2: PinConfig::set( PinConfig::TIM5_CH3     ); break;
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	f240 1089 	movw	r0, #393	; 0x189
 8001cfe:	f7fe ff61 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d02:	e00c      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        case 3: PinConfig::set( PinConfig::TIM5_CH4     ); break;
 8001d04:	2100      	movs	r1, #0
 8001d06:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8001d0a:	f7fe ff5b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d0e:	e006      	b.n	8001d1e <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x226>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	330c      	adds	r3, #12
 8001d14:	2108      	movs	r1, #8
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fa70 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001d1c:	e099      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001d1e:	e098      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_7:
      switch( channel )
      {
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	330c      	adds	r3, #12
 8001d24:	2108      	movs	r1, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fa68 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001d2c:	e091      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_8:
      switch( channel )
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d823      	bhi.n	8001d7c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x284>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x244>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d59 	.word	0x08001d59
 8001d44:	08001d65 	.word	0x08001d65
 8001d48:	08001d71 	.word	0x08001d71
      {
        case 0: PinConfig::set( PinConfig::TIM8_CH1     ); break;
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f240 108d 	movw	r0, #397	; 0x18d
 8001d52:	f7fe ff37 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d56:	e017      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 1: PinConfig::set( PinConfig::TIM8_CH2     ); break;
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f240 108f 	movw	r0, #399	; 0x18f
 8001d5e:	f7fe ff31 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d62:	e011      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 2: PinConfig::set( PinConfig::TIM8_CH3     ); break;
 8001d64:	2100      	movs	r1, #0
 8001d66:	f240 1091 	movw	r0, #401	; 0x191
 8001d6a:	f7fe ff2b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d6e:	e00b      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        case 3: PinConfig::set( PinConfig::TIM8_CH4     ); break;
 8001d70:	2100      	movs	r1, #0
 8001d72:	f240 1093 	movw	r0, #403	; 0x193
 8001d76:	f7fe ff25 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001d7a:	e005      	b.n	8001d88 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x290>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	2108      	movs	r1, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fa3a 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM8->BDTR |= (1<<15); // MOE Master Output Enable
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x394>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x394>)
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8001d94:	e05d      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_9:
      switch( channel )
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2aa>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d006      	beq.n	8001dae <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2b6>
 8001da0:	e00b      	b.n	8001dba <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2c2>
      {
        case 0: PinConfig::set( PinConfig::TIM9_CH1     ); break;
 8001da2:	2100      	movs	r1, #0
 8001da4:	f240 1095 	movw	r0, #405	; 0x195
 8001da8:	f7fe ff0c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001dac:	e00c      	b.n	8001dc8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2d0>
        case 1: PinConfig::set( PinConfig::TIM9_CH2     ); break;
 8001dae:	2100      	movs	r1, #0
 8001db0:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8001db4:	f7fe ff06 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001db8:	e006      	b.n	8001dc8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2d0>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 fa1b 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      break;
 8001dc6:	e044      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
 8001dc8:	e043      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_10:
      switch( channel )
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2e4>
      {
        case 0: PinConfig::set( PinConfig::TIM10_CH1     ); break;
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001dd6:	f7fe fef5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001dda:	e005      	b.n	8001de8 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x2f0>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	330c      	adds	r3, #12
 8001de0:	2108      	movs	r1, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fa0a 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM10->BDTR |= (1<<15); // MOE Master Output Enable
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x398>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x398>)
 8001dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8001df4:	e02d      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_11:
      switch( channel )
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x310>
      {
        case 0: PinConfig::set( PinConfig::TIM11_CH1     ); break;
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f240 1069 	movw	r0, #361	; 0x169
 8001e02:	f7fe fedf 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e06:	e005      	b.n	8001e14 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x31c>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	330c      	adds	r3, #12
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 f9f4 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
      TIM11->BDTR |= (1<<15); // MOE Master Output Enable
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x39c>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x39c>)
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1e:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8001e20:	e017      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    case TIM_14:
      switch( channel )
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x33e>
      {
        case 0: PinConfig::set( PinConfig::TIM14_CH1     ); break;
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f240 106d 	movw	r0, #365	; 0x16d
 8001e2e:	f7fe fec9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
 8001e32:	bf00      	nop
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
      }
      break;
 8001e34:	e00d      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>
        default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 f9dd 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001e42:	e006      	b.n	8001e52 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x35a>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	330c      	adds	r3, #12
 8001e48:	2107      	movs	r1, #7
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 f9d6 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001e50:	bf00      	nop
  }

  WORD ccmr =  (7<<4)  // OCxM: PWM-mode 2
 8001e52:	2378      	movs	r3, #120	; 0x78
 8001e54:	81bb      	strh	r3, [r7, #12]
              |(1<<3); // OCxPE: preload enable

  WORD ccer = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
  if( polarity )
 8001e5a:	78bb      	ldrb	r3, [r7, #2]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x36e>
  {
   ccer =  (1<<2)  // CCxNE: enable
 8001e60:	230c      	movs	r3, #12
 8001e62:	81fb      	strh	r3, [r7, #14]
 8001e64:	e001      	b.n	8001e6a <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x372>
          |(1<<3); // CCxNP: polarity active low
  }
  else
  {
   ccer =  (1<<0)  // CCxE: enable
 8001e66:	2303      	movs	r3, #3
 8001e68:	81fb      	strh	r3, [r7, #14]
          |(1<<1); // CCxP: polarity active low
  }
  switch( channel )
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d861      	bhi.n	8001f34 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x43c>
 8001e70:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x380>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e99 	.word	0x08001e99
 8001e7c:	08001ebb 	.word	0x08001ebb
 8001e80:	08001ee5 	.word	0x08001ee5
 8001e84:	08001f0b 	.word	0x08001f0b
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40010400 	.word	0x40010400
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800
  {
    case 0:
      ptr->CCMR1 |=  ccmr;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	6999      	ldr	r1, [r3, #24]
 8001e9e:	89ba      	ldrh	r2, [r7, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	6a19      	ldr	r1, [r3, #32]
 8001eae:	89fa      	ldrh	r2, [r7, #14]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	621a      	str	r2, [r3, #32]
      break;
 8001eb8:	e043      	b.n	8001f42 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    case 1:
      ptr->CCMR1 |=  ccmr<<8;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	89bb      	ldrh	r3, [r7, #12]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	619a      	str	r2, [r3, #24]
      ptr->CCER  |=  ccer<<4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	621a      	str	r2, [r3, #32]
      break;
 8001ee2:	e02e      	b.n	8001f42 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    case 2:
      ptr->CCMR2 |=  ccmr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	69d9      	ldr	r1, [r3, #28]
 8001eea:	89ba      	ldrh	r2, [r7, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<8;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	621a      	str	r2, [r3, #32]
      break;
 8001f08:	e01b      	b.n	8001f42 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    case 3:
      ptr->CCMR2 |=  ccmr<<8;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	89bb      	ldrh	r3, [r7, #12]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	4619      	mov	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	61da      	str	r2, [r3, #28]
      ptr->CCER  |=  ccer<<12;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	031b      	lsls	r3, r3, #12
 8001f28:	4619      	mov	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	621a      	str	r2, [r3, #32]
      break;
 8001f32:	e006      	b.n	8001f42 <_ZN9EmbSysLib2Hw9Timer_Mcu9enablePWMEhNS0_5Timer4ModeE+0x44a>

    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	330c      	adds	r3, #12
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f95e 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001f40:	bf00      	nop
  }
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop

08001f4c <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht>:

//-------------------------------------------------------------------
void Timer_Mcu::setPWM( BYTE ch, WORD value )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	803b      	strh	r3, [r7, #0]
  value = (WORD)((DWORD)value*tics >> 16);
 8001f5c:	883b      	ldrh	r3, [r7, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6912      	ldr	r2, [r2, #16]
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	0c1b      	lsrs	r3, r3, #16
 8001f68:	803b      	strh	r3, [r7, #0]

  switch( ch )
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d81f      	bhi.n	8001fb0 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x64>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x2c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001f93 	.word	0x08001f93
 8001f80:	08001f9d 	.word	0x08001f9d
 8001f84:	08001fa7 	.word	0x08001fa7
  {
    case 0: ptr->CCR1  = value; break;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	883a      	ldrh	r2, [r7, #0]
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f90:	e015      	b.n	8001fbe <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 1: ptr->CCR2  = value; break;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	883a      	ldrh	r2, [r7, #0]
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
 8001f9a:	e010      	b.n	8001fbe <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 2: ptr->CCR3  = value; break;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	883a      	ldrh	r2, [r7, #0]
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fa4:	e00b      	b.n	8001fbe <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    case 3: ptr->CCR4  = value; break;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	883a      	ldrh	r2, [r7, #0]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
 8001fae:	e006      	b.n	8001fbe <_ZN9EmbSysLib2Hw9Timer_Mcu6setPWMEht+0x72>
    default:report.error( ReportID_Hw::Event::WRONG_CHANNEL );
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	330c      	adds	r3, #12
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f920 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 8001fbc:	bf00      	nop
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>:

//-------------------------------------------------------------------
void Timer_Mcu::isr(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  // ptr->SR &= ~TIM_SR_TIF;
  ptr->SR = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  isrHandler();
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3310      	adds	r3, #16
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4798      	blx	r3
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <TIM1_UP_TIM10_IRQHandler>:

//-------------------------------------------------------------------
extern "C" {
  void TIM1_UP_TIM10_IRQHandler(void)
  {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    if( TIM1->SR & TIM_SR_UIF )
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <TIM1_UP_TIM10_IRQHandler+0x2a>
    {
      TIM1->SR = 0;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <TIM1_UP_TIM10_IRQHandler+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_1->isr();
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ffd7 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
    if( TIM9->SR )
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <TIM1_UP_TIM10_IRQHandler+0x4c>
    {
      TIM9->SR=0;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_9->isr();
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ffc6 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
    if( TIM10->SR )
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <TIM1_UP_TIM10_IRQHandler+0x84>)
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <TIM1_UP_TIM10_IRQHandler+0x6e>
    {
      TIM10->SR=0;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_10->isr();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ffb5 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	20000198 	.word	0x20000198
 800206c:	40014000 	.word	0x40014000
 8002070:	200001b4 	.word	0x200001b4
 8002074:	40014400 	.word	0x40014400
 8002078:	200001b8 	.word	0x200001b8

0800207c <TIM1_TRG_COM_TIM11_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM1_TRG_COM_TIM11_IRQHandler(void)
  {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    if( TIM11->SR )
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    {
      TIM11->SR=0;
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_11->isr();
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff93 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40014800 	.word	0x40014800
 80020ac:	200001bc 	.word	0x200001bc

080020b0 <TIM8_TRG_COM_TIM14_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_TRG_COM_TIM14_IRQHandler(void)
  {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    if( TIM14->SR )
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    {
      TIM14->SR=0;
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
      Timer_Mcu::timerPtr_14->isr();
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff79 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
    }
  }
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40002000 	.word	0x40002000
 80020e0:	200001c0 	.word	0x200001c0

080020e4 <TIM2_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM2_IRQHandler(void)
  {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_2->isr();
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <TIM2_IRQHandler+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff6b 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000019c 	.word	0x2000019c

080020fc <TIM3_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM3_IRQHandler(void)
  {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_3->isr();
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <TIM3_IRQHandler+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5f 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200001a0 	.word	0x200001a0

08002114 <TIM4_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM4_IRQHandler(void)
  {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_4->isr();
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <TIM4_IRQHandler+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff53 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200001a4 	.word	0x200001a4

0800212c <TIM5_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM5_IRQHandler(void)
  {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_5->isr();
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <TIM5_IRQHandler+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff47 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200001a8 	.word	0x200001a8

08002144 <TIM7_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM7_IRQHandler(void)
  {
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_7->isr();
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <TIM7_IRQHandler+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff3b 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200001ac 	.word	0x200001ac

0800215c <TIM8_CC_IRQHandler>:
}

//-------------------------------------------------------------------
extern "C" {
  void TIM8_CC_IRQHandler(void)
  {
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
    Timer_Mcu::timerPtr_8->isr();
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <TIM8_CC_IRQHandler+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff2f 	bl	8001fc8 <_ZN9EmbSysLib2Hw9Timer_Mcu3isrEv>
  }
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200001b0 	.word	0x200001b0

08002174 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>:
Uart_Mcu *Uart_Mcu::uartPtr_4 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_5 = 0;
Uart_Mcu *Uart_Mcu::uartPtr_6 = 0;

//-------------------------------------------------------------------
Uart_Mcu::Uart_Mcu( USART_Id id,
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	72fb      	strb	r3, [r7, #11]
 8002184:	4613      	mov	r3, r2
 8002186:	72bb      	strb	r3, [r7, #10]
                    DWORD    baud,
                    BYTE     mode,
                    WORD     sizeRxBuf,
                    WORD     sizeTxBuf )

: Uart( ReportID_Hw::Module::UART_MCU, sizeRxBuf, sizeTxBuf )
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	8bbb      	ldrh	r3, [r7, #28]
 800218c:	8b3a      	ldrh	r2, [r7, #24]
 800218e:	2120      	movs	r1, #32
 8002190:	f001 ff6e 	bl	8004070 <_ZN9EmbSysLib2Hw4UartC1Ettt>
 8002194:	4aa9      	ldr	r2, [pc, #676]	; (800243c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2c8>)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]
{
  switch( id )
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	3b01      	subs	r3, #1
 800219e:	2b05      	cmp	r3, #5
 80021a0:	f200 80fc 	bhi.w	800239c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x228>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x38>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	08002221 	.word	0x08002221
 80021b4:	0800227d 	.word	0x0800227d
 80021b8:	080022d9 	.word	0x080022d9
 80021bc:	0800230d 	.word	0x0800230d
 80021c0:	08002341 	.word	0x08002341
  {
    case USART_1:
      ptr           = (USART_TypeDef*)USART1_BASE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a9e      	ldr	r2, [pc, #632]	; (8002440 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2cc>)
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_1     = this;
 80021ca:	4a9e      	ldr	r2, [pc, #632]	; (8002444 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d0>)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80021d0:	4b9d      	ldr	r3, [pc, #628]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	4a9c      	ldr	r2, [pc, #624]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6453      	str	r3, [r2, #68]	; 0x44
      PinConfig::set( PinConfig::USART1_RX, PinConfig::ALTERNATE_FUNC );
 80021dc:	2102      	movs	r1, #2
 80021de:	f240 10af 	movw	r0, #431	; 0x1af
 80021e2:	f7fe fcef 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART1_TX, PinConfig::ALTERNATE_FUNC );
 80021e6:	2102      	movs	r1, #2
 80021e8:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 80021ec:	f7fe fcea 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 80021f0:	7abb      	ldrb	r3, [r7, #10]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x90>
      {
        PinConfig::set( PinConfig::USART1_RTS, PinConfig::ALTERNATE_FUNC );
 80021fa:	2102      	movs	r1, #2
 80021fc:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002200:	f7fe fce0 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002204:	7abb      	ldrb	r3, [r7, #10]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0xa4>
      {
        PinConfig::set( PinConfig::USART1_CTS, PinConfig::ALTERNATE_FUNC );
 800220e:	2102      	movs	r1, #2
 8002210:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 8002214:	f7fe fcd6 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART1_IRQn );
 8002218:	2025      	movs	r0, #37	; 0x25
 800221a:	f7fe f899 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800221e:	e0c4      	b.n	80023aa <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

  case USART_2:
      ptr           = (USART_TypeDef*)USART2_BASE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a8a      	ldr	r2, [pc, #552]	; (800244c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d8>)
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_2     = this;
 8002226:	4a8a      	ldr	r2, [pc, #552]	; (8002450 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2dc>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800222c:	4b86      	ldr	r3, [pc, #536]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a85      	ldr	r2, [pc, #532]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::USART2_RX, PinConfig::ALTERNATE_FUNC );
 8002238:	2102      	movs	r1, #2
 800223a:	f240 10b5 	movw	r0, #437	; 0x1b5
 800223e:	f7fe fcc1 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART2_TX, PinConfig::ALTERNATE_FUNC );
 8002242:	2102      	movs	r1, #2
 8002244:	f44f 70db 	mov.w	r0, #438	; 0x1b6
 8002248:	f7fe fcbc 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 800224c:	7abb      	ldrb	r3, [r7, #10]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0xec>
      {
        PinConfig::set( PinConfig::USART2_RTS, PinConfig::ALTERNATE_FUNC );
 8002256:	2102      	movs	r1, #2
 8002258:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 800225c:	f7fe fcb2 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002260:	7abb      	ldrb	r3, [r7, #10]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x100>
      {
        PinConfig::set( PinConfig::USART2_CTS, PinConfig::ALTERNATE_FUNC );
 800226a:	2102      	movs	r1, #2
 800226c:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
 8002270:	f7fe fca8 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART2_IRQn );
 8002274:	2026      	movs	r0, #38	; 0x26
 8002276:	f7fe f86b 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800227a:	e096      	b.n	80023aa <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case USART_3:
      ptr           = (USART_TypeDef*)USART3_BASE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a75      	ldr	r2, [pc, #468]	; (8002454 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e0>)
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_3     = this;
 8002282:	4a75      	ldr	r2, [pc, #468]	; (8002458 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e4>)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8002288:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800228e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::USART3_RX, PinConfig::ALTERNATE_FUNC );
 8002294:	2102      	movs	r1, #2
 8002296:	f240 10bb 	movw	r0, #443	; 0x1bb
 800229a:	f7fe fc93 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART3_TX, PinConfig::ALTERNATE_FUNC );
 800229e:	2102      	movs	r1, #2
 80022a0:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 80022a4:	f7fe fc8e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 80022a8:	7abb      	ldrb	r3, [r7, #10]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x148>
      {
        PinConfig::set( PinConfig::USART3_RTS, PinConfig::ALTERNATE_FUNC );
 80022b2:	2102      	movs	r1, #2
 80022b4:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
 80022b8:	f7fe fc84 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 80022bc:	7abb      	ldrb	r3, [r7, #10]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x15c>
      {
        PinConfig::set( PinConfig::USART3_CTS, PinConfig::ALTERNATE_FUNC );
 80022c6:	2102      	movs	r1, #2
 80022c8:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80022cc:	f7fe fc7a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART3_IRQn );
 80022d0:	2027      	movs	r0, #39	; 0x27
 80022d2:	f7fe f83d 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 80022d6:	e068      	b.n	80023aa <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case UART_4:
      ptr           = (USART_TypeDef*)UART4_BASE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a60      	ldr	r2, [pc, #384]	; (800245c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2e8>)
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_4     = this;
 80022de:	4a60      	ldr	r2, [pc, #384]	; (8002460 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2ec>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART4EN;
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 80022ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022ee:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::UART4_RX, PinConfig::ALTERNATE_FUNC );
 80022f0:	2102      	movs	r1, #2
 80022f2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80022f6:	f7fe fc65 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::UART4_TX, PinConfig::ALTERNATE_FUNC );
 80022fa:	2102      	movs	r1, #2
 80022fc:	f240 109b 	movw	r0, #411	; 0x19b
 8002300:	f7fe fc60 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      // no RTS/CTS
      NVIC_EnableIRQ( UART4_IRQn );
 8002304:	2034      	movs	r0, #52	; 0x34
 8002306:	f7fe f823 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800230a:	e04e      	b.n	80023aa <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case UART_5:
      ptr           = (USART_TypeDef*)UART5_BASE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a55      	ldr	r2, [pc, #340]	; (8002464 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f0>)
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_5     = this;
 8002312:	4a55      	ldr	r2, [pc, #340]	; (8002468 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f4>)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6013      	str	r3, [r2, #0]
      RCC->APB1ENR |= RCC_APB1ENR_UART5EN;
 8002318:	4b4b      	ldr	r3, [pc, #300]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002322:	6413      	str	r3, [r2, #64]	; 0x40
      PinConfig::set( PinConfig::UART5_RX, PinConfig::ALTERNATE_FUNC );
 8002324:	2102      	movs	r1, #2
 8002326:	f240 109f 	movw	r0, #415	; 0x19f
 800232a:	f7fe fc4b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::UART5_TX, PinConfig::ALTERNATE_FUNC );
 800232e:	2102      	movs	r1, #2
 8002330:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8002334:	f7fe fc46 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      // no RTS/CTS
      NVIC_EnableIRQ( UART5_IRQn );
 8002338:	2035      	movs	r0, #53	; 0x35
 800233a:	f7fe f809 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800233e:	e034      	b.n	80023aa <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    case USART_6:
      ptr           = (USART_TypeDef*)USART6_BASE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a4a      	ldr	r2, [pc, #296]	; (800246c <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2f8>)
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
      uartPtr_6     = this;
 8002346:	4a4a      	ldr	r2, [pc, #296]	; (8002470 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2fc>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6013      	str	r3, [r2, #0]
      RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800234c:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x2d4>)
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	6453      	str	r3, [r2, #68]	; 0x44
      PinConfig::set( PinConfig::USART6_RX, PinConfig::ALTERNATE_FUNC );
 8002358:	2102      	movs	r1, #2
 800235a:	f240 10c1 	movw	r0, #449	; 0x1c1
 800235e:	f7fe fc31 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set( PinConfig::USART6_TX, PinConfig::ALTERNATE_FUNC );
 8002362:	2102      	movs	r1, #2
 8002364:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002368:	f7fe fc2c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      if( mode & RTS )
 800236c:	7abb      	ldrb	r3, [r7, #10]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x20c>
      {
        PinConfig::set( PinConfig::USART6_RTS, PinConfig::ALTERNATE_FUNC );
 8002376:	2102      	movs	r1, #2
 8002378:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 800237c:	f7fe fc22 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      if( mode & CTS )
 8002380:	7abb      	ldrb	r3, [r7, #10]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x220>
      {
        PinConfig::set( PinConfig::USART6_CTS, PinConfig::ALTERNATE_FUNC );
 800238a:	2102      	movs	r1, #2
 800238c:	f44f 70df 	mov.w	r0, #446	; 0x1be
 8002390:	f7fe fc18 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      }
      NVIC_EnableIRQ( USART6_IRQn );
 8002394:	2047      	movs	r0, #71	; 0x47
 8002396:	f7fd ffdb 	bl	8000350 <__NVIC_EnableIRQ>
      break;
 800239a:	e006      	b.n	80023aa <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x236>

    default:
      report.error( ReportID_Hw::Event::WRONG_ID );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	331e      	adds	r3, #30
 80023a0:	2107      	movs	r1, #7
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 ff2a 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      break;
 80023a8:	bf00      	nop

  }

  ptr->CR2 |=  ((MTYPE)0<<12); // 0: 1 stop bit
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	6852      	ldr	r2, [r2, #4]
 80023b4:	605a      	str	r2, [r3, #4]

  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	7abb      	ldrb	r3, [r7, #10]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x258>
 80023c6:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
 80023ca:	e000      	b.n	80023ce <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x25a>
 80023cc:	2100      	movs	r1, #0
                     |  ((mode&(EVEN|ODD))?USART_CR1_PCE:0)  //  parity
 80023ce:	7abb      	ldrb	r3, [r7, #10]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x26a>
 80023d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023dc:	e000      	b.n	80023e0 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt+0x26c>
 80023de:	2300      	movs	r3, #0
 80023e0:	4319      	orrs	r1, r3
                     |  ((mode&      ODD )?USART_CR1_PS :0)  // 0: even
 80023e2:	7abb      	ldrb	r3, [r7, #10]
 80023e4:	025b      	lsls	r3, r3, #9
 80023e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ea:	430b      	orrs	r3, r1
  ptr->CR1 |=  (        ((mode&(EVEN|ODD))?USART_CR1_M  :0)  // 8+paritry = 9 Bit
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f042 020c 	orr.w	r2, r2, #12
 80023f6:	601a      	str	r2, [r3, #0]
                     |  USART_CR1_RE   // RX mode
                     |  USART_CR1_TE );// TX mode

  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	7abb      	ldrb	r3, [r7, #10]
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	f403 7280 	and.w	r2, r3, #256	; 0x100
                | ((mode&CTS)?USART_CR3_CTSE:0) ); // set hardware flow control
 8002406:	7abb      	ldrb	r3, [r7, #10]
 8002408:	01db      	lsls	r3, r3, #7
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	431a      	orrs	r2, r3
  ptr->CR3 |=  (  ((mode&RTS)?USART_CR3_RTSE:0)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]

  setBaudrate( baud );
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f848 	bl	80024b0 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>

  ptr->CR1 |= (  USART_CR1_UE       // Enable USART
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f042 0261 	orr.w	r2, r2, #97	; 0x61
 800242e:	601a      	str	r2, [r3, #0]
               | USART_CR1_TCIE     // Transm. complete interr. enable
               | USART_CR1_RXNEIE );// Receive reg. not empty interr. enable
}
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	0800922c 	.word	0x0800922c
 8002440:	40011000 	.word	0x40011000
 8002444:	200001c4 	.word	0x200001c4
 8002448:	40023800 	.word	0x40023800
 800244c:	40004400 	.word	0x40004400
 8002450:	200001c8 	.word	0x200001c8
 8002454:	40004800 	.word	0x40004800
 8002458:	200001cc 	.word	0x200001cc
 800245c:	40004c00 	.word	0x40004c00
 8002460:	200001d0 	.word	0x200001d0
 8002464:	40005000 	.word	0x40005000
 8002468:	200001d4 	.word	0x200001d4
 800246c:	40011400 	.word	0x40011400
 8002470:	200001d8 	.word	0x200001d8

08002474 <_ZN9EmbSysLib2Hw8Uart_Mcu7getByteEv>:

//-------------------------------------------------------------------
inline BYTE Uart_Mcu::getByte( void )
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return( ptr->RDR );
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_ZN9EmbSysLib2Hw8Uart_Mcu7setByteEh>:

//-------------------------------------------------------------------
inline void Uart_Mcu::setByte( BYTE c )
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  ptr->TDR = c;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm>:
//            fck                         fck
//   div = ---------  =>  BRR = 16*div = ------
//         16 x baud                      baud
//
void Uart_Mcu::setBaudrate( DWORD baud )
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  if( baud > 1500)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d923      	bls.n	800250c <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x5c>
  {
    DWORD brr = (WORD)(2.0*system_PCLK_UART / baud);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80024ce:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8002540 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x90>
 80024d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024da:	ee17 3a90 	vmov	r3, s15
 80024de:	b29b      	uxth	r3, r3
 80024e0:	60bb      	str	r3, [r7, #8]
    ptr->BRR  = (brr&0XFFF0) | ((brr>>1)&0x0007);
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80024e8:	4013      	ands	r3, r2
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	0852      	lsrs	r2, r2, #1
 80024ee:	f002 0107 	and.w	r1, r2, #7
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024f6:	430b      	orrs	r3, r1
 80024f8:	60d3      	str	r3, [r2, #12]
    ptr->CR1 |= USART_CR1_OVER8;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002508:	601a      	str	r2, [r3, #0]
  {
    DWORD brr = (WORD)(system_PCLK_UART / baud);
    ptr->BRR  = brr;
    ptr->CR1 &= ~USART_CR1_OVER8;
  }
}
 800250a:	e011      	b.n	8002530 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x80>
    DWORD brr = (WORD)(system_PCLK_UART / baud);
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <_ZN9EmbSysLib2Hw8Uart_Mcu11setBaudrateEm+0x98>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	b29b      	uxth	r3, r3
 8002516:	60fb      	str	r3, [r7, #12]
    ptr->BRR  = brr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	60da      	str	r2, [r3, #12]
    ptr->CR1 &= ~USART_CR1_OVER8;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	f3af 8000 	nop.w
 8002540:	00000000 	.word	0x00000000
 8002544:	4197d784 	.word	0x4197d784
 8002548:	02faf080 	.word	0x02faf080

0800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>:

//-------------------------------------------------------------------
void Uart_Mcu::isr( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if( ptr->ISR & USART_ISR_RXNE ) // Receive data register not empty?
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x2e>
  {
    isrRx();
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	331c      	adds	r3, #28
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4610      	mov	r0, r2
 8002578:	4798      	blx	r3
  }
  if( ptr->ISR & USART_ISR_TC ) // Transmission complete?
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00e      	beq.n	80025b0 <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv+0x64>
  {
    ptr->ICR |= USART_ICR_TCCF;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	621a      	str	r2, [r3, #32]
    isrTx();
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3320      	adds	r3, #32
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4610      	mov	r0, r2
 80025ae:	4798      	blx	r3
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <USART1_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART1_IRQHandler(void)
  {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_1->isr();
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <USART1_IRQHandler+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ffc3 	bl	800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200001c4 	.word	0x200001c4

080025d0 <USART2_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART2_IRQHandler(void)
  {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_2->isr();
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <USART2_IRQHandler+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ffb7 	bl	800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200001c8 	.word	0x200001c8

080025e8 <USART3_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART3_IRQHandler(void)
  {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_3->isr();
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <USART3_IRQHandler+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ffab 	bl	800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001cc 	.word	0x200001cc

08002600 <UART4_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART4_IRQHandler(void)
  {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_4->isr();
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <UART4_IRQHandler+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff9f 	bl	800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200001d0 	.word	0x200001d0

08002618 <UART5_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void UART5_IRQHandler(void)
  {
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_5->isr();
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <UART5_IRQHandler+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff93 	bl	800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200001d4 	.word	0x200001d4

08002630 <USART6_IRQHandler>:

//-------------------------------------------------------------------
extern "C"
{
  void USART6_IRQHandler(void)
  {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
    Uart_Mcu::uartPtr_6->isr();
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <USART6_IRQHandler+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff87 	bl	800254c <_ZN9EmbSysLib2Hw8Uart_Mcu3isrEv>
  }
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200001d8 	.word	0x200001d8

08002648 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth>:
  fifo = (__IO DWORD                 *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE         + (num)*USB_OTG_FIFO_SIZE   );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::config( WORD epMPS, BYTE epType )
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  txBuf.maxpacket = epMPS;
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

  if( num == 0 )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0
 800266a:	2300      	movs	r3, #0
 800266c:	807b      	strh	r3, [r7, #2]
  }
  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (num)));
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x90>)
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	2301      	movs	r3, #1
 800267a:	408b      	lsls	r3, r1
 800267c:	b29b      	uxth	r3, r3
 800267e:	4916      	ldr	r1, [pc, #88]	; (80026d8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x90>)
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  if( !(inep->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d015      	beq.n	80026ca <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x82>
  {
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                      | (epType << 18 )
 80026ac:	7879      	ldrb	r1, [r7, #1]
 80026ae:	0489      	lsls	r1, r1, #18
 80026b0:	430b      	orrs	r3, r1
                      | (num    << 22 )
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	7809      	ldrb	r1, [r1, #0]
 80026b6:	0589      	lsls	r1, r1, #22
 80026b8:	430b      	orrs	r3, r1
    inep->DIEPCTL |= (  (epMPS & USB_OTG_DIEPCTL_MPSIZ )
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth+0x94>)
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6013      	str	r3, [r2, #0]
                      | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
                      | USB_OTG_DIEPCTL_USBAEP );
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	50000800 	.word	0x50000800
 80026dc:	10008000 	.word	0x10008000

080026e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>:
  return( len );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::writeToFifo( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  WORD len = MIN( txBuf.size, txBuf.maxpacket );
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f003 f88e 	bl	8005818 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 80026fc:	4603      	mov	r3, r0
 80026fe:	823b      	strh	r3, [r7, #16]
  WORD cnt = (len + 3) / 4;
 8002700:	8a3b      	ldrh	r3, [r7, #16]
 8002702:	3303      	adds	r3, #3
 8002704:	2b00      	cmp	r3, #0
 8002706:	da00      	bge.n	800270a <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x2a>
 8002708:	3303      	adds	r3, #3
 800270a:	109b      	asrs	r3, r3, #2
 800270c:	81fb      	strh	r3, [r7, #14]

  if( (inep->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= cnt )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	b29a      	uxth	r2, r3
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	429a      	cmp	r2, r3
 800271c:	bf2c      	ite	cs
 800271e:	2301      	movcs	r3, #1
 8002720:	2300      	movcc	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01d      	beq.n	8002764 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x84>
  {
    DWORD *src = (DWORD *)&txBuf.data[0];
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	617b      	str	r3, [r7, #20]

    txBuf.size = 0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    txBuf.flag = false;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

    for( WORD i = 0; i < cnt; i++, src ++)
 800273e:	2300      	movs	r3, #0
 8002740:	827b      	strh	r3, [r7, #18]
 8002742:	e00b      	b.n	800275c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x7c>
    {
      *fifo = *src;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	601a      	str	r2, [r3, #0]
    for( WORD i = 0; i < cnt; i++, src ++)
 8002750:	8a7b      	ldrh	r3, [r7, #18]
 8002752:	3301      	adds	r3, #1
 8002754:	827b      	strh	r3, [r7, #18]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3304      	adds	r3, #4
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	8a7a      	ldrh	r2, [r7, #18]
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	429a      	cmp	r2, r3
 8002762:	d3ef      	bcc.n	8002744 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0x64>
    }
  }

  if( len <= 0 )
 8002764:	8a3b      	ldrh	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10b      	bne.n	8002782 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xa2>
  {
    USB_DEVICE->DIEPEMPMSK &= ~(0x1 << num);
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xac>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4611      	mov	r1, r2
 8002774:	2201      	movs	r2, #1
 8002776:	408a      	lsls	r2, r1
 8002778:	43d2      	mvns	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4a03      	ldr	r2, [pc, #12]	; (800278c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv+0xac>)
 800277e:	400b      	ands	r3, r1
 8002780:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	50000800 	.word	0x50000800

08002790 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::transmit( bool flag )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
  WORD mps  = txBuf.maxpacket;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80027a2:	81fb      	strh	r3, [r7, #14]
  WORD len  = MIN( txBuf.size, txBuf.maxpacket );
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f003 f830 	bl	8005818 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 80027b8:	4603      	mov	r3, r0
 80027ba:	81bb      	strh	r3, [r7, #12]

  if( !txBuf.flag )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0x3e>
  {
    transmitZLP();
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f842 	bl	8002850 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>
    return;
 80027cc:	e038      	b.n	8002840 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb0>
  }

  if( len == 0 ) // Zero Length Packet?
 80027ce:	89bb      	ldrh	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0x52>
  {
    if( flag )
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d032      	beq.n	8002840 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb0>
    {
      transmitZLP();
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f838 	bl	8002850 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>
 80027e0:	e02e      	b.n	8002840 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb0>
    }
  }
  else
  {
    BYTE pktCnt =  ((len + mps -1)/ mps);
 80027e2:	89ba      	ldrh	r2, [r7, #12]
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	4413      	add	r3, r2
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80027f0:	72fb      	strb	r3, [r7, #11]

    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
                                             | USB_OTG_DIEPTSIZ_XFRSIZ ) )
                      | ((   USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	04db      	lsls	r3, r3, #19
 8002802:	461a      	mov	r2, r3
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xb8>)
 8002806:	4013      	ands	r3, r2
                           |(USB_OTG_DIEPTSIZ_XFRSIZ & len           ));
 8002808:	89ba      	ldrh	r2, [r7, #12]
 800280a:	431a      	orrs	r2, r3
    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
                      | ((   USB_OTG_DIEPTSIZ_PKTCNT & (pktCnt << 19))
 8002812:	430a      	orrs	r2, r1
    inep->DIEPTSIZ =  (  inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002814:	611a      	str	r2, [r3, #16]

    USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xbc>)
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	4611      	mov	r1, r2
 8002820:	2201      	movs	r2, #1
 8002822:	408a      	lsls	r2, r1
 8002824:	4611      	mov	r1, r2
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb+0xbc>)
 8002828:	430b      	orrs	r3, r1
 800282a:	6353      	str	r3, [r2, #52]	; 0x34

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800283e:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
  }
}
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	1ff80000 	.word	0x1ff80000
 800284c:	50000800 	.word	0x50000800

08002850 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11transmitZLPEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::transmitZLP( void )
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    inep->DIEPTSIZ =  ( inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
                                            | USB_OTG_DIEPTSIZ_XFRSIZ ) )
                      | (   USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19) );
 800286a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    inep->DIEPTSIZ =  ( inep->DIEPTSIZ & ~(   USB_OTG_DIEPTSIZ_PKTCNT
 800286e:	611a      	str	r2, [r3, #16]

 //   USB_DEVICE->DIEPEMPMSK |= 1 << num; // Enable Tx FIFO Empty Interrupt

    inep->DIEPCTL  |=  (   USB_OTG_DIEPCTL_CNAK
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002882:	601a      	str	r2, [r3, #0]
                         | USB_OTG_DIEPCTL_EPENA ); // Enable EP
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::EndpointIN::getInterrupt( void )
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  DWORD msk = USB_DEVICE->DIEPMSK | (((USB_DEVICE->DIEPEMPMSK >> num) & 0x1) << 7);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv+0x38>)
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv+0x38>)
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	7809      	ldrb	r1, [r1, #0]
 80028a4:	40cb      	lsrs	r3, r1
 80028a6:	01db      	lsls	r3, r3, #7
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

  return( inep->DIEPINT & msk );
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	50000800 	.word	0x50000800

080028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointIN::clrInterrupt( DWORD interruptID )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  inep->DIEPINT |= interruptID; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth>:
  fifo  = (__IO DWORD                  *)((DWORD)USB_OTG_FS + USB_OTG_FIFO_BASE                                     );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::config( WORD epMPS, BYTE epType )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  rxBuf.maxpacket = epMPS;
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

  if( num == 0 )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x26>
  {
    epMPS = 0; // MPS has to be 64 for endpoint 0
 800291a:	2300      	movs	r3, #0
 800291c:	807b      	strh	r3, [r7, #2]
  }

  USB_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (num)) << 16);
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x94>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	4611      	mov	r1, r2
 8002928:	2201      	movs	r2, #1
 800292a:	408a      	lsls	r2, r1
 800292c:	0412      	lsls	r2, r2, #16
 800292e:	4611      	mov	r1, r2
 8002930:	4a16      	ldr	r2, [pc, #88]	; (800298c <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x94>)
 8002932:	430b      	orrs	r3, r1
 8002934:	61d3      	str	r3, [r2, #28]

  if( !(outep->DOEPCTL & USB_OTG_DOEPCTL_USBAEP) )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d011      	beq.n	8002974 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x7c>
  {
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                       | (epType << 18 )
 800295e:	7879      	ldrb	r1, [r7, #1]
 8002960:	0489      	lsls	r1, r1, #18
 8002962:	430b      	orrs	r3, r1
    outep->DOEPCTL |= (  (epMPS & USB_OTG_DOEPCTL_MPSIZ )
 8002964:	ea42 0103 	orr.w	r1, r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x98>)
 8002970:	430b      	orrs	r3, r1
 8002972:	6013      	str	r3, [r2, #0]
                       | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)
                       | (USB_OTG_DOEPCTL_USBAEP));
  }

  if( num > 0 )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth+0x8a>
  {
    receive();
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f83d 	bl	80029fc <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
  }
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	50000800 	.word	0x50000800
 8002990:	10008000 	.word	0x10008000

08002994 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>:
  return( len );
}

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::readFromFifo( WORD len )
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
  WORD cnt = (len + 3) / 4;
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	3303      	adds	r3, #3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da00      	bge.n	80029aa <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x16>
 80029a8:	3303      	adds	r3, #3
 80029aa:	109b      	asrs	r3, r3, #2
 80029ac:	813b      	strh	r3, [r7, #8]

  DWORD *dest = (DWORD *)&rxBuf.data[0];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]

  rxBuf.size = len;
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  rxBuf.flag = true;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

  for( WORD  i = 0; i < cnt; i++, dest++ )
 80029c6:	2300      	movs	r3, #0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	e00b      	b.n	80029e4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x50>
  {
    *dest = *fifo;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]
  for( WORD  i = 0; i < cnt; i++, dest++ )
 80029d8:	897b      	ldrh	r3, [r7, #10]
 80029da:	3301      	adds	r3, #1
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3304      	adds	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	897a      	ldrh	r2, [r7, #10]
 80029e6:	893b      	ldrh	r3, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3ef      	bcc.n	80029cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt+0x38>
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::receive( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  WORD mps = rxBuf.maxpacket;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002a0a:	81fb      	strh	r3, [r7, #14]
  WORD len = MIN( rxBuf.size, rxBuf.maxpacket );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f002 fefc 	bl	8005818 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>
 8002a20:	4603      	mov	r3, r0
 8002a22:	81bb      	strh	r3, [r7, #12]

  if( len == 0 )
 8002a24:	89bb      	ldrh	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0x36>
  {
    receiveZLP();
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f83c 	bl	8002aa8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) );

    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
                          | USB_OTG_DOEPCTL_EPENA );  // Enable EP
  }
}
 8002a30:	e033      	b.n	8002a9a <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0x9e>
   BYTE pktcnt = (rxBuf.size + mps -1)/ mps;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a38:	461a      	mov	r2, r3
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a46:	72fb      	strb	r3, [r7, #11]
   outep->DOEPTSIZ  &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a56:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8002a5a:	611a      	str	r2, [r3, #16]
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a62:	6919      	ldr	r1, [r3, #16]
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	04db      	lsls	r3, r3, #19
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv+0xa8>)
 8002a6c:	4013      	ands	r3, r2
                          |(USB_OTG_DOEPTSIZ_XFRSIZ & (mps * pktcnt)) );
 8002a6e:	89fa      	ldrh	r2, [r7, #14]
 8002a70:	7af8      	ldrb	r0, [r7, #11]
 8002a72:	fb00 f202 	mul.w	r2, r0, r2
 8002a76:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002a7a:	431a      	orrs	r2, r3
    outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a82:	430a      	orrs	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
    outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a94:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002a98:	601a      	str	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	1ff80000 	.word	0x1ff80000

08002aa8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::receiveZLP()
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  outep->DOEPTSIZ &= ~(   USB_OTG_DOEPTSIZ_PKTCNT
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abe:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8002ac2:	611a      	str	r2, [r3, #16]
                        | USB_OTG_DOEPTSIZ_XFRSIZ );

  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aca:	691b      	ldr	r3, [r3, #16]
                      |  (USB_OTG_DOEPTSIZ_XFRSIZ & rxBuf.maxpacket) );
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
  outep->DOEPTSIZ |=  (  (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19))
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ada:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002ade:	611a      	str	r2, [r3, #16]

  outep->DOEPCTL  |=  (   USB_OTG_DOEPCTL_CNAK
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aee:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002af2:	601a      	str	r2, [r3, #0]
                        | USB_OTG_DOEPCTL_EPENA );  // Enable EP
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::EndpointOUT::getInterrupt( void )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return( outep->DOEPINT & USB_DEVICE->DOEPMSK );
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv+0x24>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4013      	ands	r3, r2
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	50000800 	.word	0x50000800

08002b28 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::EndpointOUT::clrInterrupt( DWORD interruptID )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  outep->DOEPINT |= interruptID;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>:
  USB_OTG_FS->GAHBCFG |=  USB_OTG_GAHBCFG_GINT;      // enable USB interrupts
}

//-------------------------------------------------------------------
inline void USBdevice_Mcu::isr(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  // Current mode of operation = Host mode ?
  if( USB_OTG_FS->GINTSTS & USB_OTG_GINTSTS_CMOD )
 8002b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 82a7 	bne.w	80030c4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x570>
  {
    return;
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_MMIS ) )
 8002b76:	2102      	movs	r1, #2
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 facf 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x42>
  {
    // incorrect mode
    clrInterrupt( USB_OTG_GINTSTS_MMIS);
 8002b8e:	2102      	movs	r1, #2
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fadd 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OEPINT ) )
 8002b96:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fabe 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8092 	beq.w	8002cd6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x182>
  {
    DWORD interruptBits = getOutInterrupt();
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa9e 	bl	80030f4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv>
 8002bb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    DWORD interruptType = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
    BYTE  epNum         = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    while ( interruptBits )
 8002bc4:	e083      	b.n	8002cce <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x17a>
    {
      if( interruptBits & 0x1 )
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d076      	beq.n	8002cbe <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x16a>
      {
        interruptType = epOUT[epNum].getInterrupt();
 8002bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bd4:	228c      	movs	r2, #140	; 0x8c
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff8c 	bl	8002b00 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12getInterruptEv>
 8002be8:	61f8      	str	r0, [r7, #28]

        if( interruptType & USB_OTG_DOEPINT_XFRC )
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0xe2>
        {
          // OUT-package received, non-control
          epOUT[epNum].receive();
 8002bf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bf8:	228c      	movs	r2, #140	; 0x8c
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fef8 	bl	80029fc <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
          eventHandler( epNum, false );
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4798      	blx	r3
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_XFRC );
 8002c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c20:	228c      	movs	r2, #140	; 0x8c
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff79 	bl	8002b28 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DOEPINT_STUP )
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02c      	beq.n	8002c9a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x146>
        {
          // Setup-package received
          epOUT[epNum].receive();
 8002c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c44:	228c      	movs	r2, #140	; 0x8c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fed2 	bl	80029fc <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT7receiveEv>
          eventHandler( epNum, true );
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002c64:	2201      	movs	r2, #1
 8002c66:	4798      	blx	r3
          epIN[epNum].transmit(true);
 8002c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c6c:	228c      	movs	r2, #140	; 0x8c
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	3350      	adds	r3, #80	; 0x50
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fd88 	bl	8002790 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>
          // epIN[0].writeToFifo();
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_STUP );
 8002c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c84:	228c      	movs	r2, #140	; 0x8c
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	2108      	movs	r1, #8
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff47 	bl	8002b28 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DOEPINT_OTEPDIS )
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x16a>
        {
          epOUT[epNum].clrInterrupt( USB_OTG_DOEPINT_OTEPDIS);
 8002ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ca8:	228c      	movs	r2, #140	; 0x8c
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff35 	bl	8002b28 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8002cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      interruptBits >>= 1;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while ( interruptBits )
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f af78 	bne.w	8002bc6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x72>
    }
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_IEPINT ) )
 8002cd6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa1e 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80d7 	beq.w	8002ea0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x34c>
  {
    DWORD interruptBits = getInInterrupt();
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9ec 	bl	80030d0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24
    DWORD interruptType = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
    BYTE  epNum         = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    while( interruptBits )
 8002d04:	e0c8      	b.n	8002e98 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x344>
    {
      if( interruptBits & 0x1 )
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80bb 	beq.w	8002e88 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x334>
      {
        interruptType = epIN[epNum].getInterrupt( );
 8002d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d16:	228c      	movs	r2, #140	; 0x8c
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	3350      	adds	r3, #80	; 0x50
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fdb4 	bl	8002890 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12getInterruptEv>
 8002d28:	61b8      	str	r0, [r7, #24]

        if( interruptType & USB_OTG_DIEPINT_XFRC )
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d03e      	beq.n	8002db2 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x25e>
        {
          // USB_DEVICE->DIEPEMPMSK = ~(0x1 << epNum);
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 8002d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d38:	228c      	movs	r2, #140	; 0x8c
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	3350      	adds	r3, #80	; 0x50
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fdc0 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
          epOUT[epNum].receiveZLP();
 8002d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d50:	228c      	movs	r2, #140	; 0x8c
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fea2 	bl	8002aa8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT10receiveZLPEv>
          eventHandler( epNum | 0x80, true );
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d74:	b2d1      	uxtb	r1, r2
 8002d76:	2201      	movs	r2, #1
 8002d78:	4798      	blx	r3

          // todo interrupt handling not correct for interrupt or ctrl transfers
          // workaround:
          if( epNum > 0 )
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x246>
            epIN[epNum].transmit( false );
 8002d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d86:	228c      	movs	r2, #140	; 0x8c
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	3350      	adds	r3, #80	; 0x50
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fcfb 	bl	8002790 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN8transmitEb>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_XFRC );
 8002d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d9e:	228c      	movs	r2, #140	; 0x8c
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	3350      	adds	r3, #80	; 0x50
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fd8d 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_TOC )
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00b      	beq.n	8002dd4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x280>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TOC );
 8002dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc0:	228c      	movs	r2, #140	; 0x8c
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	3350      	adds	r3, #80	; 0x50
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	2108      	movs	r1, #8
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd7c 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_ITTXFE )
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2b8>
        {
          epIN[epNum].writeToFifo();
 8002dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002de2:	228c      	movs	r2, #140	; 0x8c
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fc76 	bl	80026e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_ITTXFE );
 8002df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df8:	228c      	movs	r2, #140	; 0x8c
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	3350      	adds	r3, #80	; 0x50
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	2110      	movs	r1, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fd60 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_INEPNE )
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2da>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_INEPNE );
 8002e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e1a:	228c      	movs	r2, #140	; 0x8c
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	3350      	adds	r3, #80	; 0x50
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fd4f 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_EPDISD )
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x2fc>
        {
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_EPDISD );
 8002e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e3c:	228c      	movs	r2, #140	; 0x8c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	3350      	adds	r3, #80	; 0x50
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fd3e 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }

        if( interruptType & USB_OTG_DIEPINT_TXFE )
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x334>
        {
          epIN[epNum].writeToFifo();
 8002e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e5e:	228c      	movs	r2, #140	; 0x8c
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	3350      	adds	r3, #80	; 0x50
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fc38 	bl	80026e0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN11writeToFifoEv>
          epIN[epNum].clrInterrupt( USB_OTG_DIEPINT_TXFE );
 8002e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e74:	228c      	movs	r2, #140	; 0x8c
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	3350      	adds	r3, #80	; 0x50
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fd22 	bl	80028cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN12clrInterruptEm>
        }
      }

      // handle next endpoint
      epNum++;
 8002e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      interruptBits >>= 1;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
    while( interruptBits )
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f47f af33 	bne.w	8002d06 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x1b2>
    }
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_WKUINT ) )
 8002ea0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f939 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x37c>
  {
    USB_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eba:	4b84      	ldr	r3, [pc, #528]	; (80030cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a83      	ldr	r2, [pc, #524]	; (80030cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
    clrInterrupt( USB_OTG_GINTSTS_WKUINT );
 8002ec6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f940 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBSUSP ) )
 8002ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f921 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x3a0>
  {
    clrInterrupt( USB_OTG_GINTSTS_USBSUSP );
 8002eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f92e 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_USBRST ) )
 8002ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f90f 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x3d0>
  {
    reset();
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
    clrInterrupt( USB_OTG_GINTSTS_USBRST );
 8002f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f916 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_ENUMDNE ) )
 8002f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8f7 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d029      	beq.n	8002f92 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x43e>
  {
    USB_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a62      	ldr	r2, [pc, #392]	; (80030cc <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x578>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6053      	str	r3, [r2, #4]

    USB_OTG_FS->GUSBCFG &= ~(  USB_OTG_GUSBCFG_TRDT );
 8002f4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f54:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002f58:	60d3      	str	r3, [r2, #12]
    USB_OTG_FS->GUSBCFG |=  (  USB_OTG_GUSBCFG_TRDT_0
 8002f5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f64:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002f68:	60d3      	str	r3, [r2, #12]
                             | USB_OTG_GUSBCFG_TRDT_2 );

    epOUT[0].config( MAX_EP0_SIZE );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fcbf 	bl	80028f8 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT6configEth>
    epIN [0].config( MAX_EP0_SIZE );
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3350      	adds	r3, #80	; 0x50
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fb60 	bl	8002648 <_ZN9EmbSysLib2Hw13USBdevice_Mcu10EndpointIN6configEth>

    clrInterrupt( USB_OTG_GINTSTS_ENUMDNE );
 8002f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8df 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_RXFLVL ) )
 8002f92:	2110      	movs	r1, #16
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8c1 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04d      	beq.n	8003046 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4f2>
  {
    USB_OTG_FS->GINTMSK &= ~(USB_OTG_GINTMSK_RXFLVLM);
 8002faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	6193      	str	r3, [r2, #24]

    DWORD temp = USB_OTG_FS->GRXSTSP;
 8002fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	617b      	str	r3, [r7, #20]

    BYTE epnum = temp & USB_OTG_GRXSTSP_EPNUM;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	74fb      	strb	r3, [r7, #19]

    if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  2 ) // Packet status = OUT data packet received
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	0c5b      	lsrs	r3, r3, #17
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d118      	bne.n	800300a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4b6>
    {
      if( temp & USB_OTG_GRXSTSP_BCNT )
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d024      	beq.n	800302e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
      {
        epOUT[epnum].readFromFifo( (temp & USB_OTG_GRXSTSP_BCNT) >> 4 );
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	228c      	movs	r2, #140	; 0x8c
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	441a      	add	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7ff fcc6 	bl	8002994 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>
 8003008:	e011      	b.n	800302e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
      }
    }
    else if( ((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  6 ) // Packet status = Setup data packet received
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	0c5b      	lsrs	r3, r3, #17
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	2b06      	cmp	r3, #6
 8003014:	d10b      	bne.n	800302e <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x4da>
    {
      epOUT[epnum].readFromFifo( 8 );
 8003016:	7cfb      	ldrb	r3, [r7, #19]
 8003018:	228c      	movs	r2, #140	; 0x8c
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	2108      	movs	r1, #8
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fcb3 	bl	8002994 <_ZN9EmbSysLib2Hw13USBdevice_Mcu11EndpointOUT12readFromFifoEt>
    }
    USB_OTG_FS->GINTMSK |= (USB_OTG_GINTMSK_RXFLVLM);
 800302e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	6193      	str	r3, [r2, #24]
    clrInterrupt( USB_OTG_GINTSTS_RXFLVL );
 800303e:	2110      	movs	r1, #16
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f885 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SOF ) )
 8003046:	2108      	movs	r1, #8
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f867 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x512>
  {
    clrInterrupt( USB_OTG_GINTSTS_SOF );
 800305e:	2108      	movs	r1, #8
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f875 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_SRQINT ) )
 8003066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f856 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x536>
  {
    clrInterrupt( USB_OTG_GINTSTS_SRQINT );
 8003080:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f863 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
  }

  //-----------------------------------------------------------------
  if( isInterruptPending( USB_OTG_GINTSTS_OTGINT ) )
 800308a:	2104      	movs	r1, #4
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f845 	bl	800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x572>
  {
    DWORD temp = USB_OTG_FS->GOTGINT;
 80030a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
    USB_OTG_FS->GOTGINT |= temp;
 80030aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]

    clrInterrupt( USB_OTG_GINTSTS_OTGINT );
 80030ba:	2104      	movs	r1, #4
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f847 	bl	8003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>
 80030c2:	e000      	b.n	80030c6 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv+0x572>
    return;
 80030c4:	bf00      	nop
  }
}
 80030c6:	3730      	adds	r7, #48	; 0x30
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	50000800 	.word	0x50000800

080030d0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv>:
  return true;
}

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::getInInterrupt( void )
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return(    USB_DEVICE->DAINT
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv+0x20>)
 80030da:	699a      	ldr	r2, [r3, #24]
           & USB_DEVICE->DAINTMSK
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <_ZN9EmbSysLib2Hw13USBdevice_Mcu14getInInterruptEv+0x20>)
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	4013      	ands	r3, r2
           & 0xFFFF               );
 80030e2:	b29b      	uxth	r3, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	50000800 	.word	0x50000800

080030f4 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv>:

//-------------------------------------------------------------------
DWORD USBdevice_Mcu::getOutInterrupt( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return( (   USB_DEVICE->DAINT
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv+0x24>)
 80030fe:	699a      	ldr	r2, [r3, #24]
            & USB_DEVICE->DAINTMSK
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <_ZN9EmbSysLib2Hw13USBdevice_Mcu15getOutInterruptEv+0x24>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4013      	ands	r3, r2
            & 0xFFFF0000           ) >> 16);
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b29b      	uxth	r3, r3
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	50000800 	.word	0x50000800

0800311c <_ZN9EmbSysLib2Hw13USBdevice_Mcu18isInterruptPendingEm>:

//-------------------------------------------------------------------
BYTE USBdevice_Mcu::isInterruptPending( DWORD interuptID )
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  return( (   USB_OTG_FS->GINTSTS
 8003126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800312a:	695a      	ldr	r2, [r3, #20]
            & USB_OTG_FS->GINTMSK
 800312c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	401a      	ands	r2, r3
            & interuptID          ) == interuptID );
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4013      	ands	r3, r2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_ZN9EmbSysLib2Hw13USBdevice_Mcu12clrInterruptEm>:

//-------------------------------------------------------------------
void USBdevice_Mcu::clrInterrupt( DWORD interuptID )
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  USB_OTG_FS->GINTSTS |= interuptID;
 800315a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	614b      	str	r3, [r1, #20]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <OTG_FS_IRQHandler>:
//*******************************************************************
//-------------------------------------------------------------------
extern "C"
{
  void OTG_FS_IRQHandler(void)
  {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
    USBdevice_Mcu::usbPtr->isr();
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <OTG_FS_IRQHandler+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fce7 	bl	8002b54 <_ZN9EmbSysLib2Hw13USBdevice_Mcu3isrEv>
  }
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200001dc 	.word	0x200001dc

08003190 <_ZN9EmbSysLib3Std6ReportC1Et>:
Report::Handler *Report::msgHandler   = 0;
WORD             Report::globalCode   = 0;
WORD             Report::globalModule = 0;

//-------------------------------------------------------------------
Report::Report( WORD moduleId_In )
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
{
  moduleId  = moduleId_In;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	805a      	strh	r2, [r3, #2]
  localCode = 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	801a      	strh	r2, [r3, #0]
}
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <_ZN9EmbSysLib3Std6Report5storeEt>:

//-------------------------------------------------------------------
void Report::store( const WORD code )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  if( localCode == 0 )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <_ZN9EmbSysLib3Std6Report5storeEt+0x1a>
  {
    localCode = code;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	801a      	strh	r2, [r3, #0]
  }
  if( globalCode == 0 )
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <_ZN9EmbSysLib3Std6Report5storeEt+0x30>
  {
    globalCode = code;
 80031da:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <_ZN9EmbSysLib3Std6Report5storeEt+0x3c>)
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	8013      	strh	r3, [r2, #0]
    globalModule = moduleId;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	885a      	ldrh	r2, [r3, #2]
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <_ZN9EmbSysLib3Std6Report5storeEt+0x40>)
 80031e6:	801a      	strh	r2, [r3, #0]
  }
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	200001e4 	.word	0x200001e4
 80031f8:	200001e6 	.word	0x200001e6

080031fc <_ZN9EmbSysLib3Std6Report5errorEt>:

//-------------------------------------------------------------------
void Report::error( const WORD code )
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  store( code );
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ffd3 	bl	80031b8 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <_ZN9EmbSysLib3Std6Report5errorEt+0x36>
  {
    msgHandler->onReport( code, moduleId, true );
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <_ZN9EmbSysLib3Std6Report5errorEt+0x44>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681c      	ldr	r4, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	885a      	ldrh	r2, [r3, #2]
 800322a:	8879      	ldrh	r1, [r7, #2]
 800322c:	2301      	movs	r3, #1
 800322e:	47a0      	blx	r4
  }
  else
  {
    Hw::System::reset();
  }
}
 8003230:	e001      	b.n	8003236 <_ZN9EmbSysLib3Std6Report5errorEt+0x3a>
    Hw::System::reset();
 8003232:	f7fd fa81 	bl	8000738 <_ZN9EmbSysLib2Hw6System5resetEv>
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	200001e0 	.word	0x200001e0

08003244 <_ZN9EmbSysLib3Std6Report5alertEt>:

//-------------------------------------------------------------------
void Report::alert( const WORD code )
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  store( code );
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ffaf 	bl	80031b8 <_ZN9EmbSysLib3Std6Report5storeEt>
  if( msgHandler )
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <_ZN9EmbSysLib3Std6Report5alertEt+0x34>
  {
    msgHandler->onReport( code, moduleId, false );
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <_ZN9EmbSysLib3Std6Report5alertEt+0x3c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681c      	ldr	r4, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	885a      	ldrh	r2, [r3, #2]
 8003272:	8879      	ldrh	r1, [r7, #2]
 8003274:	2300      	movs	r3, #0
 8003276:	47a0      	blx	r4
  }
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	200001e0 	.word	0x200001e0

08003284 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>:
//
// Report::Handler
//
//*******************************************************************
//-------------------------------------------------------------------
Report::Handler::Handler()
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x24>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
{
  Report::msgHandler = this;
 8003292:	4a06      	ldr	r2, [pc, #24]	; (80032ac <_ZN9EmbSysLib3Std6Report7HandlerC1Ev+0x28>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	080093f4 	.word	0x080093f4
 80032ac:	200001e0 	.word	0x200001e0

080032b0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>:

//-------------------------------------------------------------------
Report::Handler::~Handler()
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x2c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
{
  if( this == Report::msgHandler )
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d102      	bne.n	80032ce <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x1e>
  {
    Report::msgHandler = 0;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev+0x30>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
  }
}
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	080093f4 	.word	0x080093f4
 80032e0:	200001e0 	.word	0x200001e0

080032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>:
  this->data     = data;
  this->selected = data;  // default is first character
}

//-------------------------------------------------------------------
Font::Font( const BYTE *ptr )
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
{
  this->header = (Font::Header*)ptr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	601a      	str	r2, [r3, #0]
  this->data   = (BYTE*)(ptr + sizeof(Font::Header));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	1d5a      	adds	r2, r3, #5
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	605a      	str	r2, [r3, #4]
}
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>:

//-------------------------------------------------------------------
 BYTE Font::getCharWidth( void ) const
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(header->charWidth) );
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	78db      	ldrb	r3, [r3, #3]
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>:

//-------------------------------------------------------------------
BYTE Font::getCharHeight( void ) const
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return( GET_BYTE_PROGMEM(header->charHeight) );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	791b      	ldrb	r3, [r3, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <_ZN9EmbSysLib2Hw4Font7setCharEh>:

//-------------------------------------------------------------------
void Font::setChar( BYTE c )
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
  BYTE id = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]

  if(         GET_BYTE_PROGMEM(header->firstId) <= c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	429a      	cmp	r2, r3
 8003358:	d30b      	bcc.n	8003372 <_ZN9EmbSysLib2Hw4Font7setCharEh+0x34>
      && c <= GET_BYTE_PROGMEM(header->lastId)        ) // is char c defined?
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	429a      	cmp	r2, r3
 8003364:	d805      	bhi.n	8003372 <_ZN9EmbSysLib2Hw4Font7setCharEh+0x34>
  {
    id = c - GET_BYTE_PROGMEM(header->firstId);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	73fb      	strb	r3, [r7, #15]
  }
  selected = data + (WORD)id * GET_BYTE_PROGMEM(header->bytePerChar);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6809      	ldr	r1, [r1, #0]
 800337c:	7889      	ldrb	r1, [r1, #2]
 800337e:	fb01 f202 	mul.w	r2, r1, r2
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_ZN9EmbSysLib2Hw4Font8getPixelEhh>:

//-------------------------------------------------------------------
BYTE Font::getPixel( BYTE x, BYTE y )
{                                                 // calc pixel number
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
 80033a0:	4613      	mov	r3, r2
 80033a2:	70bb      	strb	r3, [r7, #2]
  WORD pixel  = ( (WORD)x + (WORD)y * getCharWidth() );
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	b29c      	uxth	r4, r3
 80033a8:	78bb      	ldrb	r3, [r7, #2]
 80033aa:	b29d      	uxth	r5, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffac 	bl	800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	fb15 f303 	smulbb	r3, r5, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4423      	add	r3, r4
 80033be:	81fb      	strh	r3, [r7, #14]

                                                // get pixel value
  BYTE ret = GET_BYTE_PROGMEM_PTR(selected+(pixel>>3)) & ( 0x80>>(pixel&0x07) );
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	89fa      	ldrh	r2, [r7, #14]
 80033c6:	08d2      	lsrs	r2, r2, #3
 80033c8:	b292      	uxth	r2, r2
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b25a      	sxtb	r2, r3
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	2180      	movs	r1, #128	; 0x80
 80033d8:	fa41 f303 	asr.w	r3, r1, r3
 80033dc:	b25b      	sxtb	r3, r3
 80033de:	4013      	ands	r3, r2
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	737b      	strb	r3, [r7, #13]
  pixel++;
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	3301      	adds	r3, #1
 80033e8:	81fb      	strh	r3, [r7, #14]
  return( ret ? true : false );
 80033ea:	7b7b      	ldrb	r3, [r7, #13]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bdb0      	pop	{r4, r5, r7, pc}

080033fe <_ZN9EmbSysLib2Hw6BitmapC1EPKh>:
  this->header = header;
  this->data   = data;
}

//-------------------------------------------------------------------
Bitmap::Bitmap( const BYTE *ptr )
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
{
  this->header = (Bitmap::Header*)ptr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	601a      	str	r2, [r3, #0]
  this->data   = (WORD*)(ptr + sizeof(Bitmap::Header));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	1d9a      	adds	r2, r3, #6
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	605a      	str	r2, [r3, #4]
}
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>:

//-------------------------------------------------------------------
WORD Bitmap::getWidth( void ) const
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return( header->width );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	881b      	ldrh	r3, [r3, #0]
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_ZNK9EmbSysLib2Hw6Bitmap9getHeightEv>:

//-------------------------------------------------------------------
WORD Bitmap::getHeight( void ) const
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  return( header->height );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	885b      	ldrh	r3, [r3, #2]
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <_ZN9EmbSysLib2Hw6Bitmap8getPixelEtt>:

//-------------------------------------------------------------------
WORD Bitmap::getPixel( WORD x, WORD y )
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
 8003464:	4613      	mov	r3, r2
 8003466:	803b      	strh	r3, [r7, #0]
  DWORD pixel  = (DWORD)x + (DWORD)y * getWidth();
 8003468:	887c      	ldrh	r4, [r7, #2]
 800346a:	883d      	ldrh	r5, [r7, #0]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ffd9 	bl	8003424 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>
 8003472:	4603      	mov	r3, r0
 8003474:	fb05 f303 	mul.w	r3, r5, r3
 8003478:	4423      	add	r3, r4
 800347a:	60fb      	str	r3, [r7, #12]

  return( data[pixel] );
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bdb0      	pop	{r4, r5, r7, pc}

08003490 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>:
//
// DisplayChar
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayChar::DisplayChar( WORD moduleId,
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	807b      	strh	r3, [r7, #2]
 80034a2:	460b      	mov	r3, r1
 80034a4:	707b      	strb	r3, [r7, #1]
 80034a6:	4613      	mov	r3, r2
 80034a8:	703b      	strb	r3, [r7, #0]
	                        BYTE numberOfLines,
                          BYTE numberOfColumns )
: report( moduleId ) 
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh+0x48>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3308      	adds	r3, #8
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fe69 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->numberOfLines   = numberOfLines;
 80034be:	787b      	ldrb	r3, [r7, #1]
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	809a      	strh	r2, [r3, #4]
  this->numberOfColumns = numberOfColumns;
 80034c6:	783b      	ldrb	r3, [r7, #0]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	80da      	strh	r2, [r3, #6]
}
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	08009208 	.word	0x08009208

080034dc <_ZN9EmbSysLib2Hw11DisplayChar16getNumberOfLinesEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfLines( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return( numberOfLines );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	889b      	ldrh	r3, [r3, #4]
 80034e8:	b2db      	uxtb	r3, r3
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_ZN9EmbSysLib2Hw11DisplayChar18getNumberOfColumnsEv>:

//-------------------------------------------------------------------
inline BYTE DisplayChar::getNumberOfColumns( void )
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  return( numberOfColumns );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	88db      	ldrh	r3, [r3, #6]
 8003502:	b2db      	uxtb	r3, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc>:

//-------------------------------------------------------------------
void DisplayChar::putString( const char *str )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  while( *str != 0 )
 800351a:	e00b      	b.n	8003534 <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0x24>
  {
    putChar( *str );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	4611      	mov	r1, r2
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
    str++;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	603b      	str	r3, [r7, #0]
  while( *str != 0 )
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ef      	bne.n	800351c <_ZN9EmbSysLib2Hw11DisplayChar9putStringEPKc+0xc>
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh>:
//
// DisplayGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
DisplayGraphic::DisplayGraphic( WORD moduleId,
 8003548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	4608      	mov	r0, r1
 8003554:	4611      	mov	r1, r2
 8003556:	461a      	mov	r2, r3
 8003558:	4603      	mov	r3, r0
 800355a:	817b      	strh	r3, [r7, #10]
 800355c:	460b      	mov	r3, r1
 800355e:	813b      	strh	r3, [r7, #8]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
: DisplayChar( moduleId,
               height/((WORD)zoom*font.getCharHeight()),
               width /((WORD)zoom*font.getCharWidth() ) )
, font  ( font )
, zoom  ( zoom )
, report( moduleId )
 8003564:	68fe      	ldr	r6, [r7, #12]
               height/((WORD)zoom*font.getCharHeight()),
 8003566:	88fc      	ldrh	r4, [r7, #6]
 8003568:	f897 5034 	ldrb.w	r5, [r7, #52]	; 0x34
 800356c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003570:	f7ff fed8 	bl	8003324 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003574:	4603      	mov	r3, r0
 8003576:	fb05 f303 	mul.w	r3, r5, r3
 800357a:	fb94 f3f3 	sdiv	r3, r4, r3
, report( moduleId )
 800357e:	fa5f f883 	uxtb.w	r8, r3
               width /((WORD)zoom*font.getCharWidth() ) )
 8003582:	893c      	ldrh	r4, [r7, #8]
 8003584:	f897 5034 	ldrb.w	r5, [r7, #52]	; 0x34
 8003588:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800358c:	f7ff febd 	bl	800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 8003590:	4603      	mov	r3, r0
 8003592:	fb05 f303 	mul.w	r3, r5, r3
 8003596:	fb94 f3f3 	sdiv	r3, r4, r3
, report( moduleId )
 800359a:	b2db      	uxtb	r3, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	4642      	mov	r2, r8
 80035a0:	4630      	mov	r0, r6
 80035a2:	f7ff ff75 	bl	8003490 <_ZN9EmbSysLib2Hw11DisplayCharC1Ethh>
 80035a6:	4a21      	ldr	r2, [pc, #132]	; (800362c <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh+0xe4>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]
, font  ( font )
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3314      	adds	r3, #20
 80035b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
, zoom  ( zoom )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80035c0:	f883 2020 	strb.w	r2, [r3, #32]
, report( moduleId )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3328      	adds	r3, #40	; 0x28
 80035c8:	897a      	ldrh	r2, [r7, #10]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fddf 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  Hsize = width;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	893a      	ldrh	r2, [r7, #8]
 80035d6:	821a      	strh	r2, [r3, #16]
  Vsize = height;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	825a      	strh	r2, [r3, #18]

  BackColor  = RGB2color(  0,  0,  0);  // Black
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fc ffc6 	bl	8000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	845a      	strh	r2, [r3, #34]	; 0x22
  PaintColor = RGB2color(128,128,128);  // Gray
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	2080      	movs	r0, #128	; 0x80
 80035f6:	f7fc ffbd 	bl	8000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
  TextColor  = RGB2color(255,255,255);  // White
 8003602:	22ff      	movs	r2, #255	; 0xff
 8003604:	21ff      	movs	r1, #255	; 0xff
 8003606:	20ff      	movs	r0, #255	; 0xff
 8003608:	f7fc ffb4 	bl	8000574 <_ZN9EmbSysLib2Hw14DisplayGraphic9RGB2colorEhhh>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	84da      	strh	r2, [r3, #38]	; 0x26

  xPos = 0;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	819a      	strh	r2, [r3, #12]
  yPos = 0;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	81da      	strh	r2, [r3, #14]
}
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362c:	080091ac 	.word	0x080091ac

08003630 <_ZN9EmbSysLib2Hw14DisplayGraphic7setFontENS0_4FontEh>:

//-------------------------------------------------------------------
void DisplayGraphic::setFont( Font font,
                              BYTE zoom )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	4638      	mov	r0, r7
 800363a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  this->font = font;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3314      	adds	r3, #20
 8003642:	463a      	mov	r2, r7
 8003644:	ca07      	ldmia	r2, {r0, r1, r2}
 8003646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  this->zoom = zoom;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	7e3a      	ldrb	r2, [r7, #24]
 800364e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <_ZN9EmbSysLib2Hw14DisplayGraphic7setZoomEh>:

//-------------------------------------------------------------------
void DisplayGraphic::setZoom( BYTE zoom )
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
  this->zoom = zoom;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_ZN9EmbSysLib2Hw14DisplayGraphic12setBackColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setBackColor( WORD color )
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	807b      	strh	r3, [r7, #2]
  BackColor = color;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_ZN9EmbSysLib2Hw14DisplayGraphic13setPaintColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setPaintColor( WORD color )
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  PaintColor = color;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_ZN9EmbSysLib2Hw14DisplayGraphic12setTextColorEt>:

//---------------------------------------------------------------
void DisplayGraphic::setTextColor( WORD color )
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	807b      	strh	r3, [r7, #2]
  TextColor = color;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	887a      	ldrh	r2, [r7, #2]
 80036ca:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_ZN9EmbSysLib2Hw14DisplayGraphic12gotoPixelPosEtt>:

//---------------------------------------------------------------
void DisplayGraphic::gotoPixelPos( WORD x, WORD y )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
 80036e4:	4613      	mov	r3, r2
 80036e6:	803b      	strh	r3, [r7, #0]
  xPos = x;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	819a      	strh	r2, [r3, #12]
  yPos = y;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	883a      	ldrh	r2, [r7, #0]
 80036f2:	81da      	strh	r2, [r3, #14]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_ZN9EmbSysLib2Hw14DisplayGraphic11gotoTextPosEhh>:

//---------------------------------------------------------------
void DisplayGraphic::gotoTextPos( BYTE line, BYTE colum )
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
 800370c:	4613      	mov	r3, r2
 800370e:	70bb      	strb	r3, [r7, #2]
  xPos = (WORD)colum * zoom * font.getCharWidth();
 8003710:	78bb      	ldrb	r3, [r7, #2]
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371a:	b29b      	uxth	r3, r3
 800371c:	fb12 f303 	smulbb	r3, r2, r3
 8003720:	b29c      	uxth	r4, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3314      	adds	r3, #20
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fdef 	bl	800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 800372c:	4603      	mov	r3, r0
 800372e:	b29b      	uxth	r3, r3
 8003730:	fb14 f303 	smulbb	r3, r4, r3
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	819a      	strh	r2, [r3, #12]
  yPos = (WORD)line  * zoom * font.getCharHeight();
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	b29b      	uxth	r3, r3
 8003746:	fb12 f303 	smulbb	r3, r2, r3
 800374a:	b29c      	uxth	r4, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3314      	adds	r3, #20
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fde7 	bl	8003324 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003756:	4603      	mov	r3, r0
 8003758:	b29b      	uxth	r3, r3
 800375a:	fb14 f303 	smulbb	r3, r4, r3
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	81da      	strh	r2, [r3, #14]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}

0800376c <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc>:

//---------------------------------------------------------------
void DisplayGraphic::putChar( char ch )
{
 800376c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003770:	b087      	sub	sp, #28
 8003772:	af02      	add	r7, sp, #8
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
  font.setChar( ch );                                       // select char
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3314      	adds	r3, #20
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fddb 	bl	800333e <_ZN9EmbSysLib2Hw4Font7setCharEh>

  setArea( xPos,                                            // set painting area
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3348      	adds	r3, #72	; 0x48
 800378e:	681c      	ldr	r4, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	899e      	ldrh	r6, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 800e 	ldrh.w	r8, [r3, #14]
           yPos,
           zoom*font.getCharWidth(),
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a0:	b29d      	uxth	r5, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3314      	adds	r3, #20
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fdaf 	bl	800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 80037ac:	4603      	mov	r3, r0
 80037ae:	b29b      	uxth	r3, r3
  setArea( xPos,                                            // set painting area
 80037b0:	fb15 f303 	smulbb	r3, r5, r3
 80037b4:	fa1f f983 	uxth.w	r9, r3
           zoom*font.getCharHeight() );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037be:	b29d      	uxth	r5, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3314      	adds	r3, #20
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fdad 	bl	8003324 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 80037ca:	4603      	mov	r3, r0
 80037cc:	b29b      	uxth	r3, r3
  setArea( xPos,                                            // set painting area
 80037ce:	fb15 f303 	smulbb	r3, r5, r3
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	464b      	mov	r3, r9
 80037d8:	4642      	mov	r2, r8
 80037da:	4631      	mov	r1, r6
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	47a0      	blx	r4

  for( BYTE py = 0; py < font.getCharHeight(); py++ )       // scan vert.
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e047      	b.n	8003876 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x10a>
  {
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 80037e6:	2300      	movs	r3, #0
 80037e8:	73bb      	strb	r3, [r7, #14]
 80037ea:	e03b      	b.n	8003864 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xf8>
     {
        for( BYTE px = 0 ; px < font.getCharWidth(); px++ ) // scan hor.
 80037ec:	2300      	movs	r3, #0
 80037ee:	737b      	strb	r3, [r7, #13]
 80037f0:	e026      	b.n	8003840 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xd4>
        {
          BYTE pixel = font.getPixel( px, py );             // what color?
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3314      	adds	r3, #20
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	7b79      	ldrb	r1, [r7, #13]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fdca 	bl	8003394 <_ZN9EmbSysLib2Hw4Font8getPixelEhh>
 8003800:	4603      	mov	r3, r0
 8003802:	72fb      	strb	r3, [r7, #11]
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 8003804:	2300      	movs	r3, #0
 8003806:	733b      	strb	r3, [r7, #12]
 8003808:	e011      	b.n	800382e <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xc2>
          {
            setPixel( (pixel) ? TextColor : BackColor );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3350      	adds	r3, #80	; 0x50
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xb2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381c:	e001      	b.n	8003822 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0xb6>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4790      	blx	r2
          for( BYTE zoomX = 0; zoomX < zoom; zoomX++ )
 8003828:	7b3b      	ldrb	r3, [r7, #12]
 800382a:	3301      	adds	r3, #1
 800382c:	733b      	strb	r3, [r7, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003834:	7b3a      	ldrb	r2, [r7, #12]
 8003836:	429a      	cmp	r2, r3
 8003838:	d3e7      	bcc.n	800380a <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x9e>
        for( BYTE px = 0 ; px < font.getCharWidth(); px++ ) // scan hor.
 800383a:	7b7b      	ldrb	r3, [r7, #13]
 800383c:	3301      	adds	r3, #1
 800383e:	737b      	strb	r3, [r7, #13]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3314      	adds	r3, #20
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fd60 	bl	800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	7b7b      	ldrb	r3, [r7, #13]
 8003850:	4293      	cmp	r3, r2
 8003852:	bf34      	ite	cc
 8003854:	2301      	movcc	r3, #1
 8003856:	2300      	movcs	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1c9      	bne.n	80037f2 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x86>
     for( BYTE zoomY = 0; zoomY < zoom; zoomY++ )
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	3301      	adds	r3, #1
 8003862:	73bb      	strb	r3, [r7, #14]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386a:	7bba      	ldrb	r2, [r7, #14]
 800386c:	429a      	cmp	r2, r3
 800386e:	d3bd      	bcc.n	80037ec <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x80>
  for( BYTE py = 0; py < font.getCharHeight(); py++ )       // scan vert.
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	3301      	adds	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3314      	adds	r3, #20
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fd52 	bl	8003324 <_ZNK9EmbSysLib2Hw4Font13getCharHeightEv>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	4293      	cmp	r3, r2
 8003888:	bf34      	ite	cc
 800388a:	2301      	movcc	r3, #1
 800388c:	2300      	movcs	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1a8      	bne.n	80037e6 <_ZN9EmbSysLib2Hw14DisplayGraphic7putCharEc+0x7a>
          }
        }
     }
  }
  xPos += (WORD)zoom*font.getCharWidth();                   // emulate cursor increment
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800389a:	461c      	mov	r4, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3314      	adds	r3, #20
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fd32 	bl	800330a <_ZNK9EmbSysLib2Hw4Font12getCharWidthEv>
 80038a6:	4603      	mov	r3, r0
 80038a8:	fb03 f104 	mul.w	r1, r3, r4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	899a      	ldrh	r2, [r3, #12]
 80038b0:	b28b      	uxth	r3, r1
 80038b2:	4413      	add	r3, r2
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	819a      	strh	r2, [r3, #12]
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080038c4 <_ZN9EmbSysLib2Hw14DisplayGraphic8putPixelEtt>:

//---------------------------------------------------------------
void DisplayGraphic::putPixel( WORD x, WORD y )
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	803b      	strh	r3, [r7, #0]
  setPixel( PaintColor, x, y );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	334c      	adds	r3, #76	; 0x4c
 80038da:	681c      	ldr	r4, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80038e0:	883b      	ldrh	r3, [r7, #0]
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	47a0      	blx	r4
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}

080038f0 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt>:
//---------------------------------------------------------------
void DisplayGraphic::putRectangle( WORD x,
                                   WORD y,
                                   WORD w,
                                   WORD h )
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  setArea( x, y, w, h );             // set painting area
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3348      	adds	r3, #72	; 0x48
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	88f8      	ldrh	r0, [r7, #6]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	4603      	mov	r3, r0
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	47a0      	blx	r4

  for( WORD py = 0; py < h; py++ )   // scan vert.
 8003922:	2300      	movs	r3, #0
 8003924:	82fb      	strh	r3, [r7, #22]
 8003926:	e015      	b.n	8003954 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x64>
  {
    for( WORD px = 0; px < w; px++ ) // scan hor.
 8003928:	2300      	movs	r3, #0
 800392a:	82bb      	strh	r3, [r7, #20]
 800392c:	e00b      	b.n	8003946 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x56>
    {
      setPixel( PaintColor );        // draw pixel
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3350      	adds	r3, #80	; 0x50
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800393a:	4611      	mov	r1, r2
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	4798      	blx	r3
    for( WORD px = 0; px < w; px++ ) // scan hor.
 8003940:	8abb      	ldrh	r3, [r7, #20]
 8003942:	3301      	adds	r3, #1
 8003944:	82bb      	strh	r3, [r7, #20]
 8003946:	8aba      	ldrh	r2, [r7, #20]
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	429a      	cmp	r2, r3
 800394c:	d3ef      	bcc.n	800392e <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x3e>
  for( WORD py = 0; py < h; py++ )   // scan vert.
 800394e:	8afb      	ldrh	r3, [r7, #22]
 8003950:	3301      	adds	r3, #1
 8003952:	82fb      	strh	r3, [r7, #22]
 8003954:	8afa      	ldrh	r2, [r7, #22]
 8003956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003958:	429a      	cmp	r2, r3
 800395a:	d3e5      	bcc.n	8003928 <_ZN9EmbSysLib2Hw14DisplayGraphic12putRectangleEtttt+0x38>
    }
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE>:

//---------------------------------------------------------------
void DisplayGraphic::putBitmap( WORD   x,
                                WORD   y,
                                Bitmap bitmap )
{
 8003966:	b082      	sub	sp, #8
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b087      	sub	sp, #28
 800396c:	af02      	add	r7, sp, #8
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	460b      	mov	r3, r1
 8003974:	807b      	strh	r3, [r7, #2]
 8003976:	4613      	mov	r3, r2
 8003978:	803b      	strh	r3, [r7, #0]
  WORD w = bitmap.getWidth();
 800397a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fd50 	bl	8003424 <_ZNK9EmbSysLib2Hw6Bitmap8getWidthEv>
 8003984:	4603      	mov	r3, r0
 8003986:	817b      	strh	r3, [r7, #10]
  WORD h = bitmap.getHeight();
 8003988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd56 	bl	800343e <_ZNK9EmbSysLib2Hw6Bitmap9getHeightEv>
 8003992:	4603      	mov	r3, r0
 8003994:	813b      	strh	r3, [r7, #8]

  setArea( x, y, w, h );                   // set painting area
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3348      	adds	r3, #72	; 0x48
 800399c:	681c      	ldr	r4, [r3, #0]
 800399e:	8978      	ldrh	r0, [r7, #10]
 80039a0:	883a      	ldrh	r2, [r7, #0]
 80039a2:	8879      	ldrh	r1, [r7, #2]
 80039a4:	893b      	ldrh	r3, [r7, #8]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	47a0      	blx	r4

  for( WORD py = 0; py < h; py++ )         // scan vert.
 80039ae:	2300      	movs	r3, #0
 80039b0:	81fb      	strh	r3, [r7, #14]
 80039b2:	e01b      	b.n	80039ec <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x86>
  {
    for( WORD px = 0; px < w; px++ )       // scan hor.
 80039b4:	2300      	movs	r3, #0
 80039b6:	81bb      	strh	r3, [r7, #12]
 80039b8:	e011      	b.n	80039de <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x78>
    {
      setPixel( bitmap.getPixel(px,py) );  // draw pixel and set to next
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3350      	adds	r3, #80	; 0x50
 80039c0:	681c      	ldr	r4, [r3, #0]
 80039c2:	89fa      	ldrh	r2, [r7, #14]
 80039c4:	89b9      	ldrh	r1, [r7, #12]
 80039c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fd44 	bl	8003458 <_ZN9EmbSysLib2Hw6Bitmap8getPixelEtt>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	47a0      	blx	r4
    for( WORD px = 0; px < w; px++ )       // scan hor.
 80039d8:	89bb      	ldrh	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	81bb      	strh	r3, [r7, #12]
 80039de:	89ba      	ldrh	r2, [r7, #12]
 80039e0:	897b      	ldrh	r3, [r7, #10]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3e9      	bcc.n	80039ba <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x54>
  for( WORD py = 0; py < h; py++ )         // scan vert.
 80039e6:	89fb      	ldrh	r3, [r7, #14]
 80039e8:	3301      	adds	r3, #1
 80039ea:	81fb      	strh	r3, [r7, #14]
 80039ec:	89fa      	ldrh	r2, [r7, #14]
 80039ee:	893b      	ldrh	r3, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3df      	bcc.n	80039b4 <_ZN9EmbSysLib2Hw14DisplayGraphic9putBitmapEttNS0_6BitmapE+0x4e>
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003a00:	b002      	add	sp, #8
 8003a02:	4770      	bx	lr

08003a04 <_ZN9EmbSysLib2Hw9I2CmasterC1Et>:
//
// I2Cmaster
//
//*******************************************************************
//-------------------------------------------------------------------
I2Cmaster::I2Cmaster( WORD moduleId )
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
: report( moduleId ) 
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <_ZN9EmbSysLib2Hw9I2CmasterC1Et+0x30>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3306      	adds	r3, #6
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fbb6 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  isHardwareOK = true;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	711a      	strb	r2, [r3, #4]
}
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08009368 	.word	0x08009368

08003a38 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h>:
BYTE I2Cmaster::write( BYTE  hwAddr,
                       BYTE *adr,
                       BYTE  sizeAdr,
                       BYTE *data,
                       BYTE  sizeData )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	461a      	mov	r2, r3
 8003a44:	460b      	mov	r3, r1
 8003a46:	72fb      	strb	r3, [r7, #11]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	711a      	strb	r2, [r3, #4]

  if( sizeAdr || sizeData )
 8003a56:	7abb      	ldrb	r3, [r7, #10]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x2c>
 8003a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03e      	beq.n	8003ae2 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0xaa>
  {
    start( sizeAdr + sizeData );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	7ab9      	ldrb	r1, [r7, #10]
 8003a6e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003a72:	440a      	add	r2, r1
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	4611      	mov	r1, r2
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3310      	adds	r3, #16
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	7afa      	ldrb	r2, [r7, #11]
 8003a86:	4611      	mov	r1, r2
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	75fb      	strb	r3, [r7, #23]
 8003a90:	e00d      	b.n	8003aae <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x76>
    {
       writeByte( adr[i] );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	7dfa      	ldrb	r2, [r7, #23]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	75fb      	strb	r3, [r7, #23]
 8003aae:	7dfa      	ldrb	r2, [r7, #23]
 8003ab0:	7abb      	ldrb	r3, [r7, #10]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3ed      	bcc.n	8003a92 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x5a>
    }
    for( i=0; i< sizeData; i++ )
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]
 8003aba:	e00d      	b.n	8003ad8 <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0xa0>
    {
       writeByte( data[i] );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	7dfa      	ldrb	r2, [r7, #23]
 8003ac6:	6a39      	ldr	r1, [r7, #32]
 8003ac8:	440a      	add	r2, r1
 8003aca:	7812      	ldrb	r2, [r2, #0]
 8003acc:	4611      	mov	r1, r2
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	4798      	blx	r3
    for( i=0; i< sizeData; i++ )
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
 8003ad8:	7dfa      	ldrb	r2, [r7, #23]
 8003ada:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d3ec      	bcc.n	8003abc <_ZN9EmbSysLib2Hw9I2Cmaster5writeEhPhhS2_h+0x84>
    }
  }
  stop();
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	4798      	blx	r3
  return( !isHardwareOK );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h>:
BYTE I2Cmaster::read( BYTE  hwAddr,
                      BYTE *adr,
                      BYTE  sizeAdr,
                      BYTE *data,
                      BYTE  sizeData )
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	72fb      	strb	r3, [r7, #11]
 8003b14:	4613      	mov	r3, r2
 8003b16:	72bb      	strb	r3, [r7, #10]
  BYTE i = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]

  isHardwareOK = true;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	711a      	strb	r2, [r3, #4]

  if( sizeAdr )
 8003b22:	7abb      	ldrb	r3, [r7, #10]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d024      	beq.n	8003b72 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x6e>
  {
    start( sizeAdr );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	7aba      	ldrb	r2, [r7, #10]
 8003b32:	4611      	mov	r1, r2
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	4798      	blx	r3
    sendAddr( hwAddr ); // master write
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	7afa      	ldrb	r2, [r7, #11]
 8003b42:	4611      	mov	r1, r2
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003b48:	2300      	movs	r3, #0
 8003b4a:	75fb      	strb	r3, [r7, #23]
 8003b4c:	e00d      	b.n	8003b6a <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x66>
    {
      writeByte( adr[i] );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3314      	adds	r3, #20
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	7dfa      	ldrb	r2, [r7, #23]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	4798      	blx	r3
    for( i=0; i< sizeAdr; i++ )
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	3301      	adds	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
 8003b6a:	7dfa      	ldrb	r2, [r7, #23]
 8003b6c:	7abb      	ldrb	r3, [r7, #10]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d3ed      	bcc.n	8003b4e <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0x4a>
    }
  }
  if( sizeData )
 8003b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d035      	beq.n	8003be6 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xe2>
  {
    start(sizeData);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003b86:	4611      	mov	r1, r2
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	4798      	blx	r3
    sendAddr( hwAddr | 0x01 ); // master read
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3310      	adds	r3, #16
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	7afa      	ldrb	r2, [r7, #11]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	4798      	blx	r3
    for( i=0; i < sizeData - 1; i++ )
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
 8003ba6:	e00d      	b.n	8003bc4 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xc0>
    {
      data[i] = readByteAck();
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3318      	adds	r3, #24
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	7dfa      	ldrb	r2, [r7, #23]
 8003bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb4:	188c      	adds	r4, r1, r2
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	4798      	blx	r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	7023      	strb	r3, [r4, #0]
    for( i=0; i < sizeData - 1; i++ )
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
 8003bc4:	7dfa      	ldrb	r2, [r7, #23]
 8003bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	dbeb      	blt.n	8003ba8 <_ZN9EmbSysLib2Hw9I2Cmaster4readEhPhhS2_h+0xa4>
    }
    data[i] = readByteNack();
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	331c      	adds	r3, #28
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	7dfa      	ldrb	r2, [r7, #23]
 8003bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bdc:	188c      	adds	r4, r1, r2
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	4798      	blx	r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	7023      	strb	r3, [r4, #0]
  }
  stop();
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	4798      	blx	r3
  return( !isHardwareOK );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	791b      	ldrb	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd90      	pop	{r4, r7, pc}

08003c08 <_ZN9EmbSysLib2Hw6MemoryC1Etmhb>:
//
// Memory
//
//*******************************************************************
//-------------------------------------------------------------------
Memory::Memory( WORD moduleId, DWORD size, BYTE def, bool isFlashFlag )
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	461a      	mov	r2, r3
 8003c14:	460b      	mov	r3, r1
 8003c16:	817b      	strh	r3, [r7, #10]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	727b      	strb	r3, [r7, #9]
: def        ( def         )
, isFlashFlag( isFlashFlag )
, report     ( moduleId    )
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <_ZN9EmbSysLib2Hw6MemoryC1Etmhb+0x44>)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]
: def        ( def         )
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	7a7a      	ldrb	r2, [r7, #9]
 8003c26:	711a      	strb	r2, [r3, #4]
, isFlashFlag( isFlashFlag )
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	7e3a      	ldrb	r2, [r7, #24]
 8003c2c:	715a      	strb	r2, [r3, #5]
, report     ( moduleId    )
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	330c      	adds	r3, #12
 8003c32:	897a      	ldrh	r2, [r7, #10]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff faaa 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->size        = size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
}
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	0800930c 	.word	0x0800930c

08003c50 <_ZN9EmbSysLib2Hw6Memory5writeEmh>:

//-------------------------------------------------------------------
inline void Memory::write( DWORD addr, BYTE data )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if( addr < size )          // valid address?
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d208      	bcs.n	8003c7a <_ZN9EmbSysLib2Hw6Memory5writeEmh+0x2a>
  {
    writeByte( addr, data ); // write data byte
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3320      	adds	r3, #32
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	79fa      	ldrb	r2, [r7, #7]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	4798      	blx	r3
  }
  else
  {
    report.error( ReportID_Hw::Event::WRITE_ERROR );
  }
}
 8003c78:	e005      	b.n	8003c86 <_ZN9EmbSysLib2Hw6Memory5writeEmh+0x36>
    report.error( ReportID_Hw::Event::WRITE_ERROR );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	210b      	movs	r1, #11
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fabb 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_ZN9EmbSysLib2Hw6Memory4readEm>:

//-------------------------------------------------------------------
inline BYTE Memory::read( DWORD addr )
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  if( addr < size )           // valid address?
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d208      	bcs.n	8003cb4 <_ZN9EmbSysLib2Hw6Memory4readEm+0x26>
  {
    return( readByte(addr) ); // read data byte
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6839      	ldr	r1, [r7, #0]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	e007      	b.n	8003cc4 <_ZN9EmbSysLib2Hw6Memory4readEm+0x36>
  }
  else
  {
    report.error( ReportID_Hw::Event::READ_ERROR );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	210a      	movs	r1, #10
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fa9e 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
    return( def );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	791b      	ldrb	r3, [r3, #4]
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_ZN9EmbSysLib2Hw6Memory5eraseEv>:

//-------------------------------------------------------------------
inline void Memory::erase( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  unlock();
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
  for( DWORD i = 0; i < size; i++ )  // write default to all addresses
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e00b      	b.n	8003cfc <_ZN9EmbSysLib2Hw6Memory5eraseEv+0x30>
  {
    writeByte( i, def );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3320      	adds	r3, #32
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	7912      	ldrb	r2, [r2, #4]
 8003cf0:	68f9      	ldr	r1, [r7, #12]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
  for( DWORD i = 0; i < size; i++ )  // write default to all addresses
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3ee      	bcc.n	8003ce4 <_ZN9EmbSysLib2Hw6Memory5eraseEv+0x18>
  }
  lock();
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZNK9EmbSysLib2Hw6Memory7getSizeEv>:

//-------------------------------------------------------------------
inline DWORD Memory::getSize( void ) const
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return( size );
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZNK9EmbSysLib2Hw6Memory7isFlashEv>:

//-------------------------------------------------------------------
inline bool Memory::isFlash( void ) const
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  return( isFlashFlag );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	795b      	ldrb	r3, [r3, #5]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <_ZN9EmbSysLib2Hw4PortC1Et>:
//
// Port
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Port( WORD moduleId )
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <_ZN9EmbSysLib2Hw4PortC1Et+0x2c>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fa12 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	08009390 	.word	0x08009390

08003d7c <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>:
//
// Port::Pin
//
//*******************************************************************
//-------------------------------------------------------------------
Port::Pin::Pin( Port &port, BYTE pinId )
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	71fb      	strb	r3, [r7, #7]
: pinId  ( pinId    )
, pinMask( 1<<pinId )
, port   ( port     )
 8003d8a:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h+0x3c>)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]
: pinId  ( pinId    )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	79fa      	ldrb	r2, [r7, #7]
 8003d94:	711a      	strb	r2, [r3, #4]
, pinMask( 1<<pinId )
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
, port   ( port     )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	60da      	str	r2, [r3, #12]
{
}
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	080093b0 	.word	0x080093b0

08003dbc <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>:
  port.setPinMode( pinId, mode );
}

//-------------------------------------------------------------------
inline void Port::Pin::setMode( Mode mode )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
  port.setPinMode( pinId, mode );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68d8      	ldr	r0, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	7911      	ldrb	r1, [r2, #4]
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	4798      	blx	r3
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_ZN9EmbSysLib2Hw4Port3Pin3setEv>:

//-------------------------------------------------------------------
inline void Port::Pin::set( void )
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  port.set( pinMask );
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68d8      	ldr	r0, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4798      	blx	r3
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZN9EmbSysLib2Hw4Port3Pin3setEb>:

//-------------------------------------------------------------------
inline void Port::Pin::set( bool value )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  if( value )  port.set( pinMask );
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x2a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68d8      	ldr	r0, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4798      	blx	r3
  else         port.clr( pinMask );
}
 8003e34:	e00a      	b.n	8003e4c <_ZN9EmbSysLib2Hw4Port3Pin3setEb+0x40>
  else         port.clr( pinMask );
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68d8      	ldr	r0, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3310      	adds	r3, #16
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6892      	ldr	r2, [r2, #8]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4798      	blx	r3
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZN9EmbSysLib2Hw4Port3Pin3clrEv>:

//-------------------------------------------------------------------
inline void Port::Pin::clr( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  port.clr( pinMask );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68d8      	ldr	r0, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3310      	adds	r3, #16
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6892      	ldr	r2, [r2, #8]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4798      	blx	r3
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_ZN9EmbSysLib2Hw4Port3Pin3getEv>:

//-------------------------------------------------------------------
inline bool Port::Pin::get( void )
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return( (port.get() & pinMask) != 0 );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <_ZN9EmbSysLib2Hw5TimerC1Et>:
//
// Timer
//
//*******************************************************************
//-------------------------------------------------------------------
Timer::Timer( WORD moduleId )
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
: report( moduleId )
 8003ebc:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <_ZN9EmbSysLib2Hw5TimerC1Et+0x34>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fcbb 	bl	8005842 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	887a      	ldrh	r2, [r7, #2]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff f95b 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
}
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	080093cc 	.word	0x080093cc

08003ee8 <_ZN9EmbSysLib2Hw5Timer12getCycleTimeEv>:

//-------------------------------------------------------------------
DWORD Timer::getCycleTime( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return( cycleTime );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_ZN9EmbSysLib2Hw5Timer3addEPNS1_4TaskE>:

//-------------------------------------------------------------------
void Timer::add( Timer::Task *ptr )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  isrSeq.add( ptr );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 fca4 	bl	800585e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv>:

//-------------------------------------------------------------------
inline void Timer::isrHandler( void )
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  Task *ptr = isrSeq.getFirst();
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fcc3 	bl	80058b6 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>
 8003f30:	60f8      	str	r0, [r7, #12]
  while( ptr )
 8003f32:	e00a      	b.n	8003f4a <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x2c>
  {
    ptr->update();
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	4798      	blx	r3
    ptr = ptr->getNext();
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fcc3 	bl	80058ce <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>
 8003f48:	60f8      	str	r0, [r7, #12]
  while( ptr )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f1      	bne.n	8003f34 <_ZN9EmbSysLib2Hw5Timer10isrHandlerEv+0x16>
  }
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <_ZN9EmbSysLib2Hw5TouchC1EtttNS1_11OrientationE>:
//
// Touch
//
//*******************************************************************
//-------------------------------------------------------------------
Touch::Touch( WORD        moduleId, 
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	817b      	strh	r3, [r7, #10]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	813b      	strh	r3, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
              WORD        width, 
              WORD        height, 
              Orientation orientation )
: report( moduleId )
 8003f76:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <_ZN9EmbSysLib2Hw5TouchC1EtttNS1_11OrientationE+0x5c>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	897a      	ldrh	r2, [r7, #10]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f903 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  this->width       = width;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	815a      	strh	r2, [r3, #10]
  this->height      = height;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	819a      	strh	r2, [r3, #12]
  this->orientation = orientation;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	7e3a      	ldrb	r2, [r7, #24]
 8003f9a:	739a      	strb	r2, [r3, #14]
  
  xPos          = 0;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	809a      	strh	r2, [r3, #4]
  yPos          = 0;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	80da      	strh	r2, [r3, #6]
  isTouchedFlag = false;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	721a      	strb	r2, [r3, #8]
}
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	08009194 	.word	0x08009194

08003fbc <_ZN9EmbSysLib2Hw5Touch7getPosXEv>:

//-------------------------------------------------------------------
inline WORD Touch::getPosX( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  switch( orientation )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7b9b      	ldrb	r3, [r3, #14]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d012      	beq.n	8003ff2 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x36>
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	dc03      	bgt.n	8003fd8 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x1c>
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d004      	beq.n	8003fde <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x22>
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d005      	beq.n	8003fe4 <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x28>
  {
    default:
    case Touch::ROTATION_0  : return( xPos );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	889b      	ldrh	r3, [r3, #4]
 8003fdc:	e00f      	b.n	8003ffe <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x42>
    case Touch::ROTATION_90 : return( yPos );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	88db      	ldrh	r3, [r3, #6]
 8003fe2:	e00c      	b.n	8003ffe <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x42>
    case Touch::ROTATION_180: return( width-xPos );
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	895a      	ldrh	r2, [r3, #10]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	889b      	ldrh	r3, [r3, #4]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	e005      	b.n	8003ffe <_ZN9EmbSysLib2Hw5Touch7getPosXEv+0x42>
    case Touch::ROTATION_270: return( height-yPos );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	899a      	ldrh	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	88db      	ldrh	r3, [r3, #6]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	b29b      	uxth	r3, r3
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <_ZN9EmbSysLib2Hw5Touch7getPosYEv>:

//-------------------------------------------------------------------
inline WORD Touch::getPosY( void )
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  switch( orientation )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7b9b      	ldrb	r3, [r3, #14]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d016      	beq.n	8004048 <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x3e>
 800401a:	2b03      	cmp	r3, #3
 800401c:	dc03      	bgt.n	8004026 <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x1c>
 800401e:	2b01      	cmp	r3, #1
 8004020:	d004      	beq.n	800402c <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x22>
 8004022:	2b02      	cmp	r3, #2
 8004024:	d009      	beq.n	800403a <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x30>
  {
    default:
    case Touch::ROTATION_0  : return( yPos );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	88db      	ldrh	r3, [r3, #6]
 800402a:	e00f      	b.n	800404c <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x42>
    case Touch::ROTATION_90 : return( width-xPos );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	895a      	ldrh	r2, [r3, #10]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	889b      	ldrh	r3, [r3, #4]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	b29b      	uxth	r3, r3
 8004038:	e008      	b.n	800404c <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x42>
    case Touch::ROTATION_180: return( height-yPos );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	899a      	ldrh	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	88db      	ldrh	r3, [r3, #6]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	b29b      	uxth	r3, r3
 8004046:	e001      	b.n	800404c <_ZN9EmbSysLib2Hw5Touch7getPosYEv+0x42>
    case Touch::ROTATION_270: return( xPos );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	889b      	ldrh	r3, [r3, #4]
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN9EmbSysLib2Hw5Touch9isTouchedEv>:

//-------------------------------------------------------------------
inline BYTE Touch::isTouched( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return( isTouchedFlag );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7a1b      	ldrb	r3, [r3, #8]
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <_ZN9EmbSysLib2Hw4UartC1Ettt>:
//
// Uart
//
//*******************************************************************
//-------------------------------------------------------------------
Uart::Uart( WORD moduleId, WORD sizeRxBuf, WORD sizeTxBuf )
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]

: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
, dataTxBuf( sizeTxBuf )
, report( moduleId )
 800408a:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x98>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]
: dataRxBuf( sizeRxBuf ) // initialize both FIFOs
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3304      	adds	r3, #4
 8004094:	893a      	ldrh	r2, [r7, #8]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fc24 	bl	80058e6 <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, dataTxBuf( sizeTxBuf )
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3310      	adds	r3, #16
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fc1d 	bl	80058e6 <_ZN9EmbSysLib3Std4FifoIhEC1Et>
, report( moduleId )
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	331e      	adds	r3, #30
 80040b0:	897a      	ldrh	r2, [r7, #10]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f86b 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
{
  if(   dataRxBuf.getSize() != sizeRxBuf
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3304      	adds	r3, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fc3c 	bl	800593c <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
     || dataTxBuf.getSize() != sizeTxBuf )
 80040c8:	893b      	ldrh	r3, [r7, #8]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d109      	bne.n	80040e2 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x72>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3310      	adds	r3, #16
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fc32 	bl	800593c <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	4293      	cmp	r3, r2
 80040e0:	d001      	beq.n	80040e6 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x76>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x78>
 80040e6:	2300      	movs	r3, #0
  if(   dataRxBuf.getSize() != sizeRxBuf
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <_ZN9EmbSysLib2Hw4UartC1Ettt+0x88>
  {
    report.error( ReportID_Hw::Event::MEMORY_ALLOCTION_ERROR );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	331e      	adds	r3, #30
 80040f0:	2105      	movs	r1, #5
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff f882 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
  }
  txReady = true;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	771a      	strb	r2, [r3, #28]
}
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	08009268 	.word	0x08009268

0800410c <_ZN9EmbSysLib2Hw4Uart5isrRxEv>:

//-------------------------------------------------------------------
void Uart::isrRx( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  BYTE data = getByte(); // read data from hardware
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	332c      	adds	r3, #44	; 0x2c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]

  dataRxBuf << data;     // pipe data into FIFO
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	f107 020f 	add.w	r2, r7, #15
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fc10 	bl	8005954 <_ZN9EmbSysLib3Std4FifoIhElsERKh>
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <_ZN9EmbSysLib2Hw4Uart5isrTxEv>:

//-------------------------------------------------------------------
inline void Uart::isrTx( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  BYTE data = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]

  if( !dataTxBuf.isEmpty() ) // data to been sent?
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3310      	adds	r3, #16
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fc37 	bl	80059c0 <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>
 8004152:	4603      	mov	r3, r0
 8004154:	f083 0301 	eor.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d013      	beq.n	8004186 <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x4a>
  {
    dataTxBuf >> data;       // read data from FIFO
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3310      	adds	r3, #16
 8004162:	f107 020f 	add.w	r2, r7, #15
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f001 fc3d 	bl	80059e8 <_ZN9EmbSysLib3Std4FifoIhErsERh>
    txReady = false;         // set flag before setByte() because
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
                             // some hardware doesn't support
                             // interrupts and isrTx is called recursiv
    setByte( data );         // write data to hardware
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3328      	adds	r3, #40	; 0x28
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	4611      	mov	r1, r2
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
  }
  else
  {
    txReady = true;          // we are ready
  }
}
 8004184:	e002      	b.n	800418c <_ZN9EmbSysLib2Hw4Uart5isrTxEv+0x50>
    txReady = true;          // we are ready
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	771a      	strb	r2, [r3, #28]
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh>:

//-------------------------------------------------------------------
void Uart::transmitByte( BYTE data )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80041a0:	e00a      	b.n	80041b8 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
  {
    if( txReady )             // this case is an error:
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7f1b      	ldrb	r3, [r3, #28]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x24>
                              //   FIFO is full,
                              //   but isrTx is not running
    {
      isrTx();                // call isrTx explicit
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3320      	adds	r3, #32
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
  while( dataTxBuf.isFull() ) // wait until FIFO is ready
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3310      	adds	r3, #16
 80041bc:	4618      	mov	r0, r3
 80041be:	f001 fc47 	bl	8005a50 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ec      	bne.n	80041a2 <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0xe>
    }
                              // else: Data transfer is running,
                              //       we have to wait until complete
  }

  dataTxBuf << data;          // pipe data into FIFO
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3310      	adds	r3, #16
 80041cc:	1cfa      	adds	r2, r7, #3
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 fbbf 	bl	8005954 <_ZN9EmbSysLib3Std4FifoIhElsERKh>

  if( txReady )               // at first time, isrTx has to be
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	7f1b      	ldrb	r3, [r3, #28]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <_ZN9EmbSysLib2Hw4Uart12transmitByteEh+0x58>
                              // called explicit without interrupt
  {
    isrTx();
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3320      	adds	r3, #32
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
  }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZN9EmbSysLib2Hw4Uart3setEh>:

//-------------------------------------------------------------------
void Uart::set( BYTE data )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  transmitByte( data );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3324      	adds	r3, #36	; 0x24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	4611      	mov	r1, r2
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <_ZN9EmbSysLib2Hw4Uart3setEPKht>:

//-------------------------------------------------------------------
void Uart::set( const BYTE *data, WORD length )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  while( length-- )
 8004226:	e00a      	b.n	800423e <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x26>
  {
    transmitByte( *(data++ ) ); // put a character and set pointer to next
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3324      	adds	r3, #36	; 0x24
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1c59      	adds	r1, r3, #1
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	4790      	blx	r2
  while( length-- )
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	80fa      	strh	r2, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ea      	bne.n	8004228 <_ZN9EmbSysLib2Hw4Uart3setEPKht+0x10>
  }
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZN9EmbSysLib2Hw4Uart3setEPKc>:

//-------------------------------------------------------------------
void Uart::set( const char *str )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  while( *str )                // until end of null terminated string
 8004266:	e00a      	b.n	800427e <_ZN9EmbSysLib2Hw4Uart3setEPKc+0x22>
  {
    transmitByte( *(str++ ) ); // put a character and set pointer to next
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	1c59      	adds	r1, r3, #1
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4790      	blx	r2
  while( *str )                // until end of null terminated string
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <_ZN9EmbSysLib2Hw4Uart3setEPKc+0xc>
  }
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZN9EmbSysLib2Hw4Uart14isTxBufferFullEv>:

//-------------------------------------------------------------------
inline bool Uart::isTxBufferFull( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.isFull() );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3310      	adds	r3, #16
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fbd7 	bl	8005a50 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_ZN9EmbSysLib2Hw4Uart20getFifoRemainingSizeEv>:

//-------------------------------------------------------------------
inline WORD Uart::getFifoRemainingSize( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return( dataTxBuf.getFree() );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3310      	adds	r3, #16
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fbdf 	bl	8005a7c <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv>
 80042be:	4603      	mov	r3, r0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <_ZN9EmbSysLib2Hw4Uart3getERh>:

//-------------------------------------------------------------------
bool Uart::get( BYTE &data )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  BYTE tmp = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]

  if( dataRxBuf >> tmp )   // is there a data byte in the FIFO?
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	f107 020f 	add.w	r2, r7, #15
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fb81 	bl	80059e8 <_ZN9EmbSysLib3Std4FifoIhErsERh>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <_ZN9EmbSysLib2Hw4Uart3getERh+0x2e>
  {
    data = tmp;            // copy data byte to pointer
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	701a      	strb	r2, [r3, #0]
    return( true );        // yes, we received a data byte
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <_ZN9EmbSysLib2Hw4Uart3getERh+0x30>
  }
  else
  {
    return( false );       // no data byte received
 80042f6:	2300      	movs	r3, #0
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <_ZN9EmbSysLib2Hw4Uart3getEv>:

//-------------------------------------------------------------------
BYTE Uart::get( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  BYTE tmp = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]

  if( get(tmp) )    // is there a data byte in the FIFO?
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f107 020f 	add.w	r2, r7, #15
 8004318:	4611      	mov	r1, r2
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <_ZN9EmbSysLib2Hw4Uart3getEv+0x28>
  {
    return( tmp );  // yes, we received a data byte
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	e000      	b.n	800432a <_ZN9EmbSysLib2Hw4Uart3getEv+0x2a>
  }
  else
  {
    return( 0 );    // no data byte received
 8004328:	2300      	movs	r3, #0
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>:
//
// Digital
//
//*******************************************************************
//-------------------------------------------------------------------
Digital::Digital( Port  &port,
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	460b      	mov	r3, r1
 8004344:	71fb      	strb	r3, [r7, #7]
 8004346:	4613      	mov	r3, r2
 8004348:	71bb      	strb	r3, [r7, #6]
                  BYTE   pinId,
                  Mode   mode,
                  bool   def )
: pin( port, pinId )
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb+0x64>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3308      	adds	r3, #8
 8004354:	79fa      	ldrb	r2, [r7, #7]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fd0f 	bl	8003d7c <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
{
  valueIn    = 0;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	711a      	strb	r2, [r3, #4]
  valueOut   = 0;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	715a      	strb	r2, [r3, #5]
  pinDefault = def;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	7e3a      	ldrb	r2, [r7, #24]
 800436e:	719a      	strb	r2, [r3, #6]

  pin.set( def );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3308      	adds	r3, #8
 8004374:	7e3a      	ldrb	r2, [r7, #24]
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fd47 	bl	8003e0c <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
  pin.setMode( (Port::Mode)mode );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3308      	adds	r3, #8
 8004382:	79ba      	ldrb	r2, [r7, #6]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fd18 	bl	8003dbc <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	08009164 	.word	0x08009164

0800439c <_ZN9EmbSysLib3Dev7Digital7setModeENS1_4ModeE>:

//-------------------------------------------------------------------
void Digital::setMode( Mode mode )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
  pin.setMode( (Port::Mode)mode );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3308      	adds	r3, #8
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fd03 	bl	8003dbc <_ZN9EmbSysLib2Hw4Port3Pin7setModeENS1_4ModeE>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZN9EmbSysLib3Dev7Digital3setEb>:

//-------------------------------------------------------------------
void Digital::set( bool value )
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	70fb      	strb	r3, [r7, #3]
  valueOut = value;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	715a      	strb	r2, [r3, #5]
  pin.set( value ^ pinDefault );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0008 	add.w	r0, r3, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	799b      	ldrb	r3, [r3, #6]
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	429a      	cmp	r2, r3
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7ff fd10 	bl	8003e0c <_ZN9EmbSysLib2Hw4Port3Pin3setEb>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZN9EmbSysLib3Dev7Digital3getEv>:

//-------------------------------------------------------------------
bool Digital::get( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return( pin.get() != pinDefault );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3308      	adds	r3, #8
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fd3a 	bl	8003e7a <_ZN9EmbSysLib2Hw4Port3Pin3getEv>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	799b      	ldrb	r3, [r3, #6]
 800440e:	429a      	cmp	r2, r3
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>:
//
// ScreenChar
//
//*******************************************************************
//-------------------------------------------------------------------
ScreenChar::ScreenChar( DisplayChar &display )
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]

: display( display )
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE+0x54>)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	605a      	str	r2, [r3, #4]

{
  maxStrLength = display.getNumberOfColumns();
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3318      	adds	r3, #24
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6838      	ldr	r0, [r7, #0]
 8004440:	4798      	blx	r3
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	721a      	strb	r2, [r3, #8]
  str = new char[maxStrLength+1];
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7a1b      	ldrb	r3, [r3, #8]
 800444e:	3301      	adds	r3, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f004 f837 	bl	80084c4 <_Znaj>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]
  display.clear();
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6838      	ldr	r0, [r7, #0]
 8004466:	4798      	blx	r3
}
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	08009150 	.word	0x08009150

08004478 <_ZN9EmbSysLib3Dev10ScreenChar5clearEv>:

//-------------------------------------------------------------------
void ScreenChar::clear(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  display.clear();
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4610      	mov	r0, r2
 800448e:	4798      	blx	r3
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_ZN9EmbSysLib3Dev10ScreenChar7refreshEv>:

//-------------------------------------------------------------------
void ScreenChar::refresh(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  display.refresh();
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3304      	adds	r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4610      	mov	r0, r2
 80044b0:	4798      	blx	r3
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZN9EmbSysLib3Dev10ScreenChar6printfEhhPKcz>:
//-------------------------------------------------------------------
void ScreenChar::printf( BYTE        line,
                         BYTE        column,
                         const char *format,
                         ... )
{
 80044ba:	b408      	push	{r3}
 80044bc:	b580      	push	{r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
 80044c8:	4613      	mov	r3, r2
 80044ca:	70bb      	strb	r3, [r7, #2]
  va_list argzeiger;
  va_start ( argzeiger, format );
 80044cc:	f107 0320 	add.w	r3, r7, #32
 80044d0:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68d8      	ldr	r0, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7a1b      	ldrb	r3, [r3, #8]
 80044da:	3301      	adds	r3, #1
 80044dc:	4619      	mov	r1, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f004 f8e1 	bl	80086a8 <vsniprintf>
  va_end   ( argzeiger );

  display.gotoTextPos( line, column );
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6858      	ldr	r0, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	78ba      	ldrb	r2, [r7, #2]
 80044f6:	78f9      	ldrb	r1, [r7, #3]
 80044f8:	4798      	blx	r3
  display.putString( str );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6858      	ldr	r0, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3310      	adds	r3, #16
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68d2      	ldr	r2, [r2, #12]
 800450c:	4611      	mov	r1, r2
 800450e:	4798      	blx	r3
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800451a:	b001      	add	sp, #4
 800451c:	4770      	bx	lr
	...

08004520 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>:
//
// ScreenGraphic
//
//*******************************************************************
//-------------------------------------------------------------------
ScreenGraphic::ScreenGraphic( DisplayGraphic &display )
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]

: display( display )
 800452a:	4a11      	ldr	r2, [pc, #68]	; (8004570 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE+0x50>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]

{
  maxStrLength = display.getNumberOfColumns();
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3318      	adds	r3, #24
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	721a      	strb	r2, [r3, #8]
  str = new char[maxStrLength+1];
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7a1b      	ldrb	r3, [r3, #8]
 8004550:	3301      	adds	r3, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f003 ffb6 	bl	80084c4 <_Znaj>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
  clear();
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f807 	bl	8004574 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>
}
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	0800910c 	.word	0x0800910c

08004574 <_ZN9EmbSysLib3Dev13ScreenGraphic5clearEv>:


//-------------------------------------------------------------------
void ScreenGraphic::clear( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  display.clear();
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4610      	mov	r0, r2
 800458c:	4798      	blx	r3
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <_ZN9EmbSysLib3Dev13ScreenGraphic7refreshEv>:

//-------------------------------------------------------------------
void ScreenGraphic::refresh( void )
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  display.refresh();
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3304      	adds	r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4610      	mov	r0, r2
 80045ae:	4798      	blx	r3
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_ZN9EmbSysLib3Dev13ScreenGraphic6printfEhhPKcz>:
//-------------------------------------------------------------------
void ScreenGraphic::printf( BYTE        line,
                            BYTE        column,
                            const char *format,
                            ... )
{
 80045b8:	b408      	push	{r3}
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	70fb      	strb	r3, [r7, #3]
 80045c6:	4613      	mov	r3, r2
 80045c8:	70bb      	strb	r3, [r7, #2]
  va_list argzeiger;
  va_start( argzeiger, format );
 80045ca:	f107 0320 	add.w	r3, r7, #32
 80045ce:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68d8      	ldr	r0, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7a1b      	ldrb	r3, [r3, #8]
 80045d8:	3301      	adds	r3, #1
 80045da:	4619      	mov	r1, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	f004 f862 	bl	80086a8 <vsniprintf>
  va_end  ( argzeiger );

  display.gotoTextPos( line, column );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6858      	ldr	r0, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	78ba      	ldrb	r2, [r7, #2]
 80045f4:	78f9      	ldrb	r1, [r7, #3]
 80045f6:	4798      	blx	r3
  display.putString( str );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3310      	adds	r3, #16
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68d2      	ldr	r2, [r2, #12]
 800460c:	4611      	mov	r1, r2
 800460e:	4798      	blx	r3
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800461a:	b001      	add	sp, #4
 800461c:	4770      	bx	lr

0800461e <_ZN9EmbSysLib3Dev13ScreenGraphic7setFontENS_2Hw4FontEh>:

//-------------------------------------------------------------------
void ScreenGraphic::setFont( Font font, BYTE zoom )
{
 800461e:	b590      	push	{r4, r7, lr}
 8004620:	b087      	sub	sp, #28
 8004622:	af02      	add	r7, sp, #8
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	4638      	mov	r0, r7
 8004628:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  display.setFont( font, zoom );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6858      	ldr	r0, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	331c      	adds	r3, #28
 8004638:	681c      	ldr	r4, [r3, #0]
 800463a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	463b      	mov	r3, r7
 8004642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004644:	47a0      	blx	r4
};
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bd90      	pop	{r4, r7, pc}

0800464e <_ZN9EmbSysLib3Dev13ScreenGraphic7setZoomEh>:

//-------------------------------------------------------------------
void ScreenGraphic::setZoom( BYTE zoom )
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
  display.setZoom( zoom );
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3320      	adds	r3, #32
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	78f9      	ldrb	r1, [r7, #3]
 800466a:	4610      	mov	r0, r2
 800466c:	4798      	blx	r3
};
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZN9EmbSysLib3Dev13ScreenGraphic12setBackColorEt>:

//-------------------------------------------------------------------
void ScreenGraphic::setBackColor( WORD color )
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]
  display.setBackColor( color );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3324      	adds	r3, #36	; 0x24
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	8879      	ldrh	r1, [r7, #2]
 8004692:	4610      	mov	r0, r2
 8004694:	4798      	blx	r3
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <_ZN9EmbSysLib3Dev13ScreenGraphic12setTextColorEt>:

//-------------------------------------------------------------------
void ScreenGraphic::setTextColor( WORD color )
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	807b      	strh	r3, [r7, #2]
  display.setTextColor( color );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	332c      	adds	r3, #44	; 0x2c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	8879      	ldrh	r1, [r7, #2]
 80046ba:	4610      	mov	r0, r2
 80046bc:	4798      	blx	r3
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawTextEttPKcz>:
//-------------------------------------------------------------------
void ScreenGraphic::drawText( WORD        x,
                              WORD        y,
                              const char *format,
                              ... )
{
 80046c6:	b408      	push	{r3}
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
 80046d4:	4613      	mov	r3, r2
 80046d6:	803b      	strh	r3, [r7, #0]
  va_list argzeiger;
  va_start( argzeiger, format );
 80046d8:	f107 0320 	add.w	r3, r7, #32
 80046dc:	60fb      	str	r3, [r7, #12]
  vsnprintf( str, maxStrLength+1, format, argzeiger );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68d8      	ldr	r0, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7a1b      	ldrb	r3, [r3, #8]
 80046e6:	3301      	adds	r3, #1
 80046e8:	4619      	mov	r1, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	f003 ffdb 	bl	80086a8 <vsniprintf>
  va_end  ( argzeiger );

  display.gotoPixelPos( x, y );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6858      	ldr	r0, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3330      	adds	r3, #48	; 0x30
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	883a      	ldrh	r2, [r7, #0]
 8004702:	8879      	ldrh	r1, [r7, #2]
 8004704:	4798      	blx	r3
  display.putString( str );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3310      	adds	r3, #16
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	4611      	mov	r1, r2
 800471c:	4798      	blx	r3
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004728:	b001      	add	sp, #4
 800472a:	4770      	bx	lr

0800472c <_ZN9EmbSysLib3Dev13ScreenGraphic9drawPixelEttt>:

//-------------------------------------------------------------------
void ScreenGraphic::drawPixel( WORD x, WORD y, WORD color )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3328      	adds	r3, #40	; 0x28
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	88f9      	ldrh	r1, [r7, #6]
 8004756:	4610      	mov	r0, r2
 8004758:	4798      	blx	r3
   display.putPixel( x, y );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6858      	ldr	r0, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3334      	adds	r3, #52	; 0x34
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	893a      	ldrh	r2, [r7, #8]
 800476a:	8979      	ldrh	r1, [r7, #10]
 800476c:	4798      	blx	r3
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZN9EmbSysLib3Dev13ScreenGraphic13drawRectangleEttttt>:
void ScreenGraphic::drawRectangle( WORD x,
                                   WORD y,
                                   WORD w,
                                   WORD h,
                                   WORD color )
{
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	4608      	mov	r0, r1
 8004780:	4611      	mov	r1, r2
 8004782:	461a      	mov	r2, r3
 8004784:	4603      	mov	r3, r0
 8004786:	817b      	strh	r3, [r7, #10]
 8004788:	460b      	mov	r3, r1
 800478a:	813b      	strh	r3, [r7, #8]
 800478c:	4613      	mov	r3, r2
 800478e:	80fb      	strh	r3, [r7, #6]
   display.setPaintColor( color );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3328      	adds	r3, #40	; 0x28
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
   display.putRectangle( x, y, w, h );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6858      	ldr	r0, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3338      	adds	r3, #56	; 0x38
 80047b0:	681c      	ldr	r4, [r3, #0]
 80047b2:	88fd      	ldrh	r5, [r7, #6]
 80047b4:	893a      	ldrh	r2, [r7, #8]
 80047b6:	8979      	ldrh	r1, [r7, #10]
 80047b8:	8c3b      	ldrh	r3, [r7, #32]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	462b      	mov	r3, r5
 80047be:	47a0      	blx	r4
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bdb0      	pop	{r4, r5, r7, pc}

080047c8 <_ZN9EmbSysLib3Dev13ScreenGraphic13drawRectangleEtttttt>:
                                   WORD y,
                                   WORD w,
                                   WORD h,
                                   WORD th,
                                   WORD color )
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	817b      	strh	r3, [r7, #10]
 80047da:	460b      	mov	r3, r1
 80047dc:	813b      	strh	r3, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  th = MIN( th, MIN(h,w) );
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	8c3b      	ldrh	r3, [r7, #32]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 ffe4 	bl	80057b6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 ffdd 	bl	80057b6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>
 80047fc:	4603      	mov	r3, r0
 80047fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  // horizontal
  drawRectangle( x, y     , w, th, color );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3324      	adds	r3, #36	; 0x24
 8004806:	681c      	ldr	r4, [r3, #0]
 8004808:	88f8      	ldrh	r0, [r7, #6]
 800480a:	893a      	ldrh	r2, [r7, #8]
 800480c:	8979      	ldrh	r1, [r7, #10]
 800480e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	4603      	mov	r3, r0
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	47a0      	blx	r4
  drawRectangle( x, y+h-th, w, th, color );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	681c      	ldr	r4, [r3, #0]
 8004824:	893a      	ldrh	r2, [r7, #8]
 8004826:	8c3b      	ldrh	r3, [r7, #32]
 8004828:	4413      	add	r3, r2
 800482a:	b29a      	uxth	r2, r3
 800482c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	b29a      	uxth	r2, r3
 8004832:	88f8      	ldrh	r0, [r7, #6]
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4603      	mov	r3, r0
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	47a0      	blx	r4

  // vertikal
  drawRectangle( x,      y, th, h, color );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3324      	adds	r3, #36	; 0x24
 800484a:	681c      	ldr	r4, [r3, #0]
 800484c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800484e:	893a      	ldrh	r2, [r7, #8]
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	8c3b      	ldrh	r3, [r7, #32]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4603      	mov	r3, r0
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	47a0      	blx	r4
  drawRectangle( x+w-th, y, th, h, color );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3324      	adds	r3, #36	; 0x24
 8004866:	681c      	ldr	r4, [r3, #0]
 8004868:	897a      	ldrh	r2, [r7, #10]
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4413      	add	r3, r2
 800486e:	b29a      	uxth	r2, r3
 8004870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	b299      	uxth	r1, r3
 8004876:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004878:	893a      	ldrh	r2, [r7, #8]
 800487a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	8c3b      	ldrh	r3, [r7, #32]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	4603      	mov	r3, r0
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	47a0      	blx	r4
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bd90      	pop	{r4, r7, pc}

08004890 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt>:
void ScreenGraphic::drawCircle( WORD x0,
                                WORD y0,
                                WORD r,
                                WORD th,
                                WORD color)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	817b      	strh	r3, [r7, #10]
 80048a2:	460b      	mov	r3, r1
 80048a4:	813b      	strh	r3, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
  if( th >= r ) // filled circle?
 80048aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d30c      	bcc.n	80048cc <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x3c>
  {
    drawCircle( x0, y0, r, color );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3330      	adds	r3, #48	; 0x30
 80048b8:	681c      	ldr	r4, [r3, #0]
 80048ba:	88f8      	ldrh	r0, [r7, #6]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	8979      	ldrh	r1, [r7, #10]
 80048c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4603      	mov	r3, r0
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	47a0      	blx	r4
    return;
 80048ca:	e130      	b.n	8004b2e <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x29e>
  }

  display.setPaintColor( color );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80048dc:	4610      	mov	r0, r2
 80048de:	4798      	blx	r3

  // Inner circle
  short fi  = 1 - (r-th);
 80048e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	83fb      	strh	r3, [r7, #30]
  short dyi = -2*(r-th);
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	03d2      	lsls	r2, r2, #15
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	83bb      	strh	r3, [r7, #28]
  short yi  = r-th;
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	b29b      	uxth	r3, r3
 800490a:	837b      	strh	r3, [r7, #26]

  // Outer circle
  short f  = 1 - r;
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	f1c3 0301 	rsb	r3, r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	833b      	strh	r3, [r7, #24]
  short dy = -2 * r;
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	461a      	mov	r2, r3
 800491a:	03d2      	lsls	r2, r2, #15
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	82fb      	strh	r3, [r7, #22]
  short y  = r;
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	82bb      	strh	r3, [r7, #20]

  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004928:	2300      	movs	r3, #0
 800492a:	827b      	strh	r3, [r7, #18]
 800492c:	2302      	movs	r3, #2
 800492e:	823b      	strh	r3, [r7, #16]
 8004930:	e0f6      	b.n	8004b20 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x290>
  {
                                                             // Sector:
    display.putRectangle(x0 - x,      y0 - y,      1,  th ); // N->NW
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6858      	ldr	r0, [r3, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3338      	adds	r3, #56	; 0x38
 800493e:	681c      	ldr	r4, [r3, #0]
 8004940:	8a7b      	ldrh	r3, [r7, #18]
 8004942:	897a      	ldrh	r2, [r7, #10]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	b299      	uxth	r1, r3
 8004948:	8abb      	ldrh	r3, [r7, #20]
 800494a:	893a      	ldrh	r2, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	b29a      	uxth	r2, r3
 8004950:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2301      	movs	r3, #1
 8004956:	47a0      	blx	r4
    display.putRectangle(x0 + x,      y0 - y,      1,  th ); // N->NE
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6858      	ldr	r0, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3338      	adds	r3, #56	; 0x38
 8004964:	681c      	ldr	r4, [r3, #0]
 8004966:	8a7a      	ldrh	r2, [r7, #18]
 8004968:	897b      	ldrh	r3, [r7, #10]
 800496a:	4413      	add	r3, r2
 800496c:	b299      	uxth	r1, r3
 800496e:	8abb      	ldrh	r3, [r7, #20]
 8004970:	893a      	ldrh	r2, [r7, #8]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	b29a      	uxth	r2, r3
 8004976:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2301      	movs	r3, #1
 800497c:	47a0      	blx	r4
    display.putRectangle(x0 + y-th+1, y0 - x,      th, 1  ); // E->NE
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6858      	ldr	r0, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3338      	adds	r3, #56	; 0x38
 800498a:	681c      	ldr	r4, [r3, #0]
 800498c:	8aba      	ldrh	r2, [r7, #20]
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	4413      	add	r3, r2
 8004992:	b29a      	uxth	r2, r3
 8004994:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	b29b      	uxth	r3, r3
 800499a:	3301      	adds	r3, #1
 800499c:	b299      	uxth	r1, r3
 800499e:	8a7b      	ldrh	r3, [r7, #18]
 80049a0:	893a      	ldrh	r2, [r7, #8]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049a8:	2501      	movs	r5, #1
 80049aa:	9500      	str	r5, [sp, #0]
 80049ac:	47a0      	blx	r4
    display.putRectangle(x0 + y-th+1, y0 + x,      th, 1  ); // E->SE
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6858      	ldr	r0, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	681c      	ldr	r4, [r3, #0]
 80049bc:	8aba      	ldrh	r2, [r7, #20]
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	4413      	add	r3, r2
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	b299      	uxth	r1, r3
 80049ce:	8a7a      	ldrh	r2, [r7, #18]
 80049d0:	893b      	ldrh	r3, [r7, #8]
 80049d2:	4413      	add	r3, r2
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049d8:	2501      	movs	r5, #1
 80049da:	9500      	str	r5, [sp, #0]
 80049dc:	47a0      	blx	r4
    display.putRectangle(x0 + x,      y0 + y-th+1, 1,  th ); // S->SE
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6858      	ldr	r0, [r3, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3338      	adds	r3, #56	; 0x38
 80049ea:	681c      	ldr	r4, [r3, #0]
 80049ec:	8a7a      	ldrh	r2, [r7, #18]
 80049ee:	897b      	ldrh	r3, [r7, #10]
 80049f0:	4413      	add	r3, r2
 80049f2:	b299      	uxth	r1, r3
 80049f4:	8aba      	ldrh	r2, [r7, #20]
 80049f6:	893b      	ldrh	r3, [r7, #8]
 80049f8:	4413      	add	r3, r2
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	47a0      	blx	r4
    display.putRectangle(x0 - x,      y0 + y-th+1, 1,  th ); // S->SW
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6858      	ldr	r0, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3338      	adds	r3, #56	; 0x38
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	8a7b      	ldrh	r3, [r7, #18]
 8004a1e:	897a      	ldrh	r2, [r7, #10]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	b299      	uxth	r1, r3
 8004a24:	8aba      	ldrh	r2, [r7, #20]
 8004a26:	893b      	ldrh	r3, [r7, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	47a0      	blx	r4
    display.putRectangle(x0 - y,      y0 + x,      th, 1  ); // W->SW
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6858      	ldr	r0, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3338      	adds	r3, #56	; 0x38
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	8abb      	ldrh	r3, [r7, #20]
 8004a4e:	897a      	ldrh	r2, [r7, #10]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b299      	uxth	r1, r3
 8004a54:	8a7a      	ldrh	r2, [r7, #18]
 8004a56:	893b      	ldrh	r3, [r7, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a5e:	2501      	movs	r5, #1
 8004a60:	9500      	str	r5, [sp, #0]
 8004a62:	47a0      	blx	r4
    display.putRectangle(x0 - y,      y0 - x,      th, 1  ); // W->NW
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6858      	ldr	r0, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3338      	adds	r3, #56	; 0x38
 8004a70:	681c      	ldr	r4, [r3, #0]
 8004a72:	8abb      	ldrh	r3, [r7, #20]
 8004a74:	897a      	ldrh	r2, [r7, #10]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	b299      	uxth	r1, r3
 8004a7a:	8a7b      	ldrh	r3, [r7, #18]
 8004a7c:	893a      	ldrh	r2, [r7, #8]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a84:	2501      	movs	r5, #1
 8004a86:	9500      	str	r5, [sp, #0]
 8004a88:	47a0      	blx	r4

    // Inner circle
    if (fi >= 0)
 8004a8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0c      	blt.n	8004aac <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x21c>
    {
      yi  -= 1;
 8004a92:	8b7b      	ldrh	r3, [r7, #26]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	837b      	strh	r3, [r7, #26]
      dyi += 2;
 8004a9a:	8bbb      	ldrh	r3, [r7, #28]
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	83bb      	strh	r3, [r7, #28]
      fi  += dyi;
 8004aa2:	8bfa      	ldrh	r2, [r7, #30]
 8004aa4:	8bbb      	ldrh	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	83fb      	strh	r3, [r7, #30]
    }
    fi += dx + 1;
 8004aac:	8a3a      	ldrh	r2, [r7, #16]
 8004aae:	8bfb      	ldrh	r3, [r7, #30]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	83fb      	strh	r3, [r7, #30]

    // Outer circle
    if (f >= 0)
 8004aba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	db0c      	blt.n	8004adc <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x24c>
    {
      y  -= 1;
 8004ac2:	8abb      	ldrh	r3, [r7, #20]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	82bb      	strh	r3, [r7, #20]
      dy += 2;
 8004aca:	8afb      	ldrh	r3, [r7, #22]
 8004acc:	3302      	adds	r3, #2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	82fb      	strh	r3, [r7, #22]
      f  += dy;
 8004ad2:	8b3a      	ldrh	r2, [r7, #24]
 8004ad4:	8afb      	ldrh	r3, [r7, #22]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	833b      	strh	r3, [r7, #24]
    }
    f += dx + 1;
 8004adc:	8a3a      	ldrh	r2, [r7, #16]
 8004ade:	8b3b      	ldrh	r3, [r7, #24]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	833b      	strh	r3, [r7, #24]

    // length of line from inner to outer circle
    if( yi<x)
 8004aea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	da06      	bge.n	8004b04 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x274>
      th = y - x + 1;
 8004af6:	8aba      	ldrh	r2, [r7, #20]
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	863b      	strh	r3, [r7, #48]	; 0x30
 8004b02:	e003      	b.n	8004b0c <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0x27c>
    else
      th = y - yi;
 8004b04:	8aba      	ldrh	r2, [r7, #20]
 8004b06:	8b7b      	ldrh	r3, [r7, #26]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	863b      	strh	r3, [r7, #48]	; 0x30
  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004b0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	827b      	strh	r3, [r7, #18]
 8004b18:	8a3b      	ldrh	r3, [r7, #16]
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	823b      	strh	r3, [r7, #16]
 8004b20:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004b24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	f77f af02 	ble.w	8004932 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEttttt+0xa2>
    }
}
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdb0      	pop	{r4, r5, r7, pc}

08004b34 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt>:
//
void ScreenGraphic::drawCircle( WORD x0,
                                WORD y0,
                                WORD r,
                                WORD color )
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b08b      	sub	sp, #44	; 0x2c
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	461a      	mov	r2, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	817b      	strh	r3, [r7, #10]
 8004b46:	460b      	mov	r3, r1
 8004b48:	813b      	strh	r3, [r7, #8]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  short f  = 1 - r;
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	f1c3 0301 	rsb	r3, r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	83fb      	strh	r3, [r7, #30]
  short dy = -2 * r;
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	03d2      	lsls	r2, r2, #15
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	83bb      	strh	r3, [r7, #28]
  short y  = r;
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	837b      	strh	r3, [r7, #26]

  display.setPaintColor( color );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3328      	adds	r3, #40	; 0x28
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4798      	blx	r3

  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004b7e:	2300      	movs	r3, #0
 8004b80:	833b      	strh	r3, [r7, #24]
 8004b82:	2302      	movs	r3, #2
 8004b84:	82fb      	strh	r3, [r7, #22]
 8004b86:	e075      	b.n	8004c74 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x140>
  {
    display.putRectangle ( x0+x, y0-y, 1, y+y );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6858      	ldr	r0, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3338      	adds	r3, #56	; 0x38
 8004b94:	681c      	ldr	r4, [r3, #0]
 8004b96:	8b3a      	ldrh	r2, [r7, #24]
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	b299      	uxth	r1, r3
 8004b9e:	8b7b      	ldrh	r3, [r7, #26]
 8004ba0:	893a      	ldrh	r2, [r7, #8]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	8b7b      	ldrh	r3, [r7, #26]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	2301      	movs	r3, #1
 8004bb0:	47a0      	blx	r4
    display.putRectangle ( x0-x, y0-y, 1, y+y );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6858      	ldr	r0, [r3, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3338      	adds	r3, #56	; 0x38
 8004bbe:	681c      	ldr	r4, [r3, #0]
 8004bc0:	8b3b      	ldrh	r3, [r7, #24]
 8004bc2:	897a      	ldrh	r2, [r7, #10]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	b299      	uxth	r1, r3
 8004bc8:	8b7b      	ldrh	r3, [r7, #26]
 8004bca:	893a      	ldrh	r2, [r7, #8]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	8b7b      	ldrh	r3, [r7, #26]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2301      	movs	r3, #1
 8004bda:	47a0      	blx	r4
    display.putRectangle ( x0+y, y0-x, 1, x+x );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6858      	ldr	r0, [r3, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3338      	adds	r3, #56	; 0x38
 8004be8:	681c      	ldr	r4, [r3, #0]
 8004bea:	8b7a      	ldrh	r2, [r7, #26]
 8004bec:	897b      	ldrh	r3, [r7, #10]
 8004bee:	4413      	add	r3, r2
 8004bf0:	b299      	uxth	r1, r3
 8004bf2:	8b3b      	ldrh	r3, [r7, #24]
 8004bf4:	893a      	ldrh	r2, [r7, #8]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	8b3b      	ldrh	r3, [r7, #24]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2301      	movs	r3, #1
 8004c04:	47a0      	blx	r4
    display.putRectangle ( x0-y, y0-x, 1, x+x );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6858      	ldr	r0, [r3, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3338      	adds	r3, #56	; 0x38
 8004c12:	681c      	ldr	r4, [r3, #0]
 8004c14:	8b7b      	ldrh	r3, [r7, #26]
 8004c16:	897a      	ldrh	r2, [r7, #10]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	b299      	uxth	r1, r3
 8004c1c:	8b3b      	ldrh	r3, [r7, #24]
 8004c1e:	893a      	ldrh	r2, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	8b3b      	ldrh	r3, [r7, #24]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	47a0      	blx	r4

    if (f >= 0)
 8004c30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db0c      	blt.n	8004c52 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x11e>
    {
      y  -= 1;
 8004c38:	8b7b      	ldrh	r3, [r7, #26]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	837b      	strh	r3, [r7, #26]
      dy += 2;
 8004c40:	8bbb      	ldrh	r3, [r7, #28]
 8004c42:	3302      	adds	r3, #2
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	83bb      	strh	r3, [r7, #28]
      f  += dy;
 8004c48:	8bfa      	ldrh	r2, [r7, #30]
 8004c4a:	8bbb      	ldrh	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	83fb      	strh	r3, [r7, #30]
    }
    f += dx + 1;
 8004c52:	8afa      	ldrh	r2, [r7, #22]
 8004c54:	8bfb      	ldrh	r3, [r7, #30]
 8004c56:	4413      	add	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	83fb      	strh	r3, [r7, #30]
  for( short x = 0, dx = 2; x <= y; x++, dx += 2 )
 8004c60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	833b      	strh	r3, [r7, #24]
 8004c6c:	8afb      	ldrh	r3, [r7, #22]
 8004c6e:	3302      	adds	r3, #2
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	82fb      	strh	r3, [r7, #22]
 8004c74:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004c78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	dd83      	ble.n	8004b88 <_ZN9EmbSysLib3Dev13ScreenGraphic10drawCircleEtttt+0x54>
  }
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd90      	pop	{r4, r7, pc}

08004c8a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>:
                              WORD y0,
                              WORD x1,
                              WORD y1,
                              WORD th,
                              WORD color )
{
 8004c8a:	b5b0      	push	{r4, r5, r7, lr}
 8004c8c:	b08e      	sub	sp, #56	; 0x38
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	4608      	mov	r0, r1
 8004c94:	4611      	mov	r1, r2
 8004c96:	461a      	mov	r2, r3
 8004c98:	4603      	mov	r3, r0
 8004c9a:	817b      	strh	r3, [r7, #10]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	813b      	strh	r3, [r7, #8]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80fb      	strh	r3, [r7, #6]
  long t;
  int  x;
  int  y;
  int  dx = (int)x1-x0;
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	623b      	str	r3, [r7, #32]
  int  dy = (int)y1-y0;
 8004cac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004cb0:	893b      	ldrh	r3, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	61fb      	str	r3, [r7, #28]

  if( dy == 0 ) // horizontal
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d12e      	bne.n	8004d1a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x90>
  {
    x0 = (x0 < x1) ? x0 : x1;
 8004cbc:	897a      	ldrh	r2, [r7, #10]
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d201      	bcs.n	8004cc8 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x3e>
 8004cc4:	897b      	ldrh	r3, [r7, #10]
 8004cc6:	e000      	b.n	8004cca <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x40>
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8004ccc:	893a      	ldrh	r2, [r7, #8]
 8004cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d201      	bcs.n	8004cda <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x50>
 8004cd6:	893b      	ldrh	r3, [r7, #8]
 8004cd8:	e001      	b.n	8004cde <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x54>
 8004cda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cde:	813b      	strh	r3, [r7, #8]
    drawRectangle( x0, y0-th/2, abs(dx)+1, th, color );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3324      	adds	r3, #36	; 0x24
 8004ce6:	681c      	ldr	r4, [r3, #0]
 8004ce8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	893a      	ldrh	r2, [r7, #8]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb8      	it	lt
 8004cfc:	425b      	neglt	r3, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	b298      	uxth	r0, r3
 8004d04:	8979      	ldrh	r1, [r7, #10]
 8004d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4603      	mov	r3, r0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	47a0      	blx	r4
      {
        drawPixel( x, y+i, color );
      }
    }
  }
}
 8004d18:	e0c4      	b.n	8004ea4 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
  else if( dx == 0 ) // vertikal
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d12f      	bne.n	8004d80 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xf6>
    x0 = (x0 < x1) ? x0 : x1;
 8004d20:	897a      	ldrh	r2, [r7, #10]
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d201      	bcs.n	8004d2c <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xa2>
 8004d28:	897b      	ldrh	r3, [r7, #10]
 8004d2a:	e000      	b.n	8004d2e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xa4>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	817b      	strh	r3, [r7, #10]
    y0 = (y0 < y1) ? y0 : y1;
 8004d30:	893a      	ldrh	r2, [r7, #8]
 8004d32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d201      	bcs.n	8004d3e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xb4>
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	e001      	b.n	8004d42 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0xb8>
 8004d3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d42:	813b      	strh	r3, [r7, #8]
    drawRectangle(x0-th/2, y0, th, abs(dy)+1, color );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3324      	adds	r3, #36	; 0x24
 8004d4a:	681c      	ldr	r4, [r3, #0]
 8004d4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	897a      	ldrh	r2, [r7, #10]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bfb8      	it	lt
 8004d60:	425b      	neglt	r3, r3
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3301      	adds	r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 8004d6c:	8938      	ldrh	r0, [r7, #8]
 8004d6e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004d72:	9201      	str	r2, [sp, #4]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	462b      	mov	r3, r5
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	47a0      	blx	r4
}
 8004d7e:	e091      	b.n	8004ea4 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
  else if( abs(dx) <= abs(dy) )
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004d86:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bfb8      	it	lt
 8004d90:	425b      	neglt	r3, r3
 8004d92:	429a      	cmp	r2, r3
 8004d94:	dc43      	bgt.n	8004e1e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x194>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bfb8      	it	lt
 8004d9c:	425b      	neglt	r3, r3
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da0:	e039      	b.n	8004e16 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x18c>
      x = x0 + t*dx/abs(dy)-th/2;    // x = x0+dx downto x0
 8004da2:	897a      	ldrh	r2, [r7, #10]
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	6a39      	ldr	r1, [r7, #32]
 8004da8:	fb03 f101 	mul.w	r1, r3, r1
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfb8      	it	lt
 8004db2:	425b      	neglt	r3, r3
 8004db4:	fb91 f3f3 	sdiv	r3, r1, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8004dbe:	0852      	lsrs	r2, r2, #1
 8004dc0:	b292      	uxth	r2, r2
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
      y = y0 + ( (dy>0) ? +t : -t ); // y = y0+dy downto y0
 8004dc6:	893a      	ldrh	r2, [r7, #8]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dc02      	bgt.n	8004dd4 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x14a>
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	425b      	negs	r3, r3
 8004dd2:	e000      	b.n	8004dd6 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x14c>
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	4413      	add	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]
      for( int i = th-1; i >= 0; i-- )
 8004dda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004dde:	3b01      	subs	r3, #1
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de2:	e012      	b.n	8004e0a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x180>
        drawPixel( x+i, y, color );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3320      	adds	r3, #32
 8004dea:	681c      	ldr	r4, [r3, #0]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	b299      	uxth	r1, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	47a0      	blx	r4
      for( int i = th-1; i >= 0; i-- )
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dae9      	bge.n	8004de4 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x15a>
    for( t = abs(dy); t >= 0; t-- )  // t = 1 downto 0
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	3b01      	subs	r3, #1
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dac2      	bge.n	8004da2 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x118>
}
 8004e1c:	e042      	b.n	8004ea4 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x21a>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfb8      	it	lt
 8004e24:	425b      	neglt	r3, r3
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e28:	e039      	b.n	8004e9e <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x214>
      x = x0 + ( (dx>0) ? +t : -t ); // x = x0+dx downto x0
 8004e2a:	897a      	ldrh	r2, [r7, #10]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dc02      	bgt.n	8004e38 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1ae>
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	425b      	negs	r3, r3
 8004e36:	e000      	b.n	8004e3a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1b0>
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	4413      	add	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
      y = y0 + t*dy/abs(dx)-th/2;    // y = y0+dy downto y0
 8004e3e:	893a      	ldrh	r2, [r7, #8]
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	69f9      	ldr	r1, [r7, #28]
 8004e44:	fb03 f101 	mul.w	r1, r3, r1
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfb8      	it	lt
 8004e4e:	425b      	neglt	r3, r3
 8004e50:	fb91 f3f3 	sdiv	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8004e5a:	0852      	lsrs	r2, r2, #1
 8004e5c:	b292      	uxth	r2, r2
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
      for( int i = th-1; i >= 0; i-- )
 8004e62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e66:	3b01      	subs	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6a:	e012      	b.n	8004e92 <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x208>
        drawPixel( x, y+i, color );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3320      	adds	r3, #32
 8004e72:	681c      	ldr	r4, [r3, #0]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	b299      	uxth	r1, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	47a0      	blx	r4
      for( int i = th-1; i >= 0; i-- )
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dae9      	bge.n	8004e6c <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1e2>
    for( t = abs(dx); t >= 0; t-- )  // t = 1 downto 0
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dac2      	bge.n	8004e2a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt+0x1a0>
}
 8004ea4:	bf00      	nop
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}

08004eac <_ZN9EmbSysLib3Dev13ScreenGraphic10drawBitmapEttRNS_2Hw6BitmapE>:

//-------------------------------------------------------------------
void ScreenGraphic::drawBitmap( WORD    x,
                                WORD    y,
                                Bitmap &bitmap )
{
 8004eac:	b5b0      	push	{r4, r5, r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	817b      	strh	r3, [r7, #10]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	813b      	strh	r3, [r7, #8]
  display.putBitmap( x, y, bitmap );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6858      	ldr	r0, [r3, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	333c      	adds	r3, #60	; 0x3c
 8004eca:	681c      	ldr	r4, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	893d      	ldrh	r5, [r7, #8]
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	9200      	str	r2, [sp, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	462a      	mov	r2, r5
 8004eda:	47a0      	blx	r4
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bdb0      	pop	{r4, r5, r7, pc}

08004ee4 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>:
//
// Pointer
//
//*******************************************************************
//-------------------------------------------------------------------
Pointer::Pointer( Touch &touchIn )
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

: touch( touchIn )
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE+0x3c>)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	605a      	str	r2, [r3, #4]

{
  data.flags = Data::NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	751a      	strb	r2, [r3, #20]
  data.posX  = 0;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	819a      	strh	r2, [r3, #12]
  data.posY  = 0;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	81da      	strh	r2, [r3, #14]
  data.delta = 0;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
}
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	08009100 	.word	0x08009100

08004f24 <_ZN9EmbSysLib3Dev7Pointer3getEv>:

//-------------------------------------------------------------------
Pointer::Data Pointer::get( void )
{
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  touch.update();
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4798      	blx	r3

  int x = RANGE( (short)touch.getPosX(), (short)0, (short)0x7FFF );
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	b21b      	sxth	r3, r3
 8004f54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fdaa 	bl	8005ab4 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>
 8004f60:	4603      	mov	r3, r0
 8004f62:	61fb      	str	r3, [r7, #28]
  int y = RANGE( (short)touch.getPosY(), (short)0, (short)0x7FFF );
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4610      	mov	r0, r2
 8004f74:	4798      	blx	r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	b21b      	sxth	r3, r3
 8004f7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fd97 	bl	8005ab4 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>
 8004f86:	4603      	mov	r3, r0
 8004f88:	61bb      	str	r3, [r7, #24]
  BYTE isTouched = touch.isTouched();
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

  if( isTouched && !isTouchedPrev )
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d018      	beq.n	8004fd8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xb4>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	7a1b      	ldrb	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d114      	bne.n	8004fd8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xb4>
  {
    data.flags = Data::CTRL_DWN;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	611a      	str	r2, [r3, #16]
    posXprev   = x;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	619a      	str	r2, [r3, #24]
    posYprev   = y;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	61da      	str	r2, [r3, #28]
 8004fd6:	e078      	b.n	80050ca <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
  else if( !isTouched  && isTouchedPrev )
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d112      	bne.n	8005004 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xe0>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	7a1b      	ldrb	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00e      	beq.n	8005004 <_ZN9EmbSysLib3Dev7Pointer3getEv+0xe0>
  {
    data.flags = Data::CTRL_UP;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	e062      	b.n	80050ca <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
  else if( isTouched  && isTouchedPrev )
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d057      	beq.n	80050ba <_ZN9EmbSysLib3Dev7Pointer3getEv+0x196>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	7a1b      	ldrb	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d053      	beq.n	80050ba <_ZN9EmbSysLib3Dev7Pointer3getEv+0x196>
  {
    data.flags = Data::PRESSED;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	751a      	strb	r2, [r3, #20]
    data.posX  = x;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	b29a      	uxth	r2, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	819a      	strh	r2, [r3, #12]
    data.posY  = y;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	b29a      	uxth	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	81da      	strh	r2, [r3, #14]
    data.delta = 0;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]

    if( x != posXprev || y != posYprev )
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	429a      	cmp	r2, r3
 8005036:	d104      	bne.n	8005042 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x11e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	429a      	cmp	r2, r3
 8005040:	d042      	beq.n	80050c8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
    {
      if( abs(posXprev-x) > 15 || abs(posYprev-y) > 15 )
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	425b      	neglt	r3, r3
 8005050:	2b0f      	cmp	r3, #15
 8005052:	dc08      	bgt.n	8005066 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x142>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bfb8      	it	lt
 8005060:	425b      	neglt	r3, r3
 8005062:	2b0f      	cmp	r3, #15
 8005064:	dd30      	ble.n	80050c8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
      {
        int deltaX = x-posXprev;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	613b      	str	r3, [r7, #16]
        int deltaY = y-posYprev;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	60fb      	str	r3, [r7, #12]
        if( abs(deltaX) > abs(deltaY) )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005080:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfb8      	it	lt
 800508a:	425b      	neglt	r3, r3
 800508c:	429a      	cmp	r2, r3
 800508e:	dd06      	ble.n	800509e <_ZN9EmbSysLib3Dev7Pointer3getEv+0x17a>
        {
          data.flags = Data::MOVE_X;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2203      	movs	r2, #3
 8005094:	751a      	strb	r2, [r3, #20]
          data.delta = deltaX;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	611a      	str	r2, [r3, #16]
 800509c:	e006      	b.n	80050ac <_ZN9EmbSysLib3Dev7Pointer3getEv+0x188>
        }
        else
        {
          data.flags = Data::MOVE_Y;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2205      	movs	r2, #5
 80050a2:	751a      	strb	r2, [r3, #20]
          data.delta = -deltaY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	425a      	negs	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	611a      	str	r2, [r3, #16]
        }
        posXprev = x;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	619a      	str	r2, [r3, #24]
        posYprev = y;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	61da      	str	r2, [r3, #28]
      }
    }
  }
 80050b8:	e006      	b.n	80050c8 <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a4>
  else
  {
    data.flags = Data::NONE;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2200      	movs	r2, #0
 80050be:	751a      	strb	r2, [r3, #20]
    data.delta = 0;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]
 80050c6:	e000      	b.n	80050ca <_ZN9EmbSysLib3Dev7Pointer3getEv+0x1a6>
  }
 80050c8:	bf00      	nop
  }
  isTouchedPrev = isTouched ;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	7dfa      	ldrb	r2, [r7, #23]
 80050ce:	721a      	strb	r2, [r3, #8]
  return( data );
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	4614      	mov	r4, r2
 80050d6:	330c      	adds	r3, #12
 80050d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	3724      	adds	r7, #36	; 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd90      	pop	{r4, r7, pc}

080050e8 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>:
//
// Terminal
//
//*******************************************************************
//-------------------------------------------------------------------
Terminal::Terminal( Uart       &uart,
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	460b      	mov	r3, r1
 80050f8:	80fb      	strh	r3, [r7, #6]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80bb      	strh	r3, [r7, #4]
                    WORD        inBufSize,
                    WORD        outBufSize,
                    const char *key,
                    const char *eos )
: uart( uart )
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_+0x90>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	605a      	str	r2, [r3, #4]

{
  this->inBufSize  = inBufSize;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	811a      	strh	r2, [r3, #8]
  this->outBufSize = outBufSize;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88ba      	ldrh	r2, [r7, #4]
 8005114:	815a      	strh	r2, [r3, #10]
  this->key        = key;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	60da      	str	r2, [r3, #12]
  this->eos        = eos;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	611a      	str	r2, [r3, #16]
  strIn            = new char[ inBufSize  + 1 ];
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	3301      	adds	r3, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f003 f9cc 	bl	80084c4 <_Znaj>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	615a      	str	r2, [r3, #20]
  strOut           = new char[ outBufSize + 1 ];
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	3301      	adds	r3, #1
 8005138:	4618      	mov	r0, r3
 800513a:	f003 f9c3 	bl	80084c4 <_Znaj>
 800513e:	4603      	mov	r3, r0
 8005140:	461a      	mov	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	619a      	str	r2, [r3, #24]
  idx              = 0;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
  escape           = 0;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	775a      	strb	r2, [r3, #29]
  last             = 0;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	779a      	strb	r2, [r3, #30]
  pending          = 0;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	849a      	strh	r2, [r3, #36]	; 0x24
  ctrl             = 0;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	841a      	strh	r2, [r3, #32]
  num              = 0;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	080090e8 	.word	0x080090e8

0800517c <_ZN9EmbSysLib3Dev8Terminal6printfEPKcz>:
  return( 0 );
}

//-------------------------------------------------------------------
void Terminal::printf( const char *format, ... )
{
 800517c:	b40e      	push	{r1, r2, r3}
 800517e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  va_list argzeiger;

  va_start ( argzeiger, format );
 8005186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518a:	60fb      	str	r3, [r7, #12]
  vsnprintf( strOut, outBufSize, format, argzeiger );
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6998      	ldr	r0, [r3, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	895b      	ldrh	r3, [r3, #10]
 8005194:	4619      	mov	r1, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	f003 fa85 	bl	80086a8 <vsniprintf>
  va_end   ( argzeiger );

  // Set output
  uart.set( (BYTE*)strOut, strlen(strOut) );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685d      	ldr	r5, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3304      	adds	r3, #4
 80051aa:	681c      	ldr	r4, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699e      	ldr	r6, [r3, #24]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb f871 	bl	800029c <strlen>
 80051ba:	4603      	mov	r3, r0
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47a0      	blx	r4
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80051d0:	b003      	add	sp, #12
 80051d2:	4770      	bx	lr

080051d4 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>:
    //*******************************************************************
    /*!
    \class Task
    \brief Base class for a Task
    */
    class Task : public Timer::Task
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb f8ea 	bl	80003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 80051e4:	4a03      	ldr	r2, [pc, #12]	; (80051f4 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev+0x20>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	080090f4 	.word	0x080090f4

080051f8 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>:
//
// DigitalButton
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalButton::DigitalButton( Digital     &digital,
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	807b      	strh	r3, [r7, #2]
                              TaskManager &taskManager,
                              WORD         timeDebounce,
                              WORD         timeLong )
: digital     ( digital )
, timeDebounce( (DWORD)timeDebounce*1000/taskManager.getCycleTime() )
, timeLong    ( (DWORD)timeLong    *1000/taskManager.getCycleTime() )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff ffe3 	bl	80051d4 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 800520e:	4a20      	ldr	r2, [pc, #128]	; (8005290 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt+0x98>)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]
: digital     ( digital )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]
, timeDebounce( (DWORD)timeDebounce*1000/taskManager.getCycleTime() )
 800521a:	887b      	ldrh	r3, [r7, #2]
 800521c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005220:	fb02 f403 	mul.w	r4, r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
 8005230:	4603      	mov	r3, r0
 8005232:	fbb4 f3f3 	udiv	r3, r4, r3
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	819a      	strh	r2, [r3, #12]
, timeLong    ( (DWORD)timeLong    *1000/taskManager.getCycleTime() )
 800523c:	8c3b      	ldrh	r3, [r7, #32]
 800523e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005242:	fb02 f403 	mul.w	r4, r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
 8005252:	4603      	mov	r3, r0
 8005254:	fbb4 f3f3 	udiv	r3, r4, r3
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	81da      	strh	r2, [r3, #14]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3316      	adds	r3, #22
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fc48 	bl	8005afa <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEC1ES4_>
{
  timeOut = 0;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	821a      	strh	r2, [r3, #16]
  time    = 0;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	825a      	strh	r2, [r3, #18]
  taskManager.add(this);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3304      	adds	r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4611      	mov	r1, r2
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
}
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}
 8005290:	080090dc 	.word	0x080090dc

08005294 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv>:

//-------------------------------------------------------------------
void DigitalButton::update( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  // debounce: get new value after timeOut only
  if( timeOut == 0 )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8a1b      	ldrh	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d117      	bne.n	80052d4 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x40>
  {
    bool in = digital.get();
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4610      	mov	r0, r2
 80052b4:	4798      	blx	r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]
    if( in != value )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7d1b      	ldrb	r3, [r3, #20]
 80052be:	7bfa      	ldrb	r2, [r7, #15]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d00d      	beq.n	80052e0 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x4c>
    {
      value   = in;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	751a      	strb	r2, [r3, #20]
      timeOut = timeDebounce;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	899a      	ldrh	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	821a      	strh	r2, [r3, #16]
 80052d2:	e005      	b.n	80052e0 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x4c>
    }
  }
  else
  {
    timeOut--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8a1b      	ldrh	r3, [r3, #16]
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	821a      	strh	r2, [r3, #16]
  }

  // Edge detection
  if( value != valuePre )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7d1a      	ldrb	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7d5b      	ldrb	r3, [r3, #21]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d025      	beq.n	8005338 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xa4>
  {
    if( value ) // rising edge
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7d1b      	ldrb	r3, [r3, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x7c>
    {
      time = 0;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	825a      	strh	r2, [r3, #18]
      action = ACTIVATED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3316      	adds	r3, #22
 80052fe:	2201      	movs	r2, #1
 8005300:	733a      	strb	r2, [r7, #12]
 8005302:	f107 020c 	add.w	r2, r7, #12
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fc09 	bl	8005b20 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
 800530e:	e00f      	b.n	8005330 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x9c>
    }
    else // falling edge
    {
      if( time < timeLong )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8a5a      	ldrh	r2, [r3, #18]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	89db      	ldrh	r3, [r3, #14]
 8005318:	429a      	cmp	r2, r3
 800531a:	d209      	bcs.n	8005330 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0x9c>
      {
        action = SHORT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3316      	adds	r3, #22
 8005320:	2202      	movs	r2, #2
 8005322:	737a      	strb	r2, [r7, #13]
 8005324:	f107 020d 	add.w	r2, r7, #13
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fbf8 	bl	8005b20 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
      }
    }
    valuePre = value;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	7d1a      	ldrb	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	755a      	strb	r2, [r3, #21]
  }

  // time measurement
  if( value )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7d1b      	ldrb	r3, [r3, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01b      	beq.n	8005378 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
  {
    if( time < timeLong )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8a5a      	ldrh	r2, [r3, #18]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	89db      	ldrh	r3, [r3, #14]
 8005348:	429a      	cmp	r2, r3
 800534a:	d215      	bcs.n	8005378 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
    {
      time++;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8a5b      	ldrh	r3, [r3, #18]
 8005350:	3301      	adds	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	825a      	strh	r2, [r3, #18]
      if( time == timeLong )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8a5a      	ldrh	r2, [r3, #18]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	89db      	ldrh	r3, [r3, #14]
 8005360:	429a      	cmp	r2, r3
 8005362:	d109      	bne.n	8005378 <_ZN9EmbSysLib4Ctrl13DigitalButton6updateEv+0xe4>
      {
        action = LONG;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3316      	adds	r3, #22
 8005368:	2203      	movs	r2, #3
 800536a:	73ba      	strb	r2, [r7, #14]
 800536c:	f107 020e 	add.w	r2, r7, #14
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fbd4 	bl	8005b20 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>
      }
    }
  }
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalEncoder
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoder::DigitalEncoder( Digital *btnCtrlIn,
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
                          TaskManager    &taskManager )

: btnCtrl( btnCtrlIn )
, fifo   ( 20 )
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff ff20 	bl	80051d4 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 8005394:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE+0x48>)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	601a      	str	r2, [r3, #0]
: btnCtrl( btnCtrlIn )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]
, fifo   ( 20 )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	330c      	adds	r3, #12
 80053a4:	2114      	movs	r1, #20
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fbc9 	bl	8005b3e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>

{
  taskManager.add(this);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3304      	adds	r3, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4611      	mov	r1, r2
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
}
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	080090c8 	.word	0x080090c8

080053cc <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv>:
  }
}

//-------------------------------------------------------------------
void DigitalEncoder::update( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  if( !fifo.isFull() )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	330c      	adds	r3, #12
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fbdb 	bl	8005b94 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 80053de:	4603      	mov	r3, r0
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d021      	beq.n	800542e <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
  {
    switch( getIncrement() )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d002      	beq.n	8005402 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x36>
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d00b      	beq.n	8005418 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x4c>
    {
      case LEFT:  fifo << LEFT;    break;
      case RIGHT: fifo << RIGHT;   break;
      default:                     break;
 8005400:	e015      	b.n	800542e <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case LEFT:  fifo << LEFT;    break;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	330c      	adds	r3, #12
 8005406:	2201      	movs	r2, #1
 8005408:	733a      	strb	r2, [r7, #12]
 800540a:	f107 020c 	add.w	r2, r7, #12
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fbd5 	bl	8005bc0 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005416:	e00a      	b.n	800542e <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x62>
      case RIGHT: fifo << RIGHT;   break;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	330c      	adds	r3, #12
 800541c:	2202      	movs	r2, #2
 800541e:	737a      	strb	r2, [r7, #13]
 8005420:	f107 020d 	add.w	r2, r7, #13
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fbca 	bl	8005bc0 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 800542c:	bf00      	nop
    }
  }

  if( !fifo.isFull() )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	330c      	adds	r3, #12
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fbae 	bl	8005b94 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>
 8005438:	4603      	mov	r3, r0
 800543a:	f083 0301 	eor.w	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d021      	beq.n	8005488 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
  {
    switch( getCtrl() )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
 8005450:	4603      	mov	r3, r0
 8005452:	2b03      	cmp	r3, #3
 8005454:	d002      	beq.n	800545c <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0x90>
 8005456:	2b04      	cmp	r3, #4
 8005458:	d00b      	beq.n	8005472 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xa6>
    {
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
      case CTRL_UP:   fifo << CTRL_UP;   break;
      default:                           break;
 800545a:	e015      	b.n	8005488 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_DWN:  fifo << CTRL_DWN;  break;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	330c      	adds	r3, #12
 8005460:	2203      	movs	r2, #3
 8005462:	73ba      	strb	r2, [r7, #14]
 8005464:	f107 020e 	add.w	r2, r7, #14
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fba8 	bl	8005bc0 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005470:	e00a      	b.n	8005488 <_ZN9EmbSysLib4Ctrl14DigitalEncoder6updateEv+0xbc>
      case CTRL_UP:   fifo << CTRL_UP;   break;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	330c      	adds	r3, #12
 8005476:	2204      	movs	r2, #4
 8005478:	73fa      	strb	r2, [r7, #15]
 800547a:	f107 020f 	add.w	r2, r7, #15
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fb9d 	bl	8005bc0 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>
 8005486:	bf00      	nop
    }
  }
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoder::getCtrl( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  if( btnCtrl )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d012      	beq.n	80054c6 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
  {
    switch( btnCtrl->getEvent() )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3318      	adds	r3, #24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4610      	mov	r0, r2
 80054b0:	4798      	blx	r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d002      	beq.n	80054be <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x2e>
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d002      	beq.n	80054c2 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x32>
    {
      case Digital::ACTIVATED: return( CTRL_DWN );
      case Digital::RELEASED:  return( CTRL_UP );
      default:                 break;
 80054bc:	e003      	b.n	80054c6 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x36>
      case Digital::ACTIVATED: return( CTRL_DWN );
 80054be:	2303      	movs	r3, #3
 80054c0:	e002      	b.n	80054c8 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
      case Digital::RELEASED:  return( CTRL_UP );
 80054c2:	2304      	movs	r3, #4
 80054c4:	e000      	b.n	80054c8 <_ZN9EmbSysLib4Ctrl14DigitalEncoder7getCtrlEv+0x38>
    }
  }
  return( NONE );
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>:
//
// DigitalEncoderJoystick
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalEncoderJoystick::DigitalEncoderJoystick( Digital     *btnLeft,
 80054d0:	b590      	push	{r4, r7, lr}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
                                                TaskManager &taskManager,
                                                WORD         repeatTime )
: DigitalEncoder( btnCtrl, taskManager )
, timerStart    ( 1000UL*repeatTime/taskManager.getCycleTime() )
, btnLeft       ( btnLeft )
, btnRight      ( btnRight )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ff4b 	bl	8005380 <_ZN9EmbSysLib4Ctrl14DigitalEncoderC1EPNS_3Dev7DigitalERNS2_11TaskManagerE>
 80054ea:	4a11      	ldr	r2, [pc, #68]	; (8005530 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt+0x60>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]
, timerStart    ( 1000UL*repeatTime/taskManager.getCycleTime() )
 80054f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054f6:	fb02 f403 	mul.w	r4, r2, r3
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a38      	ldr	r0, [r7, #32]
 8005504:	4798      	blx	r3
 8005506:	4603      	mov	r3, r0
 8005508:	fbb4 f3f3 	udiv	r3, r4, r3
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	831a      	strh	r2, [r3, #24]
, btnLeft       ( btnLeft )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	61da      	str	r2, [r3, #28]
, btnRight      ( btnRight )
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]
{
  timerCnt = timerStart;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8b1a      	ldrh	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	080090b4 	.word	0x080090b4

08005534 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv>:

//-------------------------------------------------------------------
DigitalEncoder::Event DigitalEncoderJoystick::getIncrement( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if( timerCnt )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x1c>
  {
    timerCnt--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	849a      	strh	r2, [r3, #36]	; 0x24
  }

  if( btnLeft )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02a      	beq.n	80055ae <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x7a>
  {
    if(    btnLeft->getEvent() == Digital::ACTIVATED
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3318      	adds	r3, #24
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4610      	mov	r0, r2
 8005568:	4798      	blx	r3
 800556a:	4603      	mov	r3, r0
        || (!timerCnt && timerStart && btnLeft->get()) )
 800556c:	2b01      	cmp	r3, #1
 800556e:	d013      	beq.n	8005598 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x64>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d111      	bne.n	800559c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8b1b      	ldrh	r3, [r3, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4610      	mov	r0, r2
 8005590:	4798      	blx	r3
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x68>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x6a>
 800559c:	2300      	movs	r3, #0
    if(    btnLeft->getEvent() == Digital::ACTIVATED
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0x7a>
    {
      timerCnt = timerStart;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8b1a      	ldrh	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	849a      	strh	r2, [r3, #36]	; 0x24
      return( LEFT );
 80055aa:	2301      	movs	r3, #1
 80055ac:	e02f      	b.n	800560e <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xda>
    }
  }

  if( btnRight )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02a      	beq.n	800560c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xd8>
  {
    if(   btnRight->getEvent() == Digital::ACTIVATED
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3318      	adds	r3, #24
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4610      	mov	r0, r2
 80055c6:	4798      	blx	r3
 80055c8:	4603      	mov	r3, r0
       || (!timerCnt && timerStart && btnRight->get()) )
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d013      	beq.n	80055f6 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d111      	bne.n	80055fa <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8b1b      	ldrh	r3, [r3, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4610      	mov	r0, r2
 80055ee:	4798      	blx	r3
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc6>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xc8>
 80055fa:	2300      	movs	r3, #0
    if(   btnRight->getEvent() == Digital::ACTIVATED
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xd8>
    {
      timerCnt = timerStart;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8b1a      	ldrh	r2, [r3, #24]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	849a      	strh	r2, [r3, #36]	; 0x24
      return( RIGHT );
 8005608:	2302      	movs	r3, #2
 800560a:	e000      	b.n	800560e <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystick12getIncrementEv+0xda>
    }
  }
  return( NONE );
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>:
//
// DigitalIndicator
//
//*******************************************************************
//-------------------------------------------------------------------
DigitalIndicator::DigitalIndicator( Digital     &digital,
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
                                    TaskManager &taskManager )
: digital( digital )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fdd4 	bl	80051d4 <_ZN9EmbSysLib3Dev11TaskManager4TaskC1Ev>
 800562c:	4a0f      	ldr	r2, [pc, #60]	; (800566c <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE+0x54>)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
{
  clr();
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f861 	bl	8005700 <_ZN9EmbSysLib4Ctrl16DigitalIndicator3clrEv>
  cycleTime = taskManager.getCycleTime();
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
 800564a:	4602      	mov	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	60da      	str	r2, [r3, #12]
  taskManager.add(this);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3304      	adds	r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4611      	mov	r1, r2
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
}
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	080090a0 	.word	0x080090a0

08005670 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv>:

//-------------------------------------------------------------------
void DigitalIndicator::update( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  if( runUpdate )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7ddb      	ldrb	r3, [r3, #23]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d03b      	beq.n	80056f8 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
  {
    if( t >= maximum )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8a9a      	ldrh	r2, [r3, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8a5b      	ldrh	r3, [r3, #18]
 8005688:	429a      	cmp	r2, r3
 800568a:	d312      	bcc.n	80056b2 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x42>
    {
      if( repeat && maximum )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7d9b      	ldrb	r3, [r3, #22]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x34>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8a5b      	ldrh	r3, [r3, #18]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x34>
      {
        t = 0;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	829a      	strh	r2, [r3, #20]
        digital.clr();
      }
      t++;
    }
  }
}
 80056a2:	e029      	b.n	80056f8 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
        clr();
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3304      	adds	r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
}
 80056b0:	e022      	b.n	80056f8 <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x88>
      if( t == 0 )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8a9b      	ldrh	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x5e>
        digital.set();
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4610      	mov	r0, r2
 80056ca:	4798      	blx	r3
 80056cc:	e00e      	b.n	80056ec <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x7c>
      else if( t >= limit )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8a9a      	ldrh	r2, [r3, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8a1b      	ldrh	r3, [r3, #16]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d308      	bcc.n	80056ec <_ZN9EmbSysLib4Ctrl16DigitalIndicator6updateEv+0x7c>
        digital.clr();
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
      t++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8a9b      	ldrh	r3, [r3, #20]
 80056f0:	3301      	adds	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	829a      	strh	r2, [r3, #20]
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_ZN9EmbSysLib4Ctrl16DigitalIndicator3clrEv>:

//-------------------------------------------------------------------
void DigitalIndicator::clr( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  runUpdate = false;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	75da      	strb	r2, [r3, #23]
  maximum   = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	825a      	strh	r2, [r3, #18]
  repeat    = false;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	759a      	strb	r2, [r3, #22]
  t         = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	829a      	strh	r2, [r3, #20]
  digital.clr();
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <_ZN9EmbSysLib4Ctrl16DigitalIndicator7triggerEt>:

//-------------------------------------------------------------------
void DigitalIndicator::trigger( WORD time )
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	807b      	strh	r3, [r7, #2]
  runUpdate = false;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	75da      	strb	r2, [r3, #23]
  repeat    = false;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	759a      	strb	r2, [r3, #22]
  maximum   = ((DWORD)time*1000)/cycleTime;
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005758:	fb03 f202 	mul.w	r2, r3, r2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	825a      	strh	r2, [r3, #18]
  limit     = maximum;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8a5a      	ldrh	r2, [r3, #18]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	821a      	strh	r2, [r3, #16]
  t         = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	829a      	strh	r2, [r3, #20]
  runUpdate = true;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	75da      	strb	r2, [r3, #23]
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_>:
      public:
        //-----------------------------------------------------------
        /*! Instatiate a Sequence::Item
            \param sequence If not zero, the item is added to \a Sequence
        */
        Item( Sequence<T> *sequence = 0 )
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
        {
          PtrNext = 0;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
          if( sequence )
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4ItemC1EPS5_+0x22>
          {
            sequence->add( (T*)this );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b04      	subs	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	6838      	ldr	r0, [r7, #0]
 80057a8:	f000 f859 	bl	800585e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>
          }
        }
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_>:
//*******************************************************************
/*! Compares two values and returns the minimum
    \param  x,y
    \return minimum of (x,y)
*/
template <class T> inline T MIN( T x, T y )
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	4603      	mov	r3, r0
 80057be:	460a      	mov	r2, r1
 80057c0:	80fb      	strh	r3, [r7, #6]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80bb      	strh	r3, [r7, #4]
{
  if( x < y )
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	88bb      	ldrh	r3, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d201      	bcs.n	80057d2 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_+0x1c>
    return( x );
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	e000      	b.n	80057d4 <_ZN9EmbSysLib3Std3MINItEET_S2_S2_+0x1e>
  else
    return( y );
 80057d2:	88bb      	ldrh	r3, [r7, #4]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_>:
    \return
            - input value x, if min < x < max
            - min, if x < min
            - max, if x > max
*/
template <class T> inline T RANGE( T x, T min, T max )
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	80fb      	strh	r3, [r7, #6]
 80057ea:	460b      	mov	r3, r1
 80057ec:	80bb      	strh	r3, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	807b      	strh	r3, [r7, #2]
{
  if( x > max )
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d901      	bls.n	80057fe <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x1e>
    return( max );
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	e006      	b.n	800580c <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2c>
  if( x < min )
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	88bb      	ldrh	r3, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d201      	bcs.n	800580a <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2a>
    return( min );
 8005806:	88bb      	ldrh	r3, [r7, #4]
 8005808:	e000      	b.n	800580c <_ZN9EmbSysLib3Std5RANGEItEET_S2_S2_S2_+0x2c>
  return( x );
 800580a:	88fb      	ldrh	r3, [r7, #6]
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_>:
template <class T> inline T MIN( T x, T y )
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	460a      	mov	r2, r1
 8005822:	71fb      	strb	r3, [r7, #7]
 8005824:	4613      	mov	r3, r2
 8005826:	71bb      	strb	r3, [r7, #6]
  if( x < y )
 8005828:	79fa      	ldrb	r2, [r7, #7]
 800582a:	79bb      	ldrb	r3, [r7, #6]
 800582c:	429a      	cmp	r2, r3
 800582e:	d201      	bcs.n	8005834 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_+0x1c>
    return( x );
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	e000      	b.n	8005836 <_ZN9EmbSysLib3Std3MINIhEET_S2_S2_+0x1e>
    return( y );
 8005834:	79bb      	ldrb	r3, [r7, #6]
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEEC1Ev>:

  public:
    //---------------------------------------------------------------
    /*! Instantiate an empty list
    */
    Sequence( void )
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
    {
      PtrFirst = 0;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
    }
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_>:
        \param itemPtr Pointer to the item
        \return
                - true: Item added
                - false: Item not added, because it is already in list
    */
    BYTE add( T *itemPtr )
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
    {
      T *ptr;

      // Is itemPtr still in list?
      ptr = PtrFirst;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]

      while( ptr )
 800586e:	e00c      	b.n	800588a <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x2c>
      {
        if( ptr == itemPtr )
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d101      	bne.n	800587c <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x1e>
        {
          return( false );
 8005878:	2300      	movs	r3, #0
 800587a:	e016      	b.n	80058aa <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4c>
        }
        if(ptr->PtrNext) // Does curent object have a next object?
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d006      	beq.n	8005892 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x34>
        {
          ptr = ptr->PtrNext;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	60fb      	str	r3, [r7, #12]
      while( ptr )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1ef      	bne.n	8005870 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x12>
 8005890:	e000      	b.n	8005894 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x36>
        }
        else
        {
          break;
 8005892:	bf00      	nop
        }
      }

      // Add a new object,
      // ptr may referes to last object in the list
      if( ptr ) // append new object to last object in list
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x44>
      {
        ptr->PtrNext = itemPtr;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	e002      	b.n	80058a8 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE3addEPS4_+0x4a>
      }
      else // insert first object into list
      {
        PtrFirst = itemPtr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]
      }
      return( true );
 80058a8:	2301      	movs	r3, #1
    }
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE8getFirstEv>:
    //---------------------------------------------------------------
    /*! Get the pointer to the first item in the list
        \return Pointer to the first item\n
                Zero, if list is empty
    */
    T* getFirst( void )
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
    {
      return( PtrFirst );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
    }
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <_ZN9EmbSysLib3Std8SequenceINS_2Hw5Timer4TaskEE4Item7getNextEv>:
        T *getNext( void )
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
          return( PtrNext );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
        }
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_ZN9EmbSysLib3Std4FifoIhEC1Et>:
  public:
    //---------------------------------------------------------------
    /*! Create a FIFO and allocate it's memory
        \param sizeIn FIFO size (max number of objects stored in FIFO), default = 3
    */
    Fifo( WORD sizeIn = 3 )
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	807b      	strh	r3, [r7, #2]
    {
      in   = 0;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	809a      	strh	r2, [r3, #4]
      out  = 0;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	895b      	ldrh	r3, [r3, #10]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x40>
      {
        speicher = new T[size];
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	895b      	ldrh	r3, [r3, #10]
 8005916:	4618      	mov	r0, r3
 8005918:	f002 fdd4 	bl	80084c4 <_Znaj>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e005      	b.n	8005932 <_ZN9EmbSysLib3Std4FifoIhEC1Et+0x4c>
      }
      else
      {
        size     = 0;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
      }
    }
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <_ZN9EmbSysLib3Std4FifoIhE7getSizeEv>:

    //---------------------------------------------------------------
    /*! Get FIFO size
        \return FIFO size
    */
    WORD getSize( void )
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
    {
      return( size );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	895b      	ldrh	r3, [r3, #10]
    }
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <_ZN9EmbSysLib3Std4FifoIhElsERKh>:
        \param ref Reference to an object
        \return
                - true, if succeeded
                - false, if FIFO is full, object not written
    */
    bool operator<<( const T &ref )
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 8005962:	f7fa febd 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	891a      	ldrh	r2, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	895b      	ldrh	r3, [r3, #10]
 800596e:	429a      	cmp	r2, r3
 8005970:	d21f      	bcs.n	80059b2 <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x5e>
      {
        speicher[in] = ref;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	8892      	ldrh	r2, [r2, #4]
 800597a:	4413      	add	r3, r2
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	889b      	ldrh	r3, [r3, #4]
 8005986:	461a      	mov	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	895b      	ldrh	r3, [r3, #10]
 800598c:	3b01      	subs	r3, #1
 800598e:	429a      	cmp	r2, r3
 8005990:	da04      	bge.n	800599c <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x48>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	889b      	ldrh	r3, [r3, #4]
 8005996:	3301      	adds	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	e000      	b.n	800599e <_ZN9EmbSysLib3Std4FifoIhElsERKh+0x4a>
 800599c:	2200      	movs	r2, #0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	809a      	strh	r2, [r3, #4]
        anz++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	891b      	ldrh	r3, [r3, #8]
 80059a6:	3301      	adds	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	811a      	strh	r2, [r3, #8]
        ret = true;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 80059b2:	f7fa fea7 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
    }
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <_ZN9EmbSysLib3Std4FifoIhE7isEmptyEv>:
    bool isEmpty( void )
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 80059c8:	f7fa fe8a 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz == 0 );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	891b      	ldrh	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf0c      	ite	eq
 80059d4:	2301      	moveq	r3, #1
 80059d6:	2300      	movne	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 80059da:	f7fa fe93 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 80059de:	7bfb      	ldrb	r3, [r7, #15]
    }
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_ZN9EmbSysLib3Std4FifoIhErsERh>:
        \param ref Referenc to an object
        \return
                - true, if succeeded
                - false, if FIFO is empty, no object read
    */
    bool operator>>( T &ref )
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
    {
      bool ret = false;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]

      Hw::System::disableInterrupt();
 80059f6:	f7fa fe73 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz != 0 )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	891b      	ldrh	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01f      	beq.n	8005a42 <_ZN9EmbSysLib3Std4FifoIhErsERh+0x5a>
      {
        ref = speicher[out];
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	88d2      	ldrh	r2, [r2, #6]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
        out = (out < size-1) ? out+1 : 0;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	88db      	ldrh	r3, [r3, #6]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	895b      	ldrh	r3, [r3, #10]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	da04      	bge.n	8005a2c <_ZN9EmbSysLib3Std4FifoIhErsERh+0x44>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	88db      	ldrh	r3, [r3, #6]
 8005a26:	3301      	adds	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	e000      	b.n	8005a2e <_ZN9EmbSysLib3Std4FifoIhErsERh+0x46>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	80da      	strh	r2, [r3, #6]
        anz--;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	891b      	ldrh	r3, [r3, #8]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
      }
      Hw::System::enableInterrupt();
 8005a42:	f7fa fe5f 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>

      return( ret );
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN9EmbSysLib3Std4FifoIhE6isFullEv>:
    bool isFull( void )
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005a58:	f7fa fe42 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	891a      	ldrh	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	895b      	ldrh	r3, [r3, #10]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	bf2c      	ite	cs
 8005a68:	2301      	movcs	r3, #1
 8005a6a:	2300      	movcc	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005a6e:	f7fa fe49 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv>:
    WORD getFree( void )
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005a84:	f7fa fe2c 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = (size<=anz)?0:size - anz;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	895a      	ldrh	r2, [r3, #10]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	891b      	ldrh	r3, [r3, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d906      	bls.n	8005aa2 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv+0x26>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	895a      	ldrh	r2, [r3, #10]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	891b      	ldrh	r3, [r3, #8]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	e000      	b.n	8005aa4 <_ZN9EmbSysLib3Std4FifoIhE7getFreeEv+0x28>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	81fb      	strh	r3, [r7, #14]
      Hw::System::enableInterrupt();
 8005aa6:	f7fa fe2d 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
    }
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	80fb      	strh	r3, [r7, #6]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	80bb      	strh	r3, [r7, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	807b      	strh	r3, [r7, #2]
  if( x > max )
 8005ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	dd02      	ble.n	8005ad8 <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x24>
    return( max );
 8005ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ad6:	e00a      	b.n	8005aee <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x3a>
  if( x < min )
 8005ad8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005adc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	da02      	bge.n	8005aea <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x36>
    return( min );
 8005ae4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ae8:	e001      	b.n	8005aee <_ZN9EmbSysLib3Std5RANGEIsEET_S2_S2_S2_+0x3a>
  return( x );
 8005aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEC1ES4_>:
  public:
    //---------------------------------------------------------------
    /*! Create a Flag
        \param def Initial value of the Flag (optional, otherwise value = 0)
    */
    Flag( T def = (T)0 )
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
    {
      value = def;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	701a      	strb	r2, [r3, #0]
      prev  = (T)0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	705a      	strb	r2, [r3, #1]
    }
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <_ZN9EmbSysLib3Std4FlagINS_4Ctrl13DigitalButton6ActionEEaSERKS4_>:

    //---------------------------------------------------------------
    /*! Set the Flag
        \param value New value of Flag
    */
    void operator=( const T &value )
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
    {
      this->value = value;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	701a      	strb	r2, [r3, #0]
    }
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et>:
    Fifo( WORD sizeIn = 3 )
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	807b      	strh	r3, [r7, #2]
      in   = 0;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	809a      	strh	r2, [r3, #4]
      out  = 0;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	80da      	strh	r2, [r3, #6]
      anz  = 0;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	811a      	strh	r2, [r3, #8]
      size = sizeIn;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	887a      	ldrh	r2, [r7, #2]
 8005b60:	815a      	strh	r2, [r3, #10]
      if( size > 0 )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	895b      	ldrh	r3, [r3, #10]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x40>
        speicher = new T[size];
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	895b      	ldrh	r3, [r3, #10]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 fca8 	bl	80084c4 <_Znaj>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e005      	b.n	8005b8a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEEC1Et+0x4c>
        size     = 0;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	815a      	strh	r2, [r3, #10]
        speicher = NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    }
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEE6isFullEv>:
    bool isFull( void )
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
      Hw::System::disableInterrupt();
 8005b9c:	f7fa fda0 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      ret = ( anz >= size );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	891a      	ldrh	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	895b      	ldrh	r3, [r3, #10]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	bf2c      	ite	cs
 8005bac:	2301      	movcs	r3, #1
 8005bae:	2300      	movcc	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005bb2:	f7fa fda7 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_>:
    bool operator<<( const T &ref )
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
      bool ret = false;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
      Hw::System::disableInterrupt();
 8005bce:	f7fa fd87 	bl	80006e0 <_ZN9EmbSysLib2Hw6System16disableInterruptEv>
      if( anz < size )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	891a      	ldrh	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	895b      	ldrh	r3, [r3, #10]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d21f      	bcs.n	8005c1e <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x5e>
        speicher[in] = ref;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	8892      	ldrh	r2, [r2, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	701a      	strb	r2, [r3, #0]
        in = (in < size-1) ? in+1 : 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	889b      	ldrh	r3, [r3, #4]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	895b      	ldrh	r3, [r3, #10]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	da04      	bge.n	8005c08 <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x48>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	889b      	ldrh	r3, [r3, #4]
 8005c02:	3301      	adds	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	e000      	b.n	8005c0a <_ZN9EmbSysLib3Std4FifoINS_4Ctrl14DigitalEncoder5EventEElsERKS4_+0x4a>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	809a      	strh	r2, [r3, #4]
        anz++;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	891b      	ldrh	r3, [r3, #8]
 8005c12:	3301      	adds	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	811a      	strh	r2, [r3, #8]
        ret = true;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]
      Hw::System::enableInterrupt();
 8005c1e:	f7fa fd71 	bl	8000704 <_ZN9EmbSysLib2Hw6System15enableInterruptEv>
      return( ret );
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
    }
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_Z41__static_initialization_and_destruction_0ii>:
//-------------------------------------------------------------------
//
// nothing to do ...
//

}  } //namespace
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d109      	bne.n	8005c50 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d104      	bne.n	8005c50 <_Z41__static_initialization_and_destruction_0ii+0x24>
Std::Report PinConfig::report( ReportID_Hw::Module::SYSTEM_PIN_CONFIG );
 8005c46:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005c4a:	4803      	ldr	r0, [pc, #12]	; (8005c58 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005c4c:	f7fd faa0 	bl	8003190 <_ZN9EmbSysLib3Std6ReportC1Et>
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000178 	.word	0x20000178

08005c5c <_GLOBAL__sub_I__ZN9EmbSysLib2Hw6System12cntInterruptE>:
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c64:	2001      	movs	r0, #1
 8005c66:	f7ff ffe1 	bl	8005c2c <_Z41__static_initialization_and_destruction_0ii>
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h>:
        //-----------------------------------------------------------
        /*! Initialize and connect the device to the bus
            \param i2c    Reference to I2C hardware (I2C bus interface)
            \param hwAddr Device's hardware address
        */
        Device( I2Cmaster &i2c,
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
                BYTE       hwAddr )
        : i2c( i2c )
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h+0x34>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	605a      	str	r2, [r3, #4]
        {
          this->hwAddr = hwAddr;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	79fa      	ldrb	r2, [r7, #7]
 8005c8a:	721a      	strb	r2, [r3, #8]
          isErrorFlag  = false;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	725a      	strb	r2, [r3, #9]
        }
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	08009540 	.word	0x08009540

08005ca4 <_ZN9EmbSysLib2Hw9I2Cmaster6Device7isErrorEv>:
            call of \a read() or \a write()
            \return
                    - true:  Error, previous transfer was aborted
                    - false: No error
        */
        virtual BYTE isError( void )
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
        {
          BYTE ret = isErrorFlag;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7a5b      	ldrb	r3, [r3, #9]
 8005cb0:	73fb      	strb	r3, [r7, #15]
          isErrorFlag = false;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	725a      	strb	r2, [r3, #9]
          return( ret );
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
        }
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em>:
*/
class Ltdc_Mcu
{
  public:
    //---------------------------------------------------------------
    Ltdc_Mcu( uint32_t startAddrIn )
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
    {
      startAddr = startAddrIn;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	601a      	str	r2, [r3, #0]

      RCC->APB2ENR  |=  RCC_APB2ENR_LTDCEN;   // clock enable
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cdc:	4a0b      	ldr	r2, [pc, #44]	; (8005d0c <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ce2:	6453      	str	r3, [r2, #68]	; 0x44
      RCC->APB2RSTR |=  RCC_APB2RSTR_LTDCRST; // reset cycle
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cee:	6253      	str	r3, [r2, #36]	; 0x24
      RCC->APB2RSTR &= ~RCC_APB2RSTR_LTDCRST;
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4a05      	ldr	r2, [pc, #20]	; (8005d0c <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em+0x44>)
 8005cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cfa:	6253      	str	r3, [r2, #36]	; 0x24
    }
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800

08005d10 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt>:

    //---------------------------------------------------------------
    void Init( WORD Hsize, WORD Vsize )
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	807b      	strh	r3, [r7, #2]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	803b      	strh	r3, [r7, #0]
    {
      DWORD h = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
      DWORD v = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]

      // Global control register
      LTDC->GCR = (!LTDC_GCR_HSPOL   // Horizontal Synchronization Polarity: activ low
 8005d28:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	619a      	str	r2, [r3, #24]
                  |!LTDC_GCR_VSPOL   // Vertical Synchronization Polarity: activ low
                  |!LTDC_GCR_DEPOL   // Not Data Enable Polarity: activ low
                  |!LTDC_GCR_PCPOL );// Pixel Clock Polarity: activ low

      // Synchronization size configuration register
      h += 1; // add H-Sync
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Sync
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60bb      	str	r3, [r7, #8]
      LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	041a      	lsls	r2, r3, #16
 8005d3e:	491e      	ldr	r1, [pc, #120]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Vertical Synchronization Height: 1
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4313      	orrs	r3, r2
      LTDC->SSCR = ((h << 16)  // Horizontal Synchronization Width: 1
 8005d44:	608b      	str	r3, [r1, #8]

      // Back porch configuration register
      h += 1; // add H-Back porch
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Back porch
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60bb      	str	r3, [r7, #8]
      LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	041a      	lsls	r2, r3, #16
 8005d56:	4918      	ldr	r1, [pc, #96]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Vertical back porch
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
      LTDC->BPCR = ((h << 16)  // Accumulated Horizontal back porch
 8005d5c:	60cb      	str	r3, [r1, #12]

      // Active width configuration register
      h += Hsize;
 8005d5e:	887b      	ldrh	r3, [r7, #2]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
      v += Vsize;
 8005d66:	883b      	ldrh	r3, [r7, #0]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	60bb      	str	r3, [r7, #8]
      LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	041a      	lsls	r2, r3, #16
 8005d72:	4911      	ldr	r1, [pc, #68]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Accumulated Active Height
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4313      	orrs	r3, r2
      LTDC->AWCR = ((h << 16)  // Accumulated Active Width
 8005d78:	610b      	str	r3, [r1, #16]

      // Total width configuration register
      h += 1; // add H-Front porch
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
      v += 1; // add V-Front porch
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60bb      	str	r3, [r7, #8]
      LTDC->TWCR = ((h << 16)  // Total Width
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	490b      	ldr	r1, [pc, #44]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
                   |(v <<  0));// Total Height
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
      LTDC->TWCR = ((h << 16)  // Total Width
 8005d90:	614b      	str	r3, [r1, #20]

      // Background color configuration register
      LTDC->BCCR = ( (0x00 << 16)    // Red value
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c
                   | (0x00 <<  8)    // Green value
                   | (0x00 <<  0) ); // Blue value

      // Interrupt enable register
      LTDC->IER = 0; // no interrupts
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	635a      	str	r2, [r3, #52]	; 0x34

      // Global control register
      LTDC->GCR |= LTDC_GCR_LTDCEN; // LTDC enable
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4a05      	ldr	r2, [pc, #20]	; (8005db8 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt+0xa8>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6193      	str	r3, [r2, #24]
    }
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40016800 	.word	0x40016800

08005dbc <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh>:

    //---------------------------------------------------------------
    uint32_t LayerConfig( uint32_t width, uint32_t height, uint8_t layerID = 0 )
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	70fb      	strb	r3, [r7, #3]
    {
      LTDC_Layer_TypeDef *layer = (layerID) ? LTDC_Layer2 : LTDC_Layer1;
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0x18>
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc0>)
 8005dd2:	e000      	b.n	8005dd6 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0x1a>
 8005dd4:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc4>)
 8005dd6:	61fb      	str	r3, [r7, #28]

      uint32_t hbp  = (LTDC->BPCR & LTDC_BPCR_AHBP) >> 16; // H-Back porch
 8005dd8:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	61bb      	str	r3, [r7, #24]
      uint32_t vbp  = (LTDC->BPCR & LTDC_BPCR_AVBP) >> 0;  // V-Back porch
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dec:	617b      	str	r3, [r7, #20]
      uint32_t bpp  = 2; // RGB565: 16-Bit pixel format = 2 bytes per pixel
 8005dee:	2302      	movs	r3, #2
 8005df0:	613b      	str	r3, [r7, #16]

      // Layerx window horizontal position configuration register
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	4413      	add	r3, r2
 8005df8:	041a      	lsls	r2, r3, #16
                     | ((0/*X0*/ + 1 + hbp) <<  0) ); // Window Horizontal Start Position
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	431a      	orrs	r2, r3
      layer->WHPCR = ( ((width       + hbp) << 16)    // Window Horizontal Stop Position
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	605a      	str	r2, [r3, #4]

      // Layerx window vertical position configuration register
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	041a      	lsls	r2, r3, #16
                     | ((0/*Y0*/ + 1 + vbp) <<  0) ); // Window Vertical Start Position
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	431a      	orrs	r2, r3
      layer->WVPCR = ( ((height      + vbp) << 16)    // Window Vertical Stop Position
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	609a      	str	r2, [r3, #8]

      // Layerx pixel format configuration register
      layer->PFCR = 0x02; // PixelFormat: RGB565
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	611a      	str	r2, [r3, #16]

      // Layerx default color configuration register
      layer->DCCR = ( (0x00 << 24)    // Alpha
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	619a      	str	r2, [r3, #24]
                    | (0x00 << 16)    // Red
                    | (0x00 <<  8)    // Green
                    | (0x00 <<  0) ); // Blue

      // Layerx constant alpha configuration register
      layer->CACR = (0xFF); // Alpha
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	615a      	str	r2, [r3, #20]

      // Layerx blending factors configuration register
      layer->BFCR = ( (0x06 << 8)   // Blending Factor 1:Pixel Alpha x Constant Alpha
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f240 6207 	movw	r2, #1543	; 0x607
 8005e2e:	61da      	str	r2, [r3, #28]
                    | (0x07 << 0) );// Blending Factor 2:1-(Pixel Alpha x Constant Alpha)

      // Layerx color frame buffer address register
      layer->CFBAR = startAddr;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28


      // Layerx color frame buffer length register
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	fb02 f303 	mul.w	r3, r2, r3
 8005e40:	041a      	lsls	r2, r3, #16
                      | ((((width - 0/*X0*/)*bpp)+3) <<  0) );// Color Frame Buffer Line Length
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6939      	ldr	r1, [r7, #16]
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	3303      	adds	r3, #3
 8005e4c:	431a      	orrs	r2, r3
      layer->CFBLR  = ( ((((width          )*bpp)  ) << 16)   // Color Frame Buffer Pitch in bytes
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	62da      	str	r2, [r3, #44]	; 0x2c

      // Layerx color frame buffer line number register
      layer->CFBLNR = height; // Frame Buffer Number of Lines
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30

      // Layerx control register
      layer->CR |= LTDC_LxCR_LEN; // Layer Enable
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f043 0201 	orr.w	r2, r3, #1
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	601a      	str	r2, [r3, #0]

      // Shadow reload configuration register
      LTDC->SRCR = LTDC_SRCR_IMR; // Immediate Reload: enable
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh+0xc8>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

      return( startAddr );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
    }
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40016904 	.word	0x40016904
 8005e80:	40016884 	.word	0x40016884
 8005e84:	40016800 	.word	0x40016800

08005e88 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>:
  public:
    //---------------------------------------------------------------
    /*! Initialize the FSCM hardware
        \param xxx  xxx
    */
    Fmc_Mcu( FMCtype typeIn, bool bothIn = false )
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
 8005e94:	4613      	mov	r3, r2
 8005e96:	70bb      	strb	r3, [r7, #2]
    {
      type = typeIn&0x0F;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	701a      	strb	r2, [r3, #0]
      bank = (typeIn>>4)&0x0F;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	705a      	strb	r2, [r3, #1]
      both = bothIn;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	78ba      	ldrb	r2, [r7, #2]
 8005eb2:	709a      	strb	r2, [r3, #2]

      WORD mode =  PinConfig::FAST_SPEED
 8005eb4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8005eb8:	81fb      	strh	r3, [r7, #14]
                 | PinConfig::PUSH_PULL
                 | PinConfig::PULL_UP // ???
                 | PinConfig::NO_PUPD;

      PinConfig::set(PinConfig::FMC_D0,mode);
 8005eba:	89fb      	ldrh	r3, [r7, #14]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	208f      	movs	r0, #143	; 0x8f
 8005ec0:	f7fa fe80 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D1,mode);
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	2090      	movs	r0, #144	; 0x90
 8005eca:	f7fa fe7b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D2,mode);
 8005ece:	89fb      	ldrh	r3, [r7, #14]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	209b      	movs	r0, #155	; 0x9b
 8005ed4:	f7fa fe76 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D3,mode);
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	4619      	mov	r1, r3
 8005edc:	20a6      	movs	r0, #166	; 0xa6
 8005ede:	f7fa fe71 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D4,mode);
 8005ee2:	89fb      	ldrh	r3, [r7, #14]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	20a9      	movs	r0, #169	; 0xa9
 8005ee8:	f7fa fe6c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D5,mode);
 8005eec:	89fb      	ldrh	r3, [r7, #14]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	20aa      	movs	r0, #170	; 0xaa
 8005ef2:	f7fa fe67 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D6,mode);
 8005ef6:	89fb      	ldrh	r3, [r7, #14]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	20ab      	movs	r0, #171	; 0xab
 8005efc:	f7fa fe62 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D7,mode);
 8005f00:	89fb      	ldrh	r3, [r7, #14]
 8005f02:	4619      	mov	r1, r3
 8005f04:	20ac      	movs	r0, #172	; 0xac
 8005f06:	f7fa fe5d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D8,mode);
 8005f0a:	89fb      	ldrh	r3, [r7, #14]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	20ad      	movs	r0, #173	; 0xad
 8005f10:	f7fa fe58 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D9,mode);
 8005f14:	89fb      	ldrh	r3, [r7, #14]
 8005f16:	4619      	mov	r1, r3
 8005f18:	20ae      	movs	r0, #174	; 0xae
 8005f1a:	f7fa fe53 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D10,mode);
 8005f1e:	89fb      	ldrh	r3, [r7, #14]
 8005f20:	4619      	mov	r1, r3
 8005f22:	2091      	movs	r0, #145	; 0x91
 8005f24:	f7fa fe4e 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D11,mode);
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	2092      	movs	r0, #146	; 0x92
 8005f2e:	f7fa fe49 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D12,mode);
 8005f32:	89fb      	ldrh	r3, [r7, #14]
 8005f34:	4619      	mov	r1, r3
 8005f36:	2093      	movs	r0, #147	; 0x93
 8005f38:	f7fa fe44 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D13,mode);
 8005f3c:	89fb      	ldrh	r3, [r7, #14]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	2094      	movs	r0, #148	; 0x94
 8005f42:	f7fa fe3f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D14,mode);
 8005f46:	89fb      	ldrh	r3, [r7, #14]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2095      	movs	r0, #149	; 0x95
 8005f4c:	f7fa fe3a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D15,mode);
 8005f50:	89fb      	ldrh	r3, [r7, #14]
 8005f52:	4619      	mov	r1, r3
 8005f54:	2096      	movs	r0, #150	; 0x96
 8005f56:	f7fa fe35 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D16,mode);
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	2097      	movs	r0, #151	; 0x97
 8005f60:	f7fa fe30 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D17,mode);
 8005f64:	89fb      	ldrh	r3, [r7, #14]
 8005f66:	4619      	mov	r1, r3
 8005f68:	2098      	movs	r0, #152	; 0x98
 8005f6a:	f7fa fe2b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D18,mode);
 8005f6e:	89fb      	ldrh	r3, [r7, #14]
 8005f70:	4619      	mov	r1, r3
 8005f72:	2099      	movs	r0, #153	; 0x99
 8005f74:	f7fa fe26 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D19,mode);
 8005f78:	89fb      	ldrh	r3, [r7, #14]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	209a      	movs	r0, #154	; 0x9a
 8005f7e:	f7fa fe21 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D20,mode);
 8005f82:	89fb      	ldrh	r3, [r7, #14]
 8005f84:	4619      	mov	r1, r3
 8005f86:	209c      	movs	r0, #156	; 0x9c
 8005f88:	f7fa fe1c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D21,mode);
 8005f8c:	89fb      	ldrh	r3, [r7, #14]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	209d      	movs	r0, #157	; 0x9d
 8005f92:	f7fa fe17 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D22,mode);
 8005f96:	89fb      	ldrh	r3, [r7, #14]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	209e      	movs	r0, #158	; 0x9e
 8005f9c:	f7fa fe12 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D23,mode);
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	209f      	movs	r0, #159	; 0x9f
 8005fa6:	f7fa fe0d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D24,mode);
 8005faa:	89fb      	ldrh	r3, [r7, #14]
 8005fac:	4619      	mov	r1, r3
 8005fae:	20a0      	movs	r0, #160	; 0xa0
 8005fb0:	f7fa fe08 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D25,mode);
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	20a1      	movs	r0, #161	; 0xa1
 8005fba:	f7fa fe03 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D26,mode);
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	20a2      	movs	r0, #162	; 0xa2
 8005fc4:	f7fa fdfe 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D27,mode);
 8005fc8:	89fb      	ldrh	r3, [r7, #14]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	20a3      	movs	r0, #163	; 0xa3
 8005fce:	f7fa fdf9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D28,mode);
 8005fd2:	89fb      	ldrh	r3, [r7, #14]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	20a4      	movs	r0, #164	; 0xa4
 8005fd8:	f7fa fdf4 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D29,mode);
 8005fdc:	89fb      	ldrh	r3, [r7, #14]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	20a5      	movs	r0, #165	; 0xa5
 8005fe2:	f7fa fdef 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D30,mode);
 8005fe6:	89fb      	ldrh	r3, [r7, #14]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	20a7      	movs	r0, #167	; 0xa7
 8005fec:	f7fa fdea 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_D31,mode);
 8005ff0:	89fb      	ldrh	r3, [r7, #14]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	20a8      	movs	r0, #168	; 0xa8
 8005ff6:	f7fa fde5 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_NBL0,mode);
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	20c0      	movs	r0, #192	; 0xc0
 8006000:	f7fa fde0 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL1,mode);
 8006004:	89fb      	ldrh	r3, [r7, #14]
 8006006:	4619      	mov	r1, r3
 8006008:	20c1      	movs	r0, #193	; 0xc1
 800600a:	f7fa fddb 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_A0,mode);
 800600e:	89fb      	ldrh	r3, [r7, #14]
 8006010:	4619      	mov	r1, r3
 8006012:	2070      	movs	r0, #112	; 0x70
 8006014:	f7fa fdd6 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A1,mode);
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	4619      	mov	r1, r3
 800601c:	2071      	movs	r0, #113	; 0x71
 800601e:	f7fa fdd1 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A2,mode);
 8006022:	89fb      	ldrh	r3, [r7, #14]
 8006024:	4619      	mov	r1, r3
 8006026:	207c      	movs	r0, #124	; 0x7c
 8006028:	f7fa fdcc 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A3,mode);
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	4619      	mov	r1, r3
 8006030:	2083      	movs	r0, #131	; 0x83
 8006032:	f7fa fdc7 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A4,mode);
 8006036:	89fb      	ldrh	r3, [r7, #14]
 8006038:	4619      	mov	r1, r3
 800603a:	2084      	movs	r0, #132	; 0x84
 800603c:	f7fa fdc2 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A5,mode);
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	4619      	mov	r1, r3
 8006044:	2085      	movs	r0, #133	; 0x85
 8006046:	f7fa fdbd 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A6,mode);
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	4619      	mov	r1, r3
 800604e:	2086      	movs	r0, #134	; 0x86
 8006050:	f7fa fdb8 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A7,mode);
 8006054:	89fb      	ldrh	r3, [r7, #14]
 8006056:	4619      	mov	r1, r3
 8006058:	2087      	movs	r0, #135	; 0x87
 800605a:	f7fa fdb3 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A8,mode);
 800605e:	89fb      	ldrh	r3, [r7, #14]
 8006060:	4619      	mov	r1, r3
 8006062:	2088      	movs	r0, #136	; 0x88
 8006064:	f7fa fdae 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A9,mode);
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	4619      	mov	r1, r3
 800606c:	2089      	movs	r0, #137	; 0x89
 800606e:	f7fa fda9 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A10,mode);
 8006072:	89fb      	ldrh	r3, [r7, #14]
 8006074:	4619      	mov	r1, r3
 8006076:	2072      	movs	r0, #114	; 0x72
 8006078:	f7fa fda4 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A11,mode);
 800607c:	89fb      	ldrh	r3, [r7, #14]
 800607e:	4619      	mov	r1, r3
 8006080:	2073      	movs	r0, #115	; 0x73
 8006082:	f7fa fd9f 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A12,mode);
 8006086:	89fb      	ldrh	r3, [r7, #14]
 8006088:	4619      	mov	r1, r3
 800608a:	2074      	movs	r0, #116	; 0x74
 800608c:	f7fa fd9a 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A13,mode);
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	4619      	mov	r1, r3
 8006094:	2075      	movs	r0, #117	; 0x75
 8006096:	f7fa fd95 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A14,mode);
 800609a:	89fb      	ldrh	r3, [r7, #14]
 800609c:	4619      	mov	r1, r3
 800609e:	2076      	movs	r0, #118	; 0x76
 80060a0:	f7fa fd90 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_A15,mode);
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	4619      	mov	r1, r3
 80060a8:	2077      	movs	r0, #119	; 0x77
 80060aa:	f7fa fd8b 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDCLK,mode);
 80060ae:	89fb      	ldrh	r3, [r7, #14]
 80060b0:	4619      	mov	r1, r3
 80060b2:	20cf      	movs	r0, #207	; 0xcf
 80060b4:	f7fa fd86 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNCAS,mode);
 80060b8:	89fb      	ldrh	r3, [r7, #14]
 80060ba:	4619      	mov	r1, r3
 80060bc:	20d0      	movs	r0, #208	; 0xd0
 80060be:	f7fa fd81 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDNRAS,mode);
 80060c2:	89fb      	ldrh	r3, [r7, #14]
 80060c4:	4619      	mov	r1, r3
 80060c6:	20d3      	movs	r0, #211	; 0xd3
 80060c8:	f7fa fd7c 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      PinConfig::set(PinConfig::FMC_SDCKE0,mode);
 80060cc:	89fb      	ldrh	r3, [r7, #14]
 80060ce:	4619      	mov	r1, r3
 80060d0:	20cd      	movs	r0, #205	; 0xcd
 80060d2:	f7fa fd77 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNE0,mode);
 80060d6:	89fb      	ldrh	r3, [r7, #14]
 80060d8:	4619      	mov	r1, r3
 80060da:	20d1      	movs	r0, #209	; 0xd1
 80060dc:	f7fa fd72 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_SDNWE,mode);
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	4619      	mov	r1, r3
 80060e4:	20d4      	movs	r0, #212	; 0xd4
 80060e6:	f7fa fd6d 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL2,mode);
 80060ea:	89fb      	ldrh	r3, [r7, #14]
 80060ec:	4619      	mov	r1, r3
 80060ee:	20c2      	movs	r0, #194	; 0xc2
 80060f0:	f7fa fd68 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>
      PinConfig::set(PinConfig::FMC_NBL3,mode);
 80060f4:	89fb      	ldrh	r3, [r7, #14]
 80060f6:	4619      	mov	r1, r3
 80060f8:	20c3      	movs	r0, #195	; 0xc3
 80060fa:	f7fa fd63 	bl	8000bc4 <_ZN9EmbSysLib2Hw9PinConfig3setENS1_8FunctionEm>

      /* Enable FMC clock */
      RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 80060fe:	4b09      	ldr	r3, [pc, #36]	; (8006124 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x29c>)
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	4a08      	ldr	r2, [pc, #32]	; (8006124 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x29c>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6393      	str	r3, [r2, #56]	; 0x38

      if( type == SDRAM )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d102      	bne.n	8006118 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb+0x290>
      {
        SDRAM_Init( );
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f81c 	bl	8006150 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv>
      }
    }
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40023800 	.word	0x40023800

08006128 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>:
    
    //---------------------------------------------------------------
    uint32_t startAddr( void )
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    {
      if( bank == 0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv+0x16>
        return( 0xC0000000 );
 8006138:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800613c:	e001      	b.n	8006142 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv+0x1a>
      else
        return( 0xD0000000 );
 800613e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
    }
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv>:
    
  private:
    //---------------------------------------------------------------
    void SDRAM_Init(  )
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
    {
      uint32_t reg  = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
      // Step 1 and 2
      // Common initialization,
      // see Reference Manual, DocID028270-Rev 3, page 388
      //--------------------------------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[0/*BANK1*/];
 800615c:	4b37      	ldr	r3, [pc, #220]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_SDCLK
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006168:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_RBURST
              | FMC_SDCR1_RPIPE );
      reg |=  (  (2<<10)          // Clock configuration: 2xHCLK periods
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8006170:	60fb      	str	r3, [r7, #12]
              |  FMC_SDCR1_RBURST // Burst read:enable
              |  (0<<13) );       // Read pipe: No HCLK clock cycle delay
      FMC_Bank5_6->SDCR[0/*BANK1*/] = reg;
 8006172:	4a32      	ldr	r2, [pc, #200]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6013      	str	r3, [r2, #0]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[0/*BANK1*/];
 8006178:	4b30      	ldr	r3, [pc, #192]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TRC
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf0>)
 8006182:	4013      	ands	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TRP );
      reg |=  ( ((7 - 1) << 12)    // Row cycle delay: 7 cycles
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f443 1383 	orr.w	r3, r3, #1073152	; 0x106000
 800618c:	60fb      	str	r3, [r7, #12]
              | ((2 - 1) << 20) ); // Row precharge delay: 2 cycles
      FMC_Bank5_6->SDTR[0/*BANK1*/] = reg;
 800618e:	4a2b      	ldr	r2, [pc, #172]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6093      	str	r3, [r2, #8]

      // Bank specific initialization
      //-----------------------------
      // SDRAM Control registers
      reg  = FMC_Bank5_6->SDCR[bank];
 8006194:	4a29      	ldr	r2, [pc, #164]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619e:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDCR1_NC
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b28      	ldr	r3, [pc, #160]	; (8006244 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf4>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
              | FMC_SDCR1_NR
              | FMC_SDCR1_MWID
              | FMC_SDCR1_NB
              | FMC_SDCR1_CAS
              | FMC_SDCR1_WP );
      reg |=  ( (0 <<  0)       // Number of column address bits:8
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f443 73f2 	orr.w	r3, r3, #484	; 0x1e4
 80061ae:	60fb      	str	r3, [r7, #12]
              | (1 <<  2)       // Number of row address bits:12
              | (2 <<  4)       // Memory data bus width:32 bits
              | (1 <<  6)       // Number of internal banks:4
              | (3 <<  7)       // CAS Latency:3 (must be same as in Load Mode Register)
              |!FMC_SDCR1_WP ); // Write protection: disable
      FMC_Bank5_6->SDCR[bank] = reg;
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	4619      	mov	r1, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

      // SDRAM Timing registers
      reg  = FMC_Bank5_6->SDTR[bank];
 80061be:	4a1f      	ldr	r2, [pc, #124]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	3302      	adds	r3, #2
 80061c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ca:	60fb      	str	r3, [r7, #12]
      reg &= ~( FMC_SDTR1_TMRD
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xf8>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
              | FMC_SDTR1_TXSR
              | FMC_SDTR1_TRAS
              | FMC_SDTR1_TWR
              | FMC_SDTR1_TRCD );
      reg |=  ( ((2 - 1) <<  0)   // Load Mode Register to Active: 2 cycles
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xfc>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
              | ((7 - 1) <<  4)   // Exit Self-refresh delay: 7 cycles
              | ((4 - 1) <<  8)   // Self refresh time: 4 cycles
              | ((2 - 1) << 16)   // Recovery delay: 2 cycles
              | ((2 - 1) << 24)); // Row to column delay: 2 cycles
      FMC_Bank5_6->SDTR[bank] = reg;
 80061dc:	4917      	ldr	r1, [pc, #92]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	3302      	adds	r3, #2
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      // Device specific initialization
      //-------------------------------

      // Step 3: Configure a clock configuration enable command
      SendCommand( 0x01/*Clock Configuration Enable*/, 1, 0 );
 80061ea:	2300      	movs	r3, #0
 80061ec:	2201      	movs	r2, #1
 80061ee:	2101      	movs	r1, #1
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f82d 	bl	8006250 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 4: Insert 100 us minimum delay
      System::delayMilliSec(1);
 80061f6:	2001      	movs	r0, #1
 80061f8:	f7fa fad6 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

      // Step 5: Configure a PALL (precharge all) command
      SendCommand( 0x02/*PALL Command*/, 1, 0 );
 80061fc:	2300      	movs	r3, #0
 80061fe:	2201      	movs	r2, #1
 8006200:	2102      	movs	r1, #2
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f824 	bl	8006250 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 6: Configure an Auto Refresh command
      SendCommand( 0x03/*Auto Refresh Command*/, 8, 0 );
 8006208:	2300      	movs	r3, #0
 800620a:	2208      	movs	r2, #8
 800620c:	2103      	movs	r1, #3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f81e 	bl	8006250 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>

      // Step 7: Program the external memory mode register
      // see: Micron SDR SDRAM "MT48LC4M32B2", Datasheet
      reg = ( (0<<0)   // Burst length: 1
 8006214:	f44f 730c 	mov.w	r3, #560	; 0x230
 8006218:	60fb      	str	r3, [r7, #12]
            | (0<<3)   // Burst type:sequential
            | (3<<4)   // CAS Latency:3 (must be same as in SDCR)
            | (0<<7)   // Operating Mode: standard
            | (1<<9) );// Write Burst Mode: single
      SendCommand(0x04/*Load Mode Register*/, 1, reg);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	2104      	movs	r1, #4
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f815 	bl	8006250 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>
      //      Refresh count:  4k = 4096
      //
      // here:fclkSD = 100 MHz
      //      COUNT = RefreshPeriod/RefreshCount*fclkSD + 20
      //            = 64E-3/4096*100E6 +20 = 1583
      FMC_Bank5_6->SDRTR |= (1583 << 1);
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	4904      	ldr	r1, [pc, #16]	; (800623c <_ZN9EmbSysLib2Hw7Fmc_Mcu10SDRAM_InitEv+0xec>)
 800622c:	f640 435e 	movw	r3, #3166	; 0xc5e
 8006230:	4313      	orrs	r3, r2
 8006232:	614b      	str	r3, [r1, #20]
    }
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	a0000140 	.word	0xa0000140
 8006240:	ff0f0fff 	.word	0xff0f0fff
 8006244:	fffffc00 	.word	0xfffffc00
 8006248:	f0f0f000 	.word	0xf0f0f000
 800624c:	01010361 	.word	0x01010361

08006250 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm>:

  private:
    //---------------------------------------------------------------
    void SendCommand( uint32_t Command,       //!< Command issued to the SDRAM device
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]

      // see: Reference Manual, DocID028270-Rev 3, page 402:
      //      "If two SDRAM banks are used, the Auto-refresh and
      //       PALL command must be issued simultaneously to the two devices
      //       with CTB1 and CTB2 bits set"
      if( both && (   Command == 0x02    // PALL Command
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	789b      	ldrb	r3, [r3, #2]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x28>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d002      	beq.n	8006272 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x22>
                   || Command == 0x03 )) // Auto Refresh Mode
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d102      	bne.n	8006278 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x28>
        ctb = 3; // use CTB1 and CTB2 simultanously
 8006272:	2303      	movs	r3, #3
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e008      	b.n	800628a <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x3a>
      else if( bank == 0)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x36>
        ctb = 1<<1; // CTB1
 8006280:	2302      	movs	r3, #2
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e001      	b.n	800628a <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x3a>
      else
        ctb = 1<<0; // CTB2
 8006286:	2301      	movs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]

      FMC_Bank5_6->SDCMR = ( (Command         << 0)
                           | (ctb             << 3)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	00da      	lsls	r2, r3, #3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	431a      	orrs	r2, r3
                           | ((AutoRefresh-1) << 5)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3b01      	subs	r3, #1
 8006296:	015b      	lsls	r3, r3, #5
 8006298:	431a      	orrs	r2, r3
                           | (ModeRegister    << 9) );
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	025b      	lsls	r3, r3, #9
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 800629e:	490b      	ldr	r1, [pc, #44]	; (80062cc <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x7c>)
                           | (ModeRegister    << 9) );
 80062a0:	4313      	orrs	r3, r2
      FMC_Bank5_6->SDCMR = ( (Command         << 0)
 80062a2:	610b      	str	r3, [r1, #16]
      // TODO: timeout
      while( FMC_Bank5_6->SDSR & FMC_SDSR_BUSY ); // wait until command is send
 80062a4:	bf00      	nop
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x7c>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f4      	bne.n	80062a6 <_ZN9EmbSysLib2Hw7Fmc_Mcu11SendCommandEmmm+0x56>
    }
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	a0000140 	.word	0xa0000140

080062d0 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>:
*/
class Dsi_Mcu
{
  public:
    //---------------------------------------------------------------
    Dsi_Mcu( uint32_t startAddr )
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]

    : hwLTDC( startAddr )
 80062da:	4a10      	ldr	r2, [pc, #64]	; (800631c <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x4c>)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fcee 	bl	8005cc8 <_ZN9EmbSysLib2Hw8Ltdc_McuC1Em>

    {
      // Enable clock and reset-cycle
      RCC->APB2ENR  |=  RCC_APB2ENR_DSIEN;
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f0:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062f6:	6453      	str	r3, [r2, #68]	; 0x44
      RCC->APB2RSTR |=  RCC_APB2RSTR_DSIRST;
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	4a08      	ldr	r2, [pc, #32]	; (8006320 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 80062fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006302:	6253      	str	r3, [r2, #36]	; 0x24
      RCC->APB2RSTR &= ~RCC_APB2RSTR_DSIRST;
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	4a05      	ldr	r2, [pc, #20]	; (8006320 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em+0x50>)
 800630a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800630e:	6253      	str	r3, [r2, #36]	; 0x24
    }
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	08009530 	.word	0x08009530
 8006320:	40023800 	.word	0x40023800
 8006324:	00000000 	.word	0x00000000

08006328 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb>:

    //-----------------------------------------------------------------
    void Init( WORD Hsize, WORD Vsize, bool useLTDC )
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	4608      	mov	r0, r1
 8006332:	4611      	mov	r1, r2
 8006334:	461a      	mov	r2, r3
 8006336:	4603      	mov	r3, r0
 8006338:	817b      	strh	r3, [r7, #10]
 800633a:	460b      	mov	r3, r1
 800633c:	813b      	strh	r3, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
    {
      DSI->WCR   &= ~DSI_WCR_DSIEN;   // Wrapper disable
 8006342:	4b6d      	ldr	r3, [pc, #436]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006344:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006348:	4a6b      	ldr	r2, [pc, #428]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800634a:	f023 0308 	bic.w	r3, r3, #8
 800634e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
      DSI->CR    &= ~DSI_CR_EN;       // DSI disable
 8006352:	4b69      	ldr	r3, [pc, #420]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4a68      	ldr	r2, [pc, #416]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	6053      	str	r3, [r2, #4]
      DSI->PCTLR &= ~DSI_PCTLR_CKE;   // D-PHY clock disable
 800635e:	4b66      	ldr	r3, [pc, #408]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006360:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006364:	4a64      	ldr	r2, [pc, #400]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006366:	f023 0304 	bic.w	r3, r3, #4
 800636a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      DSI->PCTLR &= ~DSI_PCTLR_DEN;   // Digital disable
 800636e:	4b62      	ldr	r3, [pc, #392]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006374:	4a60      	ldr	r2, [pc, #384]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006376:	f023 0302 	bic.w	r3, r3, #2
 800637a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      DSI->WRPCR &= ~DSI_WRPCR_PLLEN; // PLL disable
 800637e:	4b5e      	ldr	r3, [pc, #376]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006380:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006384:	4a5c      	ldr	r2, [pc, #368]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
      DSI->WRPCR &= ~DSI_WRPCR_REGEN; // Regulator disable
 800638e:	4b5a      	ldr	r3, [pc, #360]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006390:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006394:	4a58      	ldr	r2, [pc, #352]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

      // Turn on the regulator and enable the DSI PLL
      //---------------------------------------------
      DSI->WRPCR |= DSI_WRPCR_REGEN; // Regulator Enable
 800639e:	4b56      	ldr	r3, [pc, #344]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063a0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80063a4:	4a54      	ldr	r2, [pc, #336]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063aa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

      // TODO: timeout
      while( !(DSI->WISR & DSI_WISR_RRS) ) // Wait until the regulator is ready
 80063ae:	bf00      	nop
 80063b0:	4b51      	ldr	r3, [pc, #324]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80063b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1f3      	bne.n	80063b0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x88>
      // INFIN = CLKIN/IDF = 4,...,25MHz
      // Fvco = 500MHz - 1 GHz
      // ODF 2^0=1, 2^1=2, 2^2=4, 2^3=8
      // PHI 31,25 to 500MHz

      const DWORD pll_ODF  = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
      const DWORD pll_IDF  = 2;
 80063cc:	2302      	movs	r3, #2
 80063ce:	623b      	str	r3, [r7, #32]
      const DWORD pll_NDIV = RANGE( (DWORD)250000*pll_IDF/System_GetDSIclock(), (DWORD)10, (DWORD)125 );
 80063d0:	f7fa fb62 	bl	8000a98 <_Z18System_GetDSIclockv>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4a49      	ldr	r2, [pc, #292]	; (80064fc <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d4>)
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	227d      	movs	r2, #125	; 0x7d
 80063de:	210a      	movs	r1, #10
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 fe35 	bl	8008050 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>
 80063e6:	61f8      	str	r0, [r7, #28]
      const double F_PHI   = 500E6; /*Hz*/
 80063e8:	a341      	add	r3, pc, #260	; (adr r3, 80064f0 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1c8>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	e9c7 2304 	strd	r2, r3, [r7, #16]

      DSI->WRPCR &= ~( DSI_WRPCR_PLL_NDIV
 80063f2:	4b41      	ldr	r3, [pc, #260]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063f4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80063f8:	493f      	ldr	r1, [pc, #252]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80063fa:	4b41      	ldr	r3, [pc, #260]	; (8006500 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d8>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
                     | DSI_WRPCR_PLL_IDF
                     | DSI_WRPCR_PLL_ODF );
      DSI->WRPCR |=  ( (pll_NDIV <<  2)   // PLL N-Div
 8006402:	4b3d      	ldr	r3, [pc, #244]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006404:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4313      	orrs	r3, r2
 800640e:	4a3a      	ldr	r2, [pc, #232]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006414:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                     | (pll_IDF  << 11)   // PLL IDF
                     | (pll_ODF  << 16)); // PLL ODF

      DSI->WRPCR |= DSI_WRPCR_PLLEN; // PLL Enable
 8006418:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800641a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800641e:	4a36      	ldr	r2, [pc, #216]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

      // TODO: timeout
      while( !(DSI->WISR & DSI_WISR_PLLLS) ); // Wait for the lock of the PLL
 8006428:	bf00      	nop
 800642a:	4b33      	ldr	r3, [pc, #204]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800642c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f3      	bne.n	800642a <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x102>

      // Set Host PHY
      //-------------
      // D-PHY clock and digital lane
      DSI->PCTLR  = ( DSI_PCTLR_CKE    // Clock Enable
 8006442:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006444:	2206      	movs	r2, #6
 8006446:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                    | DSI_PCTLR_DEN ); // Digital Enable

      // Clock Lane Configuration
      DSI->CLCR  =  ( DSI_CLCR_DPCC    // D-PHY Clock Control: High-Speed mode
 800644a:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800644c:	2201      	movs	r2, #1
 800644e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                    |!DSI_CLCR_ACR );  // Automatic Clock lane Control: disabled

      // Host PHY Configuration Register
      DSI->PCONFR  =  ( (10 <<8 )      // Stop Wait Time: 10
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006454:	f640 2201 	movw	r2, #2561	; 0xa01
 8006458:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                      | 0x01 );        // Number of Lanes: 2

      // Set Clock configuration
      //------------------------
      // Clock Control register
      DSI->CCR  =  ( (0 << 8)          // Timeout Clock Division
 800645c:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800645e:	2204      	movs	r2, #4
 8006460:	609a      	str	r2, [r3, #8]
                   | (4 << 0) );       // TX Escape Clock Division

      //  Wrapper PHY Configuration Register 0
      DSI->WPCR[0] = (WORD)(1.0/(0.25E-9*F_PHI)); // Unit Interval multiplied by 4
 8006462:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006464:	2208      	movs	r2, #8
 8006466:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

       // Disable all error interrupts
      DSI->IER[0] = 0;
 800646a:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800646c:	2200      	movs	r2, #0
 800646e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      DSI->IER[1] = 0;
 8006472:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

      // Host mode Configuration Register
      DSI->MCR = DSI_MCR_CMDM; // Command mode: Command
 800647a:	4b1f      	ldr	r3, [pc, #124]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800647c:	2201      	movs	r2, #1
 800647e:	635a      	str	r2, [r3, #52]	; 0x34

      //  Wrapper     Configuration Register
      DSI->WCFGR  = ( DSI_WCFGR_DSIM    // Video transmission mode: Adapted Command mode
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006482:	220b      	movs	r2, #11
 8006484:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                    | !DSI_WCFGR_AR     // Automatic Refresh: disable
                    | !DSI_WCFGR_VSPOL  // VSync Polarity: fallig edge
                    | (0x05<<1) );      // Color multiplexing used by DSI Host: 24 bit

      // Host LTDC VCID Register
      DSI->LVCIDR = 0;                // Virtual Channel ID
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800648a:	2200      	movs	r2, #0
 800648c:	60da      	str	r2, [r3, #12]

      //  Host LTDC Polarity Configuration Register
      DSI->LPCR  =  (!DSI_LPCR_DEP    // Data Enable Polarity: active high
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006490:	2200      	movs	r2, #0
 8006492:	615a      	str	r2, [r3, #20]
                    |!DSI_LPCR_VSP    // VSYNC Polarity: shutdown pin active high
                    |!DSI_LPCR_HSP ); // HSYNC Polarity: HSYNC pin active high

      // Host LTDC Color Coding Register
      DSI->LCOLCR = ( !DSI_LCOLCR_LPE  // Loosely Packet Enable: disable
 8006494:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 8006496:	2205      	movs	r2, #5
 8006498:	611a      	str	r2, [r3, #16]
                    | 0x05           );// Color Coding: 24 bit

      // Host LTDC Command Configuration Register
      DSI->LCCR = Hsize; // Command Size, max size for LTDC write memory command (pixel)
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 800649c:	897b      	ldrh	r3, [r7, #10]
 800649e:	6653      	str	r3, [r2, #100]	; 0x64

      // Host Command mode Configuration Register,
      // select High-speed or Low-power mode:
      // Enable Low-power command
      DSI->CMCR = ( DSI_CMCR_GSW0TX
 80064a0:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1dc>)
 80064a4:	669a      	str	r2, [r3, #104]	; 0x68
                  | DSI_CMCR_DSR0TX
                  | DSI_CMCR_DLWTX
                  | 0   // Maximum Read Packet Size: High-speed
                  | 0); // Acknowledge Request Enable: disable

      if( useLTDC )
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d006      	beq.n	80064ba <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x192>
      {
        hwLTDC.Init( Hsize, Vsize );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3304      	adds	r3, #4
 80064b0:	893a      	ldrh	r2, [r7, #8]
 80064b2:	8979      	ldrh	r1, [r7, #10]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fc2b 	bl	8005d10 <_ZN9EmbSysLib2Hw8Ltdc_Mcu4InitEtt>
      }

      // DSI and wrapper enable
      DSI->CR  |= DSI_CR_EN;
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	6053      	str	r3, [r2, #4]
      DSI->WCR |= DSI_WCR_DSIEN;
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064cc:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064ce:	f043 0308 	orr.w	r3, r3, #8
 80064d2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
      // Host Clock Lane Timer Configuration Register
      //
      // see: https://www.keil.com/boards2/stmicroelectronics/stm32f746g_discovery, Keil.STM32F7xx_DFP.2.9.0.pack
      //      "But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.
      //        Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME."
      DSI->CLTCR = ( (35 <<  0)    // Low-Power to High-Speed Time
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064d8:	f04f 1223 	mov.w	r2, #2293795	; 0x230023
 80064dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    | (35 << 16) ); // High-Speed to Low-Power Time

      //  Host Data Lane Timer Configuration Register
      DSI->DLTCR = ( ( 0 <<  0 )   // Maximum Read Time
 80064e0:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1d0>)
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb+0x1e0>)
 80064e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                   | (35 << 16 )   // Low-Power To High-Speed Time
                   | (35 << 24 ) );// High-Speed To Low-Power Time

    } // end of init()
 80064e8:	bf00      	nop
 80064ea:	3728      	adds	r7, #40	; 0x28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	00000000 	.word	0x00000000
 80064f4:	41bdcd65 	.word	0x41bdcd65
 80064f8:	40016c00 	.word	0x40016c00
 80064fc:	0007a120 	.word	0x0007a120
 8006500:	fffc8603 	.word	0xfffc8603
 8006504:	000e7f00 	.word	0x000e7f00
 8006508:	23230000 	.word	0x23230000

0800650c <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt>:

    //---------------------------------------------------------------
    uint32_t startLTDC( WORD Hsize, WORD Vsize )
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
 8006518:	4613      	mov	r3, r2
 800651a:	803b      	strh	r3, [r7, #0]
    {
      // Host Command mode Configuration Register,
      // select High-speed or Low-power mode
      // Disable Low-power command
      DSI->CMCR = (!DSI_CMCR_GSW0TX
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt+0x3c>)
 800651e:	2200      	movs	r2, #0
 8006520:	669a      	str	r2, [r3, #104]	; 0x68
                  |!DSI_CMCR_DLWTX
                  | 0   // Maximum Read Packet Size: High-speed
                  | 0); // Acknowledge Request Enable: disable

      // Host Protocol Configuration Register
      DSI->PCR =  (!DSI_PCR_CRCRXE
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt+0x3c>)
 8006524:	2204      	movs	r2, #4
 8006526:	62da      	str	r2, [r3, #44]	; 0x2c
                  |!DSI_PCR_ECCRXE
                  | DSI_PCR_BTAE
                  |!DSI_PCR_ETRXE
                  |!DSI_PCR_ETTXE );

      DisplayRefresh();
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f881 	bl	8006630 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>

      return( hwLTDC.LayerConfig(Hsize, Vsize) );
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	1d18      	adds	r0, r3, #4
 8006532:	8879      	ldrh	r1, [r7, #2]
 8006534:	883a      	ldrh	r2, [r7, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	f7ff fc40 	bl	8005dbc <_ZN9EmbSysLib2Hw8Ltdc_Mcu11LayerConfigEmmh>
 800653c:	4603      	mov	r3, r0
    }
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40016c00 	.word	0x40016c00

0800654c <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh>:

    //---------------------------------------------------------------
    virtual void writeShort( uint8_t para0, uint8_t para1 )
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
 8006558:	4613      	mov	r3, r2
 800655a:	70bb      	strb	r3, [r7, #2]
    {
      // TODO: timeout
      while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 800655c:	bf00      	nop
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x48>)
 8006560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f4      	bne.n	800655e <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x12>

      // Host Generic Header Configuration Register
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
                  | (              0 <<  6)   // channel ID
                  | ((uint32_t)para0 <<  8)   // data
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	021a      	lsls	r2, r3, #8
                  | ((uint32_t)para1 << 16) );// data
 8006578:	78bb      	ldrb	r3, [r7, #2]
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	4313      	orrs	r3, r2
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
 800657e:	4a05      	ldr	r2, [pc, #20]	; (8006594 <_ZN9EmbSysLib2Hw7Dsi_Mcu10writeShortEhh+0x48>)
                  | ((uint32_t)para1 << 16) );// data
 8006580:	f043 0315 	orr.w	r3, r3, #21
      DSI->GHCR = ( 0x15                      // data type: DCS Write Short Packet 1 Parameters
 8006584:	66d3      	str	r3, [r2, #108]	; 0x6c
    }
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40016c00 	.word	0x40016c00

08006598 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm>:

    //---------------------------------------------------------------
    virtual void writeLong( uint8_t*para, uint32_t N )
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
    {
      uint32_t n = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

      // TODO: timeout
      while( !(DSI->GPSR & DSI_GPSR_CMDFE) ); // Wait for Command FIFO Empty
 80065a8:	bf00      	nop
 80065aa:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
 80065ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f4      	bne.n	80065aa <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x12>

      // TODO: Fehler,wenn N nicht durch 4 teilbar !!! Scheint aber nichts auszumachen ....

      // Set the DCS code hexadecimal on payload byte 1, and the other parameters on the write FIFO command
      while(n < N)
 80065c0:	e01f      	b.n	8006602 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x6a>
      {
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
                    | ((uint32_t)(*(para + n+1)) <<  8)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	3301      	adds	r3, #1
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	4413      	add	r3, r2
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	ea41 0203 	orr.w	r2, r1, r3
                    | ((uint32_t)(*(para + n+2)) << 16)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3302      	adds	r3, #2
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	440b      	add	r3, r1
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	431a      	orrs	r2, r3
                    | ((uint32_t)(*(para + n+3)) << 24) );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3303      	adds	r3, #3
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	440b      	add	r3, r1
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	061b      	lsls	r3, r3, #24
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80065f6:	490c      	ldr	r1, [pc, #48]	; (8006628 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
                    | ((uint32_t)(*(para + n+3)) << 24) );
 80065f8:	4313      	orrs	r3, r2
        DSI->GPDR = (  (uint32_t)(*(para + n  ))
 80065fa:	670b      	str	r3, [r1, #112]	; 0x70
        n += 4;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	3304      	adds	r3, #4
 8006600:	617b      	str	r3, [r7, #20]
      while(n < N)
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	429a      	cmp	r2, r3
 8006608:	d3db      	bcc.n	80065c2 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x2a>
      }

      // Host Generic Header Configuration Register
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
                  | ( 0         << 6)    // Virtual channel ID
                  | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x94>)
 8006610:	4013      	ands	r3, r2
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 8006612:	4a05      	ldr	r2, [pc, #20]	; (8006628 <_ZN9EmbSysLib2Hw7Dsi_Mcu9writeLongEPhm+0x90>)
                  | ((N&0xFFFF) << 8) ); // Word Count MSB+LSB
 8006614:	f043 0339 	orr.w	r3, r3, #57	; 0x39
      DSI->GHCR = ( 0x39                 // data type: DCS Write Long Packet
 8006618:	66d3      	str	r3, [r2, #108]	; 0x6c
    }
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40016c00 	.word	0x40016c00
 800662c:	00ffff00 	.word	0x00ffff00

08006630 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>:

    //---------------------------------------------------------------
    void DisplayRefresh()
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
    {
      DSI->WCR |= DSI_WCR_LTDCEN;
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv+0x24>)
 800663a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800663e:	4a05      	ldr	r2, [pc, #20]	; (8006654 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv+0x24>)
 8006640:	f043 0304 	orr.w	r3, r3, #4
 8006644:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    }
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40016c00 	.word	0x40016c00

08006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>:
    //---------------------------------------------------------------
    /*! Initialize memory access
        \param mem Reference to a memory object containing the image
        \param name Name of the content 
    */
    MemoryImage( Memory &mem, const char *name )
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b08b      	sub	sp, #44	; 0x2c
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]

    : Memory( ReportID_Hw::Module::MEMORY_IMAGE,  // moduleId 
              0,                                  // size, will be set later 
              0xFF,                               // default
              mem.isFlash() )
 8006664:	68fc      	ldr	r4, [r7, #12]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	331c      	adds	r3, #28
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68b8      	ldr	r0, [r7, #8]
 8006670:	4798      	blx	r3
 8006672:	4603      	mov	r3, r0
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	23ff      	movs	r3, #255	; 0xff
 8006678:	2200      	movs	r2, #0
 800667a:	218f      	movs	r1, #143	; 0x8f
 800667c:	4620      	mov	r0, r4
 800667e:	f7fd fac3 	bl	8003c08 <_ZN9EmbSysLib2Hw6MemoryC1Etmhb>
 8006682:	4a46      	ldr	r2, [pc, #280]	; (800679c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x144>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	601a      	str	r2, [r3, #0]

    {
      DWORD addr      = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
      DWORD signature = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]

      ptr  = 0;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	635a      	str	r2, [r3, #52]	; 0x34

      // read signature
      for( DWORD i = 0; i < sizeof(signature); i++ )
 8006696:	2300      	movs	r3, #0
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e012      	b.n	80066c2 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x6a>
      {
        ((BYTE*)&signature)[i] = mem.read( addr+i );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3310      	adds	r3, #16
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69f9      	ldr	r1, [r7, #28]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	1888      	adds	r0, r1, r2
 80066aa:	f107 0110 	add.w	r1, r7, #16
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	188c      	adds	r4, r1, r2
 80066b2:	4601      	mov	r1, r0
 80066b4:	68b8      	ldr	r0, [r7, #8]
 80066b6:	4798      	blx	r3
 80066b8:	4603      	mov	r3, r0
 80066ba:	7023      	strb	r3, [r4, #0]
      for( DWORD i = 0; i < sizeof(signature); i++ )
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	3301      	adds	r3, #1
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d9e9      	bls.n	800669c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x44>
      }
      addr += sizeof(signature);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	3304      	adds	r3, #4
 80066cc:	61fb      	str	r3, [r7, #28]
      
      if( signature == 0x20496D67 ) // signature correct?
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	4a33      	ldr	r2, [pc, #204]	; (80067a0 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x148>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d152      	bne.n	800677c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
      {
        while( addr < mem.getSize() )  // read up to end of memory
 80066d6:	e042      	b.n	800675e <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x106>
        {
          for( DWORD i = 0; i < sizeof(cd); i++ ) // read content descriptor
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e013      	b.n	8006706 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0xae>
          {
            ((BYTE*)&cd)[i] = mem.read( addr+i );
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3310      	adds	r3, #16
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69f9      	ldr	r1, [r7, #28]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	1888      	adds	r0, r1, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f102 0110 	add.w	r1, r2, #16
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	188c      	adds	r4, r1, r2
 80066f6:	4601      	mov	r1, r0
 80066f8:	68b8      	ldr	r0, [r7, #8]
 80066fa:	4798      	blx	r3
 80066fc:	4603      	mov	r3, r0
 80066fe:	7023      	strb	r3, [r4, #0]
          for( DWORD i = 0; i < sizeof(cd); i++ ) // read content descriptor
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3301      	adds	r3, #1
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b23      	cmp	r3, #35	; 0x23
 800670a:	d9e8      	bls.n	80066de <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x86>
          }
          if( cd.size == 0 || cd.name[0] == 0 )  // check content descriptor
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d033      	beq.n	800677c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d02f      	beq.n	800677c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
          {
            break;                               // no more contents
          }
          addr += sizeof(contentDescriptor);  // set addr to begin of content
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	61fb      	str	r3, [r7, #28]
          if( strcmp( cd.name, name ) == 0 )  // check name: content found?
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3310      	adds	r3, #16
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	f7f9 fdad 	bl	8000288 <strcmp>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0xfc>
          {
            size = cd.size;                   // get size and address of the memory
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]
            ptr  = (BYTE*)mem.getPtr() + addr;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	4798      	blx	r3
 8006748:	4602      	mov	r2, r0
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	441a      	add	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	635a      	str	r2, [r3, #52]	; 0x34
            break;                            // ready
 8006752:	e013      	b.n	800677c <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x124>
          }
          addr += cd.size; // set addr to next content
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	61fb      	str	r3, [r7, #28]
        while( addr < mem.getSize() )  // read up to end of memory
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3318      	adds	r3, #24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68b8      	ldr	r0, [r7, #8]
 8006768:	4798      	blx	r3
 800676a:	4602      	mov	r2, r0
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4293      	cmp	r3, r2
 8006770:	bf34      	ite	cc
 8006772:	2301      	movcc	r3, #1
 8006774:	2300      	movcs	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ad      	bne.n	80066d8 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x80>
        }
      }
      if( ptr == 0 )
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc+0x138>
      {
        report.error( ReportID_Hw::Event::WRONG_ID );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	330c      	adds	r3, #12
 8006788:	2107      	movs	r1, #7
 800678a:	4618      	mov	r0, r3
 800678c:	f7fc fd36 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
      }
    }
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd90      	pop	{r4, r7, pc}
 800679a:	bf00      	nop
 800679c:	08009500 	.word	0x08009500
 80067a0:	20496d67 	.word	0x20496d67

080067a4 <_ZN9EmbSysLib2Hw11MemoryImage6unlockEv>:

  public:
    //---------------------------------------------------------------
    virtual void unlock( void )
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    {
    }
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <_ZN9EmbSysLib2Hw11MemoryImage4lockEv>:

    //---------------------------------------------------------------
    virtual void lock( void )
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
    {
    }
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>:

    //---------------------------------------------------------------
    virtual const BYTE *getPtr( void )
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
    {
      return( ptr );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <_ZN9EmbSysLib2Hw11MemoryImage9writeByteEmh>:

  protected:
    //---------------------------------------------------------------
    virtual void writeByte( DWORD addr, BYTE  data )
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71fb      	strb	r3, [r7, #7]
    {
      // writing impossible
      report.error( ReportID_Hw::Event::FUNCTION_NOT_SUPPORTED );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	330c      	adds	r3, #12
 80067f6:	2102      	movs	r1, #2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fc fcff 	bl	80031fc <_ZN9EmbSysLib3Std6Report5errorEt>
    }
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <_ZN9EmbSysLib2Hw11MemoryImage8readByteEm>:
    //---------------------------------------------------------------
    // Reads a data byte from the memory hardware
    // addr:   Memory address
    // return: Data byte
    //
    virtual BYTE readByte( DWORD addr )
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
    {
      return( ptr[addr] );
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	4413      	add	r3, r2
 8006818:	781b      	ldrb	r3, [r3, #0]
    }
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>:
  public:
    //---------------------------------------------------------------
    /*! Initialize a TaskManager
        \param timer Timer object
    */
    TaskManager( Timer &timer )
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
    : timer( timer )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4618      	mov	r0, r3
 8006836:	f7f9 fdbf 	bl	80003b8 <_ZN9EmbSysLib2Hw5Timer4TaskC1Ev>
 800683a:	4a11      	ldr	r2, [pc, #68]	; (8006880 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE+0x58>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	609a      	str	r2, [r3, #8]
    {
      cycleTime = timer.getCycleTime();
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	4798      	blx	r3
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	619a      	str	r2, [r3, #24]
      tics      = 0;
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	e9c1 2304 	strd	r2, r3, [r1, #16]
      timer.add( this );
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3304      	adds	r3, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4611      	mov	r1, r2
 8006870:	6838      	ldr	r0, [r7, #0]
 8006872:	4798      	blx	r3
    }
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	080094e8 	.word	0x080094e8

08006884 <_ZN9EmbSysLib3Dev11TaskManager3addEPNS1_4TaskE>:
        a timer interrupt.
        \remark The update()-method of the TaskManager::Task may be
        called immediately, so call this add()-method only when the constructor of the Task-object is completed.
        \param ptr Pointer to the TaskManager::Task object
    */
    virtual void add( Task *ptr )
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
    {
      timer.add( ptr );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3304      	adds	r3, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4610      	mov	r0, r2
 80068a0:	4798      	blx	r3
    }
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <_ZN9EmbSysLib3Dev11TaskManager12getCycleTimeEv>:

    //---------------------------------------------------------------
    /*! Get cycle time of update() calls
        \return Cycle time in mikroseconds (us)
    */
    virtual DWORD getCycleTime( void )
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
    {
      return( cycleTime );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
    }
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <_ZN9EmbSysLib3Dev11TaskManager7getTicsEv>:
    //---------------------------------------------------------------
    /*! Returns the number of tics resp. number of cycles, the task
        handler is called
        \return Number of tics
    */
    virtual LWORD getTics( void )
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
    {
      return( tics );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    }
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <_ZN9EmbSysLib3Dev11TaskManager6updateEv>:

  private:
    //---------------------------------------------------------------
    virtual void update( void )
 80068de:	b4b0      	push	{r4, r5, r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
    {
      tics++;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80068ec:	1c54      	adds	r4, r2, #1
 80068ee:	f143 0500 	adc.w	r5, r3, #0
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	e9c3 4504 	strd	r4, r5, [r3, #16]
    }
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bcb0      	pop	{r4, r5, r7}
 8006900:	4770      	bx	lr

08006902 <_ZN15myReportHandler8onReportEttb>:
*/

//*******************************************************************
class myReportHandler : public EmbSysLib::Std::Report::Handler
{
  virtual void onReport( const WORD code, const WORD module, const bool isFatal )
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	461a      	mov	r2, r3
 8006910:	4603      	mov	r3, r0
 8006912:	817b      	strh	r3, [r7, #10]
 8006914:	460b      	mov	r3, r1
 8006916:	813b      	strh	r3, [r7, #8]
 8006918:	4613      	mov	r3, r2
 800691a:	71fb      	strb	r3, [r7, #7]
  {
    if( isFatal )
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d000      	beq.n	8006924 <_ZN15myReportHandler8onReportEttb+0x22>
    {
      while( 1 );
 8006922:	e7fe      	b.n	8006922 <_ZN15myReportHandler8onReportEttb+0x20>
    }
    else
    {
    }
  }
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <_ZN15myReportHandlerC1Ev>:
class myReportHandler : public EmbSysLib::Std::Report::Handler
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fc fca2 	bl	8003284 <_ZN9EmbSysLib3Std6Report7HandlerC1Ev>
 8006940:	4a03      	ldr	r2, [pc, #12]	; (8006950 <_ZN15myReportHandlerC1Ev+0x20>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	080094dc 	.word	0x080094dc

08006954 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh>:

    } Cmd_type;

  protected:
    //---------------------------------------------------------------
    DisplayGraphic_OTM8009A( Dsi_Mcu     &hwDSI,
 8006954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af04      	add	r7, sp, #16
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	70fb      	strb	r3, [r7, #3]
    : DisplayGraphic( ReportID_Hw::Module::DISPLAY_GRAPHIC_OTM8009A,
                      (orientation & LANDSCAPE)?lcd_x_size:lcd_y_size,
                      (orientation & LANDSCAPE)?lcd_y_size:lcd_x_size,
                      font,
                      zoom )
    , hwDSI( hwDSI )
 8006962:	68fc      	ldr	r4, [r7, #12]
                      (orientation & LANDSCAPE)?lcd_x_size:lcd_y_size,
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	f003 0301 	and.w	r3, r3, #1
    , hwDSI( hwDSI )
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x20>
 800696e:	f44f 7548 	mov.w	r5, #800	; 0x320
 8006972:	e001      	b.n	8006978 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x24>
 8006974:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
                      (orientation & LANDSCAPE)?lcd_y_size:lcd_x_size,
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	f003 0301 	and.w	r3, r3, #1
    , hwDSI( hwDSI )
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x34>
 8006982:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
 8006986:	e001      	b.n	800698c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x38>
 8006988:	f44f 7648 	mov.w	r6, #800	; 0x320
 800698c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006990:	9303      	str	r3, [sp, #12]
 8006992:	466b      	mov	r3, sp
 8006994:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006998:	ca07      	ldmia	r2, {r0, r1, r2}
 800699a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800699e:	4633      	mov	r3, r6
 80069a0:	462a      	mov	r2, r5
 80069a2:	21b2      	movs	r1, #178	; 0xb2
 80069a4:	4620      	mov	r0, r4
 80069a6:	f7fc fdcf 	bl	8003548 <_ZN9EmbSysLib2Hw14DisplayGraphicC1EtttNS0_4FontEh>
 80069aa:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0xf4>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
    {
      this->orientation = orientation;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      if( orientation & LANDSCAPE )
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x86>
      {
        Hsize = lcd_x_size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80069ce:	821a      	strh	r2, [r3, #16]
        Vsize = lcd_y_size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80069d6:	825a      	strh	r2, [r3, #18]
 80069d8:	e007      	b.n	80069ea <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh+0x96>
      }
      else
      {
        Hsize = lcd_y_size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80069e0:	821a      	strh	r2, [r3, #16]
        Vsize = lcd_x_size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80069e8:	825a      	strh	r2, [r3, #18]
      }

      ax = 0;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	865a      	strh	r2, [r3, #50]	; 0x32
      ay = 0;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	869a      	strh	r2, [r3, #52]	; 0x34
      aw = 0;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	86da      	strh	r2, [r3, #54]	; 0x36
      ah = 0;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	871a      	strh	r2, [r3, #56]	; 0x38
      xpos = 0;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	875a      	strh	r2, [r3, #58]	; 0x3a
      ypos = 0;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	879a      	strh	r2, [r3, #60]	; 0x3c

      // Reset LCD
      resetPin.setMode( Port::OutPP );
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2101      	movs	r1, #1
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
      resetPin.clr();
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
      System::delayMilliSec(20);
 8006a26:	2014      	movs	r0, #20
 8006a28:	f7f9 febe 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
      resetPin.set();
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3304      	adds	r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
      System::delayMilliSec(20);
 8006a38:	2014      	movs	r0, #20
 8006a3a:	f7f9 feb5 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>
    }
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	08009480 	.word	0x08009480

08006a4c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv>:
    hwDSI.writeShort( CMD_NOP, (cmd)&0xFF);        \
    hwDSI.writeLong( (BYTE*)data, sizeof(data)  ); }

//---------------------------------------------------------------
void DisplayGraphic_OTM8009A::init( )
{
 8006a4c:	b5b0      	push	{r4, r5, r7, lr}
 8006a4e:	b0e8      	sub	sp, #416	; 0x1a0
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a56:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a5a:	6018      	str	r0, [r3, #0]
                                                       // Enable CMD2 to access vendor specific commands
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,   0x80,0x09,0x01 ); // Enter in command 2 mode and set EXTC to enable address shift function (0x00)
 8006a5c:	4bbc      	ldr	r3, [pc, #752]	; (8006d50 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x304>)
 8006a5e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006a62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2100      	movs	r1, #0
 8006a82:	4798      	blx	r3
 8006a84:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA2,   0x80,0x09      ); // Enter ORISE Command 2: Shift address to 0x80
 8006aaa:	4aaa      	ldr	r2, [pc, #680]	; (8006d54 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x308>)
 8006aac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	8019      	strh	r1, [r3, #0]
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	0c12      	lsrs	r2, r2, #16
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ac0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ac8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006acc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	2100      	movs	r1, #0
 8006adc:	4798      	blx	r3
 8006ade:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ae2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006aea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006aee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3304      	adds	r3, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8006b00:	2203      	movs	r2, #3
 8006b02:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL, 0x30           ); // SD_PT: Source output level during porch and non-display area to GND
 8006b04:	f243 03c4 	movw	r3, #12484	; 0x30c4
 8006b08:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
 8006b0c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b10:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2280      	movs	r2, #128	; 0x80
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4798      	blx	r3
 8006b2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b32:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8006b50:	2202      	movs	r2, #2
 8006b52:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( NO_DOC1,     0x40           ); // undocumented!
 8006b54:	f244 03c4 	movw	r3, #16580	; 0x40c4
 8006b58:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8006b5c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	228a      	movs	r2, #138	; 0x8a
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4798      	blx	r3
 8006b7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b8a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006b8e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	4798      	blx	r3

  System::delayMilliSec(10);
 8006ba4:	200a      	movs	r0, #10
 8006ba6:	f7f9 fdff 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

  WRITE_CUSTOMER_ARRAY( PWR_CTRL4 + 1, 0xA9); // gvdd_en_test: enable GVDD test mode
 8006baa:	f64a 13c5 	movw	r3, #43461	; 0xa9c5
 8006bae:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8006bb2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006bb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006bbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006bc2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	22b1      	movs	r2, #177	; 0xb1
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4798      	blx	r3
 8006bd4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006bd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006be0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006be4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 1, 0x34); // pump 4 vgh voltage: 15.0v down to 13.0v
 8006bfa:	f243 43c5 	movw	r3, #13509	; 0x34c5
 8006bfe:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
 8006c02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c06:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2291      	movs	r2, #145	; 0x91
 8006c20:	2100      	movs	r1, #0
 8006c22:	4798      	blx	r3
 8006c24:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c30:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8006c46:	2202      	movs	r2, #2
 8006c48:	4798      	blx	r3
                                              // pump 5 vgh voltage: -12.0v downto -9.0v
  WRITE_CUSTOMER_ARRAY( P_DRV_M,       0x50); // Column inversion
 8006c4a:	f245 03c0 	movw	r3, #20672	; 0x50c0
 8006c4e:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
 8006c52:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c56:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c5e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c62:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	22b4      	movs	r2, #180	; 0xb4
 8006c70:	2100      	movs	r1, #0
 8006c72:	4798      	blx	r3
 8006c74:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c80:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006c84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006c96:	2202      	movs	r2, #2
 8006c98:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( VCOMDC,        0x4E); // VCOM Voltage: -1.0000v downto -1.2625v
 8006c9a:	f644 63d9 	movw	r3, #20185	; 0x4ed9
 8006c9e:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
 8006ca2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ca6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006cae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cb2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4798      	blx	r3
 8006cc4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cc8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006cd0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( OSC_ADJ,       0x66); // Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz)
 8006cea:	f246 63c1 	movw	r3, #26305	; 0x66c1
 8006cee:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
 8006cf2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006cf6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006cfe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2281      	movs	r2, #129	; 0x81
 8006d10:	2100      	movs	r1, #0
 8006d12:	4798      	blx	r3
 8006d14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8006d36:	2202      	movs	r2, #2
 8006d38:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x08); // Video mode internal
 8006d3a:	f640 03c1 	movw	r3, #2241	; 0x8c1
 8006d3e:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
 8006d42:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d46:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	e004      	b.n	8006d58 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x30c>
 8006d4e:	bf00      	nop
 8006d50:	010980ff 	.word	0x010980ff
 8006d54:	08008f38 	.word	0x08008f38
 8006d58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	22a1      	movs	r2, #161	; 0xa1
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4798      	blx	r3
 8006d70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006d80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006d92:	2202      	movs	r2, #2
 8006d94:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 2, 0x01); // pump 4&5 x6: ONLY VALID when PUMP4_EN_ASDM_HV = "0"
 8006d96:	f240 13c5 	movw	r3, #453	; 0x1c5
 8006d9a:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
 8006d9e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006da2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006daa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2292      	movs	r2, #146	; 0x92
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4798      	blx	r3
 8006dc0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006dcc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dd0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 8006de2:	2202      	movs	r2, #2
 8006de4:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 5, 0x36); // pump4 clock ratio: 1/2 line
 8006de6:	f243 63c5 	movw	r3, #14021	; 0x36c5
 8006dea:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
 8006dee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006df2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006dfa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006dfe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2295      	movs	r2, #149	; 0x95
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4798      	blx	r3
 8006e10:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e14:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e1c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8006e32:	2202      	movs	r2, #2
 8006e34:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GVDDSET,       0x79,  // GVDD/NGVDD settings
 8006e36:	4abb      	ldr	r2, [pc, #748]	; (8007124 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6d8>)
 8006e38:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	8019      	strh	r1, [r3, #0]
 8006e42:	3302      	adds	r3, #2
 8006e44:	0c12      	lsrs	r2, r2, #16
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e54:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2200      	movs	r2, #0
 8006e66:	2100      	movs	r1, #0
 8006e68:	4798      	blx	r3
 8006e6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3304      	adds	r3, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	4798      	blx	r3
                                       0x79);
  WRITE_CUSTOMER_ARRAY( PWR_CTRL2 + 4, 0x33); // Rewrite the default value !
 8006e90:	f243 33c5 	movw	r3, #13253	; 0x33c5
 8006e94:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
 8006e98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006e9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ea4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ea8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2294      	movs	r2, #148	; 0x94
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4798      	blx	r3
 8006eba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ebe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ec6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006eca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8006edc:	2202      	movs	r2, #2
 8006ede:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_CTRL + 1,   0x1B); // Panel display timing Setting 3
 8006ee0:	f44f 53de 	mov.w	r3, #7104	; 0x1bc0
 8006ee4:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8006ee8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006eec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ef4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ef8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	22a3      	movs	r2, #163	; 0xa3
 8006f06:	2100      	movs	r1, #0
 8006f08:	4798      	blx	r3
 8006f0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f0e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f16:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f1a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3304      	adds	r3, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 2, 0x83); // Power control 1
 8006f30:	f248 33c5 	movw	r3, #33733	; 0x83c5
 8006f34:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 8006f38:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f44:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2282      	movs	r2, #130	; 0x82
 8006f56:	2100      	movs	r1, #0
 8006f58:	4798      	blx	r3
 8006f5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f6a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3304      	adds	r3, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( SD_PCH_CTRL +1,0x83); // Source driver precharge
 8006f80:	f248 33c4 	movw	r3, #33732	; 0x83c4
 8006f84:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8006f88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f94:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006f98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2281      	movs	r2, #129	; 0x81
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4798      	blx	r3
 8006faa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fb6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8006fcc:	2202      	movs	r2, #2
 8006fce:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( RGB_VIDEO_SET, 0x0E);
 8006fd0:	f640 63c1 	movw	r3, #3777	; 0xec1
 8006fd4:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 8006fd8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fdc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fe4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006fe8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	22a1      	movs	r2, #161	; 0xa1
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4798      	blx	r3
 8006ffa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8006ffe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007006:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800700a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3304      	adds	r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800701c:	2202      	movs	r2, #2
 800701e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANSET,        0x00,0x01);
 8007020:	4a41      	ldr	r2, [pc, #260]	; (8007128 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6dc>)
 8007022:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	4611      	mov	r1, r2
 800702a:	8019      	strh	r1, [r3, #0]
 800702c:	3302      	adds	r3, #2
 800702e:	0c12      	lsrs	r2, r2, #16
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007036:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800703e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007042:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	22a6      	movs	r2, #166	; 0xa6
 8007050:	2100      	movs	r1, #0
 8007052:	4798      	blx	r3
 8007054:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007058:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007060:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007064:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3304      	adds	r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8007076:	2203      	movs	r2, #3
 8007078:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( GOAVST,        0x85,0x01,0x00,0x84,0x01,0x00);
 800707a:	4a2c      	ldr	r2, [pc, #176]	; (800712c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e0>)
 800707c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007084:	6018      	str	r0, [r3, #0]
 8007086:	3304      	adds	r3, #4
 8007088:	8019      	strh	r1, [r3, #0]
 800708a:	3302      	adds	r3, #2
 800708c:	0c0a      	lsrs	r2, r1, #16
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007094:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800709c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2280      	movs	r2, #128	; 0x80
 80070ae:	2100      	movs	r1, #0
 80070b0:	4798      	blx	r3
 80070b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3304      	adds	r3, #4
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80070d4:	2207      	movs	r2, #7
 80070d6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOACLKA1,      0x18,0x04,0x03,0x39,0x00,0x00,0x00,0x18,0x03,0x03,0x3A,0x00,0x00,0x00);
 80070d8:	4b15      	ldr	r3, [pc, #84]	; (8007130 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e4>)
 80070da:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 80070de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e0:	c407      	stmia	r4!, {r0, r1, r2}
 80070e2:	8023      	strh	r3, [r4, #0]
 80070e4:	3402      	adds	r4, #2
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	7023      	strb	r3, [r4, #0]
 80070ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80070fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	22a0      	movs	r2, #160	; 0xa0
 8007108:	2100      	movs	r1, #0
 800710a:	4798      	blx	r3
 800710c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007110:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007118:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800711c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007120:	e008      	b.n	8007134 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x6e8>
 8007122:	bf00      	nop
 8007124:	08008f3c 	.word	0x08008f3c
 8007128:	08008f40 	.word	0x08008f40
 800712c:	08008f44 	.word	0x08008f44
 8007130:	08008f4c 	.word	0x08008f4c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3304      	adds	r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8007142:	220f      	movs	r2, #15
 8007144:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOACLKA3,      0x18,0x02,0x03,0x3B,0x00,0x00,0x00,0x18,0x01,0x03,0x3C,0x00,0x00,0x00);
 8007146:	4bb7      	ldr	r3, [pc, #732]	; (8007424 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9d8>)
 8007148:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 800714c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800714e:	c407      	stmia	r4!, {r0, r1, r2}
 8007150:	8023      	strh	r3, [r4, #0]
 8007152:	3402      	adds	r4, #2
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	7023      	strb	r3, [r4, #0]
 8007158:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800715c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007164:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007168:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	22b0      	movs	r2, #176	; 0xb0
 8007176:	2100      	movs	r1, #0
 8007178:	4798      	blx	r3
 800717a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800717e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007186:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800718a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3304      	adds	r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800719c:	220f      	movs	r2, #15
 800719e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GOAECLK,       0x01,0x01,0x20,0x20,0x00,0x00,0x01,0x02,0x00,0x00);
 80071a0:	4aa1      	ldr	r2, [pc, #644]	; (8007428 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9dc>)
 80071a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80071a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80071a8:	c303      	stmia	r3!, {r0, r1}
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	3302      	adds	r3, #2
 80071ae:	0c12      	lsrs	r2, r2, #16
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	22c0      	movs	r2, #192	; 0xc0
 80071d0:	2100      	movs	r1, #0
 80071d2:	4798      	blx	r3
 80071d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80071e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3304      	adds	r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80071f6:	220b      	movs	r2, #11
 80071f8:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC2,       0x00); // undocumented!
 80071fa:	23cf      	movs	r3, #207	; 0xcf
 80071fc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 8007200:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007204:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800720c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007210:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	22d0      	movs	r2, #208	; 0xd0
 800721e:	2100      	movs	r1, #0
 8007220:	4798      	blx	r3
 8007222:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007226:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800722e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007232:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3304      	adds	r3, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8007244:	2202      	movs	r2, #2
 8007246:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PANCTRLSET1,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8007248:	4a78      	ldr	r2, [pc, #480]	; (800742c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e0>)
 800724a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800724e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007250:	c303      	stmia	r3!, {r0, r1}
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	3302      	adds	r3, #2
 8007256:	0c12      	lsrs	r2, r2, #16
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800725e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007266:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800726a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	2100      	movs	r1, #0
 800727a:	4798      	blx	r3
 800727c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007280:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007288:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800728c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3304      	adds	r3, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800729e:	220b      	movs	r2, #11
 80072a0:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET2,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80072a2:	4b63      	ldr	r3, [pc, #396]	; (8007430 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e4>)
 80072a4:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80072a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80072ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2290      	movs	r2, #144	; 0x90
 80072cc:	2100      	movs	r1, #0
 80072ce:	4798      	blx	r3
 80072d0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072dc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80072e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3304      	adds	r3, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80072f2:	2210      	movs	r2, #16
 80072f4:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET3,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80072f6:	4b4e      	ldr	r3, [pc, #312]	; (8007430 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e4>)
 80072f8:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80072fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007302:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007306:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800730e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007312:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	22a0      	movs	r2, #160	; 0xa0
 8007320:	2100      	movs	r1, #0
 8007322:	4798      	blx	r3
 8007324:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007328:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007330:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007334:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3304      	adds	r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8007346:	2210      	movs	r2, #16
 8007348:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET4,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 800734a:	4a38      	ldr	r2, [pc, #224]	; (800742c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e0>)
 800734c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007350:	ca07      	ldmia	r2, {r0, r1, r2}
 8007352:	c303      	stmia	r3!, {r0, r1}
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	3302      	adds	r3, #2
 8007358:	0c12      	lsrs	r2, r2, #16
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007360:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007368:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800736c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	22b0      	movs	r2, #176	; 0xb0
 800737a:	2100      	movs	r1, #0
 800737c:	4798      	blx	r3
 800737e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007382:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800738a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800738e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3304      	adds	r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80073a0:	220b      	movs	r2, #11
 80073a2:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET5,   0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80073a4:	4b23      	ldr	r3, [pc, #140]	; (8007434 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9e8>)
 80073a6:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80073aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80073bc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	22c0      	movs	r2, #192	; 0xc0
 80073ce:	2100      	movs	r1, #0
 80073d0:	4798      	blx	r3
 80073d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80073de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80073e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3304      	adds	r3, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80073f4:	2210      	movs	r2, #16
 80073f6:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET6,   0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00);
 80073f8:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9ec>)
 80073fa:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80073fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007404:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007408:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007410:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007414:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	22d0      	movs	r2, #208	; 0xd0
 8007422:	e00b      	b.n	800743c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x9f0>
 8007424:	08008f5c 	.word	0x08008f5c
 8007428:	08008f6c 	.word	0x08008f6c
 800742c:	08008f78 	.word	0x08008f78
 8007430:	08008f84 	.word	0x08008f84
 8007434:	08008f94 	.word	0x08008f94
 8007438:	08008fa4 	.word	0x08008fa4
 800743c:	2100      	movs	r1, #0
 800743e:	4798      	blx	r3
 8007440:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007444:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800744c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007450:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3304      	adds	r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8007462:	2210      	movs	r2, #16
 8007464:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET7,   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 8007466:	4aba      	ldr	r2, [pc, #744]	; (8007750 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd04>)
 8007468:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800746c:	ca07      	ldmia	r2, {r0, r1, r2}
 800746e:	c303      	stmia	r3!, {r0, r1}
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	3302      	adds	r3, #2
 8007474:	0c12      	lsrs	r2, r2, #16
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800747c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007484:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007488:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	22e0      	movs	r2, #224	; 0xe0
 8007496:	2100      	movs	r1, #0
 8007498:	4798      	blx	r3
 800749a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800749e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3304      	adds	r3, #4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80074bc:	220b      	movs	r2, #11
 80074be:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANCTRLSET8,   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);
 80074c0:	4aa4      	ldr	r2, [pc, #656]	; (8007754 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd08>)
 80074c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80074c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80074c8:	c303      	stmia	r3!, {r0, r1}
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	3302      	adds	r3, #2
 80074ce:	0c12      	lsrs	r2, r2, #16
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	22f0      	movs	r2, #240	; 0xf0
 80074f0:	2100      	movs	r1, #0
 80074f2:	4798      	blx	r3
 80074f4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80074f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007500:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007504:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3304      	adds	r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8007516:	220b      	movs	r2, #11
 8007518:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D1,       0x00,0x26,0x09,0x0B,0x01,0x25,0x00,0x00,0x00,0x00);
 800751a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800751e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007522:	4a8d      	ldr	r2, [pc, #564]	; (8007758 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd0c>)
 8007524:	ca07      	ldmia	r2, {r0, r1, r2}
 8007526:	c303      	stmia	r3!, {r0, r1}
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	3302      	adds	r3, #2
 800752c:	0c12      	lsrs	r2, r2, #16
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007534:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800753c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007540:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2280      	movs	r2, #128	; 0x80
 800754e:	2100      	movs	r1, #0
 8007550:	4798      	blx	r3
 8007552:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007556:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800755e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007562:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3304      	adds	r3, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8007574:	220b      	movs	r2, #11
 8007576:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x0A,0x0C,0x02);
 8007578:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800757c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007580:	4a76      	ldr	r2, [pc, #472]	; (800775c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd10>)
 8007582:	461c      	mov	r4, r3
 8007584:	4613      	mov	r3, r2
 8007586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800758c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007590:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007598:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800759c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2290      	movs	r2, #144	; 0x90
 80075aa:	2100      	movs	r1, #0
 80075ac:	4798      	blx	r3
 80075ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3304      	adds	r3, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80075d0:	2210      	movs	r2, #16
 80075d2:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PANU2D3,       0x25,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80075d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80075dc:	4a60      	ldr	r2, [pc, #384]	; (8007760 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd14>)
 80075de:	461c      	mov	r4, r3
 80075e0:	4613      	mov	r3, r2
 80075e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80075e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80075e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075f4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80075f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	22a0      	movs	r2, #160	; 0xa0
 8007606:	2100      	movs	r1, #0
 8007608:	4798      	blx	r3
 800760a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800760e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007616:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800761a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3304      	adds	r3, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800762c:	2210      	movs	r2, #16
 800762e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U1,       0x00,0x25,0x0C,0x0A,0x02,0x26,0x00,0x00,0x00,0x00);
 8007630:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007638:	4a4a      	ldr	r2, [pc, #296]	; (8007764 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd18>)
 800763a:	ca07      	ldmia	r2, {r0, r1, r2}
 800763c:	c303      	stmia	r3!, {r0, r1}
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	3302      	adds	r3, #2
 8007642:	0c12      	lsrs	r2, r2, #16
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800764a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007652:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007656:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	22b0      	movs	r2, #176	; 0xb0
 8007664:	2100      	movs	r1, #0
 8007666:	4798      	blx	r3
 8007668:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800766c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007674:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007678:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3304      	adds	r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800768a:	220b      	movs	r2, #11
 800768c:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U2,       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x25,0x0B,0x09,0x01);
 800768e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007692:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007696:	4a34      	ldr	r2, [pc, #208]	; (8007768 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd1c>)
 8007698:	461c      	mov	r4, r3
 800769a:	4613      	mov	r3, r2
 800769c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800769e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076a2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	22c0      	movs	r2, #192	; 0xc0
 80076c0:	2100      	movs	r1, #0
 80076c2:	4798      	blx	r3
 80076c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076d0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3304      	adds	r3, #4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80076e6:	2210      	movs	r2, #16
 80076e8:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( PAND2U3,       0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00);
 80076ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80076ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80076f2:	4a1e      	ldr	r2, [pc, #120]	; (800776c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd20>)
 80076f4:	461c      	mov	r4, r3
 80076f6:	4613      	mov	r3, r2
 80076f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076fe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007702:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800770a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800770e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	22d0      	movs	r2, #208	; 0xd0
 800771c:	2100      	movs	r1, #0
 800771e:	4798      	blx	r3
 8007720:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007724:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800772c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007730:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3304      	adds	r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8007742:	2210      	movs	r2, #16
 8007744:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWR_CTRL1 + 1, 0x66); // Pump 1 min and max DM
 8007746:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800774a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800774e:	e00f      	b.n	8007770 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xd24>
 8007750:	08008f78 	.word	0x08008f78
 8007754:	08008fb4 	.word	0x08008fb4
 8007758:	08008fc0 	.word	0x08008fc0
 800775c:	08008fcc 	.word	0x08008fcc
 8007760:	08008fdc 	.word	0x08008fdc
 8007764:	08008fec 	.word	0x08008fec
 8007768:	08008ff8 	.word	0x08008ff8
 800776c:	08009008 	.word	0x08009008
 8007770:	f246 62c5 	movw	r2, #26309	; 0x66c5
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800777a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007782:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007786:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2281      	movs	r2, #129	; 0x81
 8007794:	2100      	movs	r1, #0
 8007796:	4798      	blx	r3
 8007798:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800779c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80077a4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3304      	adds	r3, #4
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80077ba:	2202      	movs	r2, #2
 80077bc:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( PWM_PARA3,       32); // PWM-Freq, DBF=4,141 kHz (if PWM_FREQ_SEL[1:0]=01)
 80077be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80077c6:	f242 02c6 	movw	r2, #8390	; 0x20c6
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80077d8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	22b1      	movs	r2, #177	; 0xb1
 80077ea:	2100      	movs	r1, #0
 80077ec:	4798      	blx	r3
 80077ee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80077fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80077fe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3304      	adds	r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8007810:	2202      	movs	r2, #2
 8007812:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( NO_DOC3,       0x06); // undocumented, but important
 8007814:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007818:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800781c:	f240 62f5 	movw	r2, #1781	; 0x6f5
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007826:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800782e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007832:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	22b6      	movs	r2, #182	; 0xb6
 8007840:	2100      	movs	r1, #0
 8007842:	4798      	blx	r3
 8007844:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007848:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007850:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007854:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3304      	adds	r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007866:	2202      	movs	r2, #2
 8007868:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( CMD2_ENA1,     0xFF,  // Exit CMD2 mode
 800786a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800786e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800787c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007884:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007888:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2200      	movs	r2, #0
 8007896:	2100      	movs	r1, #0
 8007898:	4798      	blx	r3
 800789a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800789e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3304      	adds	r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80078bc:	2204      	movs	r2, #4
 80078be:	4798      	blx	r3
                                       0xFF,0xFF);

  WRITE_SYS_CMD( CMD_NOP, 0x00 ); // NOP - goes back to DCS std command ?
 80078c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	4798      	blx	r3

  WRITE_CUSTOMER_ARRAY( GMCT2_2P,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 80078e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80078ea:	4a62      	ldr	r2, [pc, #392]	; (8007a74 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1028>)
 80078ec:	461c      	mov	r4, r3
 80078ee:	4615      	mov	r5, r2
 80078f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	7023      	strb	r3, [r4, #0]
 80078f8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80078fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007904:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007908:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2200      	movs	r2, #0
 8007916:	2100      	movs	r1, #0
 8007918:	4798      	blx	r3
 800791a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800791e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007926:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800792a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3304      	adds	r3, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800793c:	2211      	movs	r2, #17
 800793e:	4798      	blx	r3
  WRITE_CUSTOMER_ARRAY( GMCT2_2N,  0x00,0x09,0x0F,0x0E,0x07,0x10,0x0B,0x0A,0x04,0x07,0x0B,0x08,0x0F,0x10,0x0A,0x01);
 8007940:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007944:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007948:	4a4b      	ldr	r2, [pc, #300]	; (8007a78 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x102c>)
 800794a:	461c      	mov	r4, r3
 800794c:	4615      	mov	r5, r2
 800794e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007952:	682b      	ldr	r3, [r5, #0]
 8007954:	7023      	strb	r3, [r4, #0]
 8007956:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800795a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007962:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007966:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	4798      	blx	r3
 8007978:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800797c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007984:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007988:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3304      	adds	r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f107 011c 	add.w	r1, r7, #28
 800799a:	2211      	movs	r2, #17
 800799c:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_SLPOUT, 0x00 ); // Send Sleep Out command to display : no parameter
 800799e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80079aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	2111      	movs	r1, #17
 80079be:	4798      	blx	r3

  System::delayMilliSec(120);
 80079c0:	2078      	movs	r0, #120	; 0x78
 80079c2:	f7f8 fef1 	bl	80007a8 <_ZN9EmbSysLib2Hw6System13delayMilliSecEt>

  WRITE_SYS_CMD( CMD_COLMOD, 0x77 ); // RGB888, MCU: 24bit/pixel, RGB:24bit/pixel,1-times
 80079c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80079d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2277      	movs	r2, #119	; 0x77
 80079e4:	213a      	movs	r1, #58	; 0x3a
 80079e6:	4798      	blx	r3


  switch( orientation )
 80079e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d040      	beq.n	8007a7c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1030>
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	dc03      	bgt.n	8007a06 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xfba>
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d025      	beq.n	8007a4e <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1002>
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d011      	beq.n	8007a2a <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0xfde>
  {
    default:                                      //MY     MX     MV
    case PORTRAIT_0:    WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(0<<6)|(0<<5) ); break;
 8007a06:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a12:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a16:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2136      	movs	r1, #54	; 0x36
 8007a26:	4798      	blx	r3
 8007a28:	e03a      	b.n	8007aa0 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
    case PORTRAIT_180:  WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(1<<6)|(0<<5) ); break;
 8007a2a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a2e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a3a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	22c0      	movs	r2, #192	; 0xc0
 8007a48:	2136      	movs	r1, #54	; 0x36
 8007a4a:	4798      	blx	r3
 8007a4c:	e028      	b.n	8007aa0 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
    case LANDSCAPE_90:  WRITE_SYS_CMD( CMD_MADCTR, (0<<7)|(1<<6)|(1<<5) ); break;
 8007a4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a5e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2260      	movs	r2, #96	; 0x60
 8007a6c:	2136      	movs	r1, #54	; 0x36
 8007a6e:	4798      	blx	r3
 8007a70:	e016      	b.n	8007aa0 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv+0x1054>
 8007a72:	bf00      	nop
 8007a74:	08009018 	.word	0x08009018
 8007a78:	0800902c 	.word	0x0800902c
    case LANDSCAPE_270:  WRITE_SYS_CMD( CMD_MADCTR, (1<<7)|(0<<6)|(1<<5) ); break;
 8007a7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	22a0      	movs	r2, #160	; 0xa0
 8007a9a:	2136      	movs	r1, #54	; 0x36
 8007a9c:	4798      	blx	r3
 8007a9e:	bf00      	nop
  }
                           // Start-Addr,  End-Addr
  WRITE_SYS_ARRAY( CMD_CASET, 0x00, 0x00,  (BYTE)((Hsize-1)>>8), (BYTE)((Hsize-1)&0xFF) );
 8007aa0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007aa4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	711a      	strb	r2, [r3, #4]
 8007aae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ab2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ab6:	222a      	movs	r2, #42	; 0x2a
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007abe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	8a1b      	ldrh	r3, [r3, #16]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	121b      	asrs	r3, r3, #8
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ad0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ad4:	70da      	strb	r2, [r3, #3]
 8007ad6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ada:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	8a1b      	ldrh	r3, [r3, #16]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007aec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007af0:	711a      	strb	r2, [r3, #4]
 8007af2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007af6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007afe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f107 0114 	add.w	r1, r7, #20
 8007b14:	2205      	movs	r2, #5
 8007b16:	4798      	blx	r3
  WRITE_SYS_ARRAY( CMD_PASET, 0x00, 0x00,  (BYTE)((Vsize-1)>>8), (BYTE)((Vsize-1)&0xFF) );
 8007b18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b1c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	711a      	strb	r2, [r3, #4]
 8007b26:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b2e:	222b      	movs	r2, #43	; 0x2b
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b36:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	8a5b      	ldrh	r3, [r3, #18]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	121b      	asrs	r3, r3, #8
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b48:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b4c:	70da      	strb	r2, [r3, #3]
 8007b4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	8a5b      	ldrh	r3, [r3, #18]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b64:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b68:	711a      	strb	r2, [r3, #4]
 8007b6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f107 010c 	add.w	r1, r7, #12
 8007b8c:	2205      	movs	r2, #5
 8007b8e:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_WRDISBV,  0x7F ); // Display Brightness: medium
 8007b90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ba0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	227f      	movs	r2, #127	; 0x7f
 8007bae:	2151      	movs	r1, #81	; 0x51
 8007bb0:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCTRLD,  0x2C ); // Control Display: Brightness Control Block: On,
 8007bb2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007bbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bc2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	222c      	movs	r2, #44	; 0x2c
 8007bd0:	2153      	movs	r1, #83	; 0x53
 8007bd2:	4798      	blx	r3
                                       //                  Display Dimming: on
                                       //                  BackLight: on
  WRITE_SYS_CMD( CMD_WRCABC,   0x02 ); // Content Adaptive Brightness: Still Picture
 8007bd4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007be0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007be4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	2155      	movs	r1, #85	; 0x55
 8007bf4:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_WRCABCMB, 0x7F ); // CABC Minimum Brightness: maximum
 8007bf6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bfa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c06:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	227f      	movs	r2, #127	; 0x7f
 8007c14:	215e      	movs	r1, #94	; 0x5e
 8007c16:	4798      	blx	r3

  WRITE_SYS_CMD( CMD_DISPOFF, 0x00 ); // Display Off
 8007c18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c24:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2128      	movs	r1, #40	; 0x28
 8007c38:	4798      	blx	r3
  WRITE_SYS_CMD( CMD_NOP,    0x00 ); // NOP command
 8007c3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c46:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4798      	blx	r3
}
 8007c5c:	bf00      	nop
 8007c5e:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bdb0      	pop	{r4, r5, r7, pc}
 8007c66:	bf00      	nop

08007c68 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>:
//
// DisplayGraphic_OTM8009Aram
//
//*******************************************************************
//---------------------------------------------------------------
DisplayGraphic_OTM8009Aram::DisplayGraphic_OTM8009Aram( Dsi_Mcu     &hwDSI,
 8007c68:	b5b0      	push	{r4, r5, r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af04      	add	r7, sp, #16
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	70fb      	strb	r3, [r7, #3]
                                                        Port::Pin   &resetPin,
                                                        Orientation  orientation,
                                                        Font         font,
                                                        BYTE         zoom )

: DisplayGraphic_OTM8009A( hwDSI, resetPin, orientation, font, zoom )
 8007c76:	68fc      	ldr	r4, [r7, #12]
 8007c78:	78fd      	ldrb	r5, [r7, #3]
 8007c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	466b      	mov	r3, sp
 8007c82:	f107 0220 	add.w	r2, r7, #32
 8007c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7fe fe5e 	bl	8006954 <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009AC1ERNS0_7Dsi_McuERNS0_4Port3PinENS1_11OrientationENS0_4FontEh>
 8007c98:	4a18      	ldr	r2, [pc, #96]	; (8007cfc <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh+0x94>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]
{
   this->hwDSI.Init( Hsize, Vsize, true );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8a19      	ldrh	r1, [r3, #16]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8a5a      	ldrh	r2, [r3, #18]
 8007caa:	2301      	movs	r3, #1
 8007cac:	f7fe fb3c 	bl	8006328 <_ZN9EmbSysLib2Hw7Dsi_Mcu4InitEttb>

  DisplayGraphic_OTM8009A::init( );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe feca 	bl	8006a4c <_ZN9EmbSysLib2Hw23DisplayGraphic_OTM8009A4initEv>

  ptrStart = (__IO uint16_t *)this->hwDSI.startLTDC( Hsize, Vsize );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8a19      	ldrh	r1, [r3, #16]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8a5b      	ldrh	r3, [r3, #18]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f7fe fc21 	bl	800650c <_ZN9EmbSysLib2Hw7Dsi_Mcu9startLTDCEtt>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44
  ptr      = ptrStart;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40

  WRITE_SYS_CMD( CMD_DISPON, 0x00);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2129      	movs	r1, #41	; 0x29
 8007ce4:	68b8      	ldr	r0, [r7, #8]
 8007ce6:	4798      	blx	r3
  this->hwDSI.DisplayRefresh();
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fc9f 	bl	8006630 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>
}
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007cfc:	08009424 	.word	0x08009424

08007d00 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram7refreshEv>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::refresh( void )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  hwDSI.DisplayRefresh();
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fc8f 	bl	8006630 <_ZN9EmbSysLib2Hw7Dsi_Mcu14DisplayRefreshEv>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::clear( void )
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  ptr = ptrStart;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
  __IO uint16_t *ptrEnd = ptr + Hsize*Vsize*sizeof(uint16_t);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8a1b      	ldrh	r3, [r3, #16]
 8007d32:	4619      	mov	r1, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8a5b      	ldrh	r3, [r3, #18]
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
  while( ptr < ptrEnd )
 8007d42:	e007      	b.n	8007d54 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv+0x3a>
    *ptr++ = BackColor;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	1c99      	adds	r1, r3, #2
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6411      	str	r1, [r2, #64]	; 0x40
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8007d52:	801a      	strh	r2, [r3, #0]
  while( ptr < ptrEnd )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d8f2      	bhi.n	8007d44 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram5clearEv+0x2a>
}
 8007d5e:	bf00      	nop
 8007d60:	bf00      	nop
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram7setAreaEtttt>:
//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setArea( WORD x,
                                          WORD y,
                                          WORD w,
                                          WORD h )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	4608      	mov	r0, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	817b      	strh	r3, [r7, #10]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	813b      	strh	r3, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  ax = x;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	897a      	ldrh	r2, [r7, #10]
 8007d8a:	865a      	strh	r2, [r3, #50]	; 0x32
  ay = y;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	893a      	ldrh	r2, [r7, #8]
 8007d90:	869a      	strh	r2, [r3, #52]	; 0x34
  aw = w;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	88fa      	ldrh	r2, [r7, #6]
 8007d96:	86da      	strh	r2, [r3, #54]	; 0x36
  ah = h;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8b3a      	ldrh	r2, [r7, #24]
 8007d9c:	871a      	strh	r2, [r3, #56]	; 0x38
  xpos   = ax;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	875a      	strh	r2, [r3, #58]	; 0x3a
  ypos   = ay*Hsize;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8a1b      	ldrh	r3, [r3, #16]
 8007dae:	fb12 f303 	smulbb	r3, r2, r3
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  offset = (DWORD)y*Hsize + x;
 8007db8:	893b      	ldrh	r3, [r7, #8]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	8a12      	ldrh	r2, [r2, #16]
 8007dbe:	fb03 f202 	mul.w	r2, r3, r2
 8007dc2:	897b      	ldrh	r3, [r7, #10]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	649a      	str	r2, [r3, #72]	; 0x48

  ptr = ptrStart + offset;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEttt>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setPixel( WORD color,
                                           WORD x,
                                           WORD y )
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	461a      	mov	r2, r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	817b      	strh	r3, [r7, #10]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	813b      	strh	r3, [r7, #8]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	80fb      	strh	r3, [r7, #6]
   ptr = ptrStart + (DWORD)y*Hsize + x;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	68f9      	ldr	r1, [r7, #12]
 8007e08:	8a09      	ldrh	r1, [r1, #16]
 8007e0a:	fb03 f101 	mul.w	r1, r3, r1
 8007e0e:	893b      	ldrh	r3, [r7, #8]
 8007e10:	440b      	add	r3, r1
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	441a      	add	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	641a      	str	r2, [r3, #64]	; 0x40
  *ptr = color;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	897a      	ldrh	r2, [r7, #10]
 8007e20:	801a      	strh	r2, [r3, #0]
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEt>:

//---------------------------------------------------------------
void DisplayGraphic_OTM8009Aram::setPixel( WORD color )
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	807b      	strh	r3, [r7, #2]
  *ptr++ = color;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	1c99      	adds	r1, r3, #2
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6411      	str	r1, [r2, #64]	; 0x40
 8007e44:	887a      	ldrh	r2, [r7, #2]
 8007e46:	801a      	strh	r2, [r3, #0]
  xpos++;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	875a      	strh	r2, [r3, #58]	; 0x3a
  if( xpos >= ax+aw)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e5e:	4619      	mov	r1, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e64:	440b      	add	r3, r1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	db18      	blt.n	8007e9c <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009Aram8setPixelEt+0x6e>
  {
    xpos = ax;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	875a      	strh	r2, [r3, #58]	; 0x3a
    ypos++;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e76:	3301      	adds	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
    offset += Hsize;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	8a12      	ldrh	r2, [r2, #16]
 8007e86:	441a      	add	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	649a      	str	r2, [r3, #72]	; 0x48
    ptr = ptrStart + offset;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	441a      	add	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE>:
//
// Touch_FT6206
//
//*******************************************************************
//-------------------------------------------------------------------
Touch_FT6206::Touch_FT6206( I2Cmaster  &i2c,
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	80fb      	strh	r3, [r7, #6]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80bb      	strh	r3, [r7, #4]
: Touch( ReportID_Hw::Module::TOUCH_FT6206, 
         width, 
         height,
         orientation ),

  i2c( i2c, hwAddr )
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	88b9      	ldrh	r1, [r7, #4]
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	7e3b      	ldrb	r3, [r7, #24]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	21c2      	movs	r1, #194	; 0xc2
 8007ecc:	f7fc f846 	bl	8003f5c <_ZN9EmbSysLib2Hw5TouchC1EtttNS1_11OrientationE>
 8007ed0:	4a07      	ldr	r2, [pc, #28]	; (8007ef0 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE+0x48>)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3314      	adds	r3, #20
 8007eda:	2254      	movs	r2, #84	; 0x54
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd fec4 	bl	8005c6c <_ZN9EmbSysLib2Hw9I2Cmaster6DeviceC1ERS1_h>
{
}
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	0800940c 	.word	0x0800940c

08007ef4 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv>:

//-------------------------------------------------------------------
void Touch_FT6206::update( void )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  TscData tsc;

  i2c.read( (BYTE)0x03, &tsc );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3314      	adds	r3, #20
 8007f00:	f107 020c 	add.w	r2, r7, #12
 8007f04:	2103      	movs	r1, #3
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f8bb 	bl	8008082 <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>
  if( !i2c.isError() )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fd fec7 	bl	8005ca4 <_ZN9EmbSysLib2Hw9I2Cmaster6Device7isErrorEv>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d025      	beq.n	8007f72 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x7e>
  {
    if( ( tsc.Xhigh & 0xC0 ) == 0x80 /* contact */ )
 8007f26:	7b3b      	ldrb	r3, [r7, #12]
 8007f28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f2c:	2b80      	cmp	r3, #128	; 0x80
 8007f2e:	d11d      	bne.n	8007f6c <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x78>
    {
      //!< \todo coordinate mapping and offsets depending on display orientation
      
      xPos = ( ((WORD)(tsc.Xhigh&0x0F)<<8) | tsc.Xlow );
 8007f30:	7b3b      	ldrb	r3, [r7, #12]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f3a:	b21a      	sxth	r2, r3
 8007f3c:	7b7b      	ldrb	r3, [r7, #13]
 8007f3e:	b21b      	sxth	r3, r3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	809a      	strh	r2, [r3, #4]
      yPos = ( ((WORD)(tsc.Yhigh&0x0F)<<8) | tsc.Ylow );
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f54:	b21a      	sxth	r2, r3
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	b21b      	sxth	r3, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	b21b      	sxth	r3, r3
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	80da      	strh	r2, [r3, #6]
      isTouchedFlag = true;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	721a      	strb	r2, [r3, #8]
    else
    {
      isTouchedFlag = false;
    }
  }
}
 8007f6a:	e002      	b.n	8007f72 <_ZN9EmbSysLib2Hw12Touch_FT62066updateEv+0x7e>
      isTouchedFlag = false;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	721a      	strb	r2, [r3, #8]
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <_ZNK4Grid4drawEv>:
};

// Subclass for drawing a grid (Tic-Tac-Toe field)
class Grid : public GraphicsObject {
public:
    void draw() const override {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af04      	add	r7, sp, #16
 8007f82:	6078      	str	r0, [r7, #4]
    	//screenGraphic.drawLine(0, 100, 0, 100, 1, Color::White);

    	//screenGraphic.drawLine(0, 100, 0, 100, 3, Color::White);
        for (int i = 1; i <= 2; i++) {
 8007f84:	2301      	movs	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	e01e      	b.n	8007fc8 <_ZNK4Grid4drawEv+0x4c>
        	screenGraphic.drawLine(160, 159 * i, 640, 159 * i, 3, Color::White);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	0152      	lsls	r2, r2, #5
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	0089      	lsls	r1, r1, #2
 8007fa2:	4419      	add	r1, r3
 8007fa4:	0149      	lsls	r1, r1, #5
 8007fa6:	1acb      	subs	r3, r1, r3
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007fae:	9102      	str	r1, [sp, #8]
 8007fb0:	2103      	movs	r1, #3
 8007fb2:	9101      	str	r1, [sp, #4]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007fba:	21a0      	movs	r1, #160	; 0xa0
 8007fbc:	481b      	ldr	r0, [pc, #108]	; (800802c <_ZNK4Grid4drawEv+0xb0>)
 8007fbe:	f7fc fe64 	bl	8004c8a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        for (int i = 1; i <= 2; i++) {
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	dddd      	ble.n	8007f8a <_ZNK4Grid4drawEv+0xe>
        }
        // Draw vertical lines
        for (int i = 1; i <= 2; i++) {
 8007fce:	2301      	movs	r3, #1
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	e022      	b.n	800801a <_ZNK4Grid4drawEv+0x9e>
        	screenGraphic.drawLine(160 + 159 * i, 0, 160 + 159 * i, 490, 3, Color::White);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	0092      	lsls	r2, r2, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	0152      	lsls	r2, r2, #5
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	33a0      	adds	r3, #160	; 0xa0
 8007fe6:	b299      	uxth	r1, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	0092      	lsls	r2, r2, #2
 8007ff0:	441a      	add	r2, r3
 8007ff2:	0152      	lsls	r2, r2, #5
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	33a0      	adds	r3, #160	; 0xa0
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008000:	9202      	str	r2, [sp, #8]
 8008002:	2203      	movs	r2, #3
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800800a:	9200      	str	r2, [sp, #0]
 800800c:	2200      	movs	r2, #0
 800800e:	4807      	ldr	r0, [pc, #28]	; (800802c <_ZNK4Grid4drawEv+0xb0>)
 8008010:	f7fc fe3b 	bl	8004c8a <_ZN9EmbSysLib3Dev13ScreenGraphic8drawLineEtttttt>
        for (int i = 1; i <= 2; i++) {
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	3301      	adds	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b02      	cmp	r3, #2
 800801e:	ddd9      	ble.n	8007fd4 <_ZNK4Grid4drawEv+0x58>
        }
    }
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	2000038c 	.word	0x2000038c

08008030 <main>:
};

int main() {
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
    // Create an instance of Grid
    Grid ticTacToeGrid;
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <main+0x1c>)
 8008038:	607b      	str	r3, [r7, #4]

    // Draw the Tic-Tac-Toe grid
    ticTacToeGrid.draw();
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff ff9d 	bl	8007f7c <_ZNK4Grid4drawEv>

    return 0;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	08009400 	.word	0x08009400

08008050 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_>:
template <class T> inline T RANGE( T x, T min, T max )
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  if( x > max )
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d901      	bls.n	8008068 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x18>
    return( max );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	e006      	b.n	8008076 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  if( x < min )
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d201      	bcs.n	8008074 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x24>
    return( min );
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	e000      	b.n	8008076 <_ZN9EmbSysLib3Std5RANGEImEET_S2_S2_S2_+0x26>
  return( x );
 8008074:	68fb      	ldr	r3, [r7, #12]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <_ZN9EmbSysLib2Hw9I2Cmaster6Device4readIhNS0_12Touch_FT62067TscDataEEEvT_PT0_>:
        void read( A addr, T *data )
 8008082:	b590      	push	{r4, r7, lr}
 8008084:	b087      	sub	sp, #28
 8008086:	af02      	add	r7, sp, #8
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	460b      	mov	r3, r1
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	72fb      	strb	r3, [r7, #11]
          isErrorFlag |= i2c.read( hwAddr, (BYTE *)&addr, sizeof(A), (BYTE *)data, sizeof(T) );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6858      	ldr	r0, [r3, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3304      	adds	r3, #4
 800809c:	681c      	ldr	r4, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	7a19      	ldrb	r1, [r3, #8]
 80080a2:	f107 020b 	add.w	r2, r7, #11
 80080a6:	2304      	movs	r3, #4
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	2301      	movs	r3, #1
 80080b0:	47a0      	blx	r4
 80080b2:	4603      	mov	r3, r0
 80080b4:	461a      	mov	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	7a5b      	ldrb	r3, [r3, #9]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	725a      	strb	r2, [r3, #9]
        }
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd90      	pop	{r4, r7, pc}
	...

080080cc <_ZN15myReportHandlerD1Ev>:
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	4a05      	ldr	r2, [pc, #20]	; (80080ec <_ZN15myReportHandlerD1Ev+0x20>)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fb f8e7 	bl	80032b0 <_ZN9EmbSysLib3Std6Report7HandlerD1Ev>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	080094dc 	.word	0x080094dc

080080f0 <_Z41__static_initialization_and_destruction_0ii>:
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b0da      	sub	sp, #360	; 0x168
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80080fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80080fe:	6018      	str	r0, [r3, #0]
 8008100:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008104:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800810e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b01      	cmp	r3, #1
 8008116:	f040 8121 	bne.w	800835c <_Z41__static_initialization_and_destruction_0ii+0x26c>
 800811a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800811e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008128:	4293      	cmp	r3, r2
 800812a:	f040 8117 	bne.w	800835c <_Z41__static_initialization_and_destruction_0ii+0x26c>
} report;
 800812e:	4897      	ldr	r0, [pc, #604]	; (800838c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008130:	f7fe fbfe 	bl	8006930 <_ZN15myReportHandlerC1Ev>
};

//-------------------------------------------------------------------
// Port
//-------------------------------------------------------------------
Port_Mcu   portA( Port_Mcu::PA );
 8008134:	2100      	movs	r1, #0
 8008136:	4896      	ldr	r0, [pc, #600]	; (8008390 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008138:	f7f9 f9b4 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portC( Port_Mcu::PC );
 800813c:	2102      	movs	r1, #2
 800813e:	4895      	ldr	r0, [pc, #596]	; (8008394 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8008140:	f7f9 f9b0 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portF( Port_Mcu::PF );
 8008144:	2105      	movs	r1, #5
 8008146:	4894      	ldr	r0, [pc, #592]	; (8008398 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008148:	f7f9 f9ac 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>
Port_Mcu   portJ( Port_Mcu::PJ );
 800814c:	2109      	movs	r1, #9
 800814e:	4893      	ldr	r0, [pc, #588]	; (800839c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008150:	f7f9 f9a8 	bl	80014a4 <_ZN9EmbSysLib2Hw8Port_McuC1ENS1_6PortIdE>


//-------------------------------------------------------------------
// Timer
//-------------------------------------------------------------------
Timer_Mcu  timer( Timer_Mcu::TIM_11, 100L/*us*/ );
 8008154:	2264      	movs	r2, #100	; 0x64
 8008156:	210a      	movs	r1, #10
 8008158:	4891      	ldr	r0, [pc, #580]	; (80083a0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800815a:	f7f9 fb3d 	bl	80017d8 <_ZN9EmbSysLib2Hw9Timer_McuC1ENS1_7TimerIdEm>

TaskManager taskManager( timer );
 800815e:	4990      	ldr	r1, [pc, #576]	; (80083a0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008160:	4890      	ldr	r0, [pc, #576]	; (80083a4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008162:	f7fe fb61 	bl	8006828 <_ZN9EmbSysLib3Dev11TaskManagerC1ERNS_2Hw5TimerE>

//-------------------------------------------------------------------
// I2C
//-------------------------------------------------------------------
I2Cmaster_Mcu i2cBusTouch( I2Cmaster_Mcu::I2C_4, 400/*kHz*/ );
 8008166:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800816a:	2104      	movs	r1, #4
 800816c:	488e      	ldr	r0, [pc, #568]	; (80083a8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800816e:	f7f8 fe6d 	bl	8000e4c <_ZN9EmbSysLib2Hw13I2Cmaster_McuC1ENS1_6I2C_IDEt>

//-------------------------------------------------------------------
// UART
//-------------------------------------------------------------------
Uart_Mcu   uart ( Uart_Mcu::USART_1, 9600, Uart_Mcu::NONE, 100, 100 );
 8008172:	2364      	movs	r3, #100	; 0x64
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	2364      	movs	r3, #100	; 0x64
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008180:	2101      	movs	r1, #1
 8008182:	488a      	ldr	r0, [pc, #552]	; (80083ac <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008184:	f7f9 fff6 	bl	8002174 <_ZN9EmbSysLib2Hw8Uart_McuC1ENS1_8USART_IdEmhtt>

Terminal   terminal( uart, 255,255,"# +" );
 8008188:	4b89      	ldr	r3, [pc, #548]	; (80083b0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	4b89      	ldr	r3, [pc, #548]	; (80083b4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	23ff      	movs	r3, #255	; 0xff
 8008192:	22ff      	movs	r2, #255	; 0xff
 8008194:	4985      	ldr	r1, [pc, #532]	; (80083ac <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008196:	4888      	ldr	r0, [pc, #544]	; (80083b8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008198:	f7fc ffa6 	bl	80050e8 <_ZN9EmbSysLib3Dev8TerminalC1ERNS_2Hw4UartEttPKcS6_>

//-------------------------------------------------------------------
// Display
//-------------------------------------------------------------------
Memory_Flash image( 10 ); // Size: 256k
 800819c:	2200      	movs	r2, #0
 800819e:	210a      	movs	r1, #10
 80081a0:	4886      	ldr	r0, [pc, #536]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80081a2:	f7f9 f811 	bl	80011c8 <_ZN9EmbSysLib2Hw12Memory_FlashC1Ehh>
Font    fontFont_10x20      ( MemoryImage( image, "Font_10x20"     ).getPtr() );
 80081a6:	f107 0308 	add.w	r3, r7, #8
 80081aa:	4a85      	ldr	r2, [pc, #532]	; (80083c0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80081ac:	4983      	ldr	r1, [pc, #524]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fa52 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fb07 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80081be:	4603      	mov	r3, r0
 80081c0:	4619      	mov	r1, r3
 80081c2:	4880      	ldr	r0, [pc, #512]	; (80083c4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80081c4:	f7fb f88e 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_16x24      ( MemoryImage( image, "Font_16x24"     ).getPtr() );
 80081c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081cc:	4a7e      	ldr	r2, [pc, #504]	; (80083c8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80081ce:	497b      	ldr	r1, [pc, #492]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fa41 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80081d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe faf6 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 80081e0:	4603      	mov	r3, r0
 80081e2:	4619      	mov	r1, r3
 80081e4:	4879      	ldr	r0, [pc, #484]	; (80083cc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80081e6:	f7fb f87d 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_8x12       ( MemoryImage( image, "Font_8x12"      ).getPtr() );
 80081ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80081ee:	4a78      	ldr	r2, [pc, #480]	; (80083d0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80081f0:	4972      	ldr	r1, [pc, #456]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fa30 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 80081f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe fae5 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008202:	4603      	mov	r3, r0
 8008204:	4619      	mov	r1, r3
 8008206:	4873      	ldr	r0, [pc, #460]	; (80083d4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008208:	f7fb f86c 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Font    fontFont_8x8        ( MemoryImage( image, "Font_8x8"       ).getPtr() );
 800820c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008210:	4a71      	ldr	r2, [pc, #452]	; (80083d8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8008212:	496a      	ldr	r1, [pc, #424]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fa1f 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 800821a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fad4 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008224:	4603      	mov	r3, r0
 8008226:	4619      	mov	r1, r3
 8008228:	486c      	ldr	r0, [pc, #432]	; (80083dc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800822a:	f7fb f85b 	bl	80032e4 <_ZN9EmbSysLib2Hw4FontC1EPKh>
Bitmap  bitmapBitmap_320x240( MemoryImage( image, "Bitmap_320x240" ).getPtr() );
 800822e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008232:	4a6b      	ldr	r2, [pc, #428]	; (80083e0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008234:	4961      	ldr	r1, [pc, #388]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fa0e 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 800823c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fac3 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008246:	4603      	mov	r3, r0
 8008248:	4619      	mov	r1, r3
 800824a:	4866      	ldr	r0, [pc, #408]	; (80083e4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800824c:	f7fb f8d7 	bl	80033fe <_ZN9EmbSysLib2Hw6BitmapC1EPKh>
Bitmap  bitmapBitmap_32x32  ( MemoryImage( image, "Bitmap_32x32"   ).getPtr() );
 8008250:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008254:	4a64      	ldr	r2, [pc, #400]	; (80083e8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008256:	4959      	ldr	r1, [pc, #356]	; (80083bc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe f9fd 	bl	8006658 <_ZN9EmbSysLib2Hw11MemoryImageC1ERNS0_6MemoryEPKc>
 800825e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fab2 	bl	80067cc <_ZN9EmbSysLib2Hw11MemoryImage6getPtrEv>
 8008268:	4603      	mov	r3, r0
 800826a:	4619      	mov	r1, r3
 800826c:	485f      	ldr	r0, [pc, #380]	; (80083ec <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800826e:	f7fb f8c6 	bl	80033fe <_ZN9EmbSysLib2Hw6BitmapC1EPKh>

Port::Pin     lcdResetPin( portJ, 15 );
 8008272:	220f      	movs	r2, #15
 8008274:	4949      	ldr	r1, [pc, #292]	; (800839c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008276:	485e      	ldr	r0, [pc, #376]	; (80083f0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008278:	f7fb fd80 	bl	8003d7c <_ZN9EmbSysLib2Hw4Port3PinC1ERS1_h>
Fmc_Mcu       fmc        ( Fmc_Mcu::SDRAM_Bank1 );  
 800827c:	2200      	movs	r2, #0
 800827e:	2102      	movs	r1, #2
 8008280:	485c      	ldr	r0, [pc, #368]	; (80083f4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008282:	f7fd fe01 	bl	8005e88 <_ZN9EmbSysLib2Hw7Fmc_McuC1ENS1_7FMCtypeEb>
Dsi_Mcu       hwDSI      ( fmc.startAddr() );
 8008286:	485b      	ldr	r0, [pc, #364]	; (80083f4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008288:	f7fd ff4e 	bl	8006128 <_ZN9EmbSysLib2Hw7Fmc_Mcu9startAddrEv>
 800828c:	4603      	mov	r3, r0
 800828e:	4619      	mov	r1, r3
 8008290:	4859      	ldr	r0, [pc, #356]	; (80083f8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008292:	f7fe f81d 	bl	80062d0 <_ZN9EmbSysLib2Hw7Dsi_McuC1Em>
                        
DisplayGraphic_OTM8009Aram dispGraphic( hwDSI,lcdResetPin, 
                                        DisplayGraphic_OTM8009A::LANDSCAPE_90, 
                                        fontFont_8x12, 
                                        2 );
 8008296:	2302      	movs	r3, #2
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	4a4e      	ldr	r2, [pc, #312]	; (80083d4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800829c:	466b      	mov	r3, sp
 800829e:	ca07      	ldmia	r2, {r0, r1, r2}
 80082a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80082a4:	2301      	movs	r3, #1
 80082a6:	4a52      	ldr	r2, [pc, #328]	; (80083f0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80082a8:	4953      	ldr	r1, [pc, #332]	; (80083f8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80082aa:	4854      	ldr	r0, [pc, #336]	; (80083fc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80082ac:	f7ff fcdc 	bl	8007c68 <_ZN9EmbSysLib2Hw26DisplayGraphic_OTM8009AramC1ERNS0_7Dsi_McuERNS0_4Port3PinENS0_23DisplayGraphic_OTM8009A11OrientationENS0_4FontEh>

ScreenChar    screenChar   ( dispGraphic );
 80082b0:	4952      	ldr	r1, [pc, #328]	; (80083fc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80082b2:	4853      	ldr	r0, [pc, #332]	; (8008400 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80082b4:	f7fc f8b4 	bl	8004420 <_ZN9EmbSysLib3Dev10ScreenCharC1ERNS_2Hw11DisplayCharE>
ScreenGraphic screenGraphic( dispGraphic );
 80082b8:	4950      	ldr	r1, [pc, #320]	; (80083fc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80082ba:	4852      	ldr	r0, [pc, #328]	; (8008404 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80082bc:	f7fc f930 	bl	8004520 <_ZN9EmbSysLib3Dev13ScreenGraphicC1ERNS_2Hw14DisplayGraphicE>
#endif

//-------------------------------------------------------------------
// Touch
//-------------------------------------------------------------------
Touch_FT6206 touch( i2cBusTouch, 480, 800, Touch::ROTATION_90 );
 80082c0:	2301      	movs	r3, #1
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80082c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80082cc:	4936      	ldr	r1, [pc, #216]	; (80083a8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80082ce:	484e      	ldr	r0, [pc, #312]	; (8008408 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80082d0:	f7ff fdea 	bl	8007ea8 <_ZN9EmbSysLib2Hw12Touch_FT6206C1ERNS0_9I2CmasterEttNS0_5Touch11OrientationE>

Pointer        pointer( touch );
 80082d4:	494c      	ldr	r1, [pc, #304]	; (8008408 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80082d6:	484d      	ldr	r0, [pc, #308]	; (800840c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80082d8:	f7fc fe04 	bl	8004ee4 <_ZN9EmbSysLib3Dev7PointerC1ERNS_2Hw5TouchE>

//-------------------------------------------------------------------
// Digital
//-------------------------------------------------------------------
Digital    led_A( portJ,13, Digital::Out, 0 ); // LD1 (red)
 80082dc:	2300      	movs	r3, #0
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2301      	movs	r3, #1
 80082e2:	220d      	movs	r2, #13
 80082e4:	492d      	ldr	r1, [pc, #180]	; (800839c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80082e6:	484a      	ldr	r0, [pc, #296]	; (8008410 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80082e8:	f7fc f824 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btn_A( portA, 0, Digital::In,  0 ); // B1 (user button)
 80082ec:	2300      	movs	r3, #0
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2300      	movs	r3, #0
 80082f2:	2200      	movs	r2, #0
 80082f4:	4926      	ldr	r1, [pc, #152]	; (8008390 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80082f6:	4847      	ldr	r0, [pc, #284]	; (8008414 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80082f8:	f7fc f81c 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

Digital    btnLeft ( portF, 8, Digital::InPU  , 1 );
 80082fc:	2301      	movs	r3, #1
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	2304      	movs	r3, #4
 8008302:	2208      	movs	r2, #8
 8008304:	4924      	ldr	r1, [pc, #144]	; (8008398 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008306:	4844      	ldr	r0, [pc, #272]	; (8008418 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008308:	f7fc f814 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnCtrl ( portF, 9, Digital::InPU  , 1 );
 800830c:	2301      	movs	r3, #1
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	2304      	movs	r3, #4
 8008312:	2209      	movs	r2, #9
 8008314:	4920      	ldr	r1, [pc, #128]	; (8008398 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008316:	4841      	ldr	r0, [pc, #260]	; (800841c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008318:	f7fc f80c 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>
Digital    btnRight( portA, 6, Digital::InPU  , 1 );
 800831c:	2301      	movs	r3, #1
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	2304      	movs	r3, #4
 8008322:	2206      	movs	r2, #6
 8008324:	491a      	ldr	r1, [pc, #104]	; (8008390 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008326:	483e      	ldr	r0, [pc, #248]	; (8008420 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008328:	f7fc f804 	bl	8004334 <_ZN9EmbSysLib3Dev7DigitalC1ERNS_2Hw4PortEhNS1_4ModeEb>

//-------------------------------------------------------------------
// Control
//-------------------------------------------------------------------
DigitalIndicator indicator( led_A, taskManager );
 800832c:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800832e:	4938      	ldr	r1, [pc, #224]	; (8008410 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008330:	483c      	ldr	r0, [pc, #240]	; (8008424 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8008332:	f7fd f971 	bl	8005618 <_ZN9EmbSysLib4Ctrl16DigitalIndicatorC1ERNS_3Dev7DigitalERNS2_11TaskManagerE>
DigitalButton    button   ( btn_A, taskManager, 40, 1000 );
 8008336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	2328      	movs	r3, #40	; 0x28
 800833e:	4a19      	ldr	r2, [pc, #100]	; (80083a4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008340:	4934      	ldr	r1, [pc, #208]	; (8008414 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008342:	4839      	ldr	r0, [pc, #228]	; (8008428 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008344:	f7fc ff58 	bl	80051f8 <_ZN9EmbSysLib4Ctrl13DigitalButtonC1ERNS_3Dev7DigitalERNS2_11TaskManagerEtt>

#if USE_ROTARY_KNOB == true
  DigitalEncoderRotaryknob  encoder( &btnLeft, &btnRight, &btnCtrl, taskManager );
#else
  DigitalEncoderJoystick    encoder( &btnLeft, &btnRight, &btnCtrl, taskManager, 150 );
 8008348:	2396      	movs	r3, #150	; 0x96
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	4b15      	ldr	r3, [pc, #84]	; (80083a4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	4b32      	ldr	r3, [pc, #200]	; (800841c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008352:	4a33      	ldr	r2, [pc, #204]	; (8008420 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008354:	4930      	ldr	r1, [pc, #192]	; (8008418 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008356:	4835      	ldr	r0, [pc, #212]	; (800842c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008358:	f7fd f8ba 	bl	80054d0 <_ZN9EmbSysLib4Ctrl22DigitalEncoderJoystickC1EPNS_3Dev7DigitalES4_S4_RNS2_11TaskManagerEt>
 800835c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008360:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <_Z41__static_initialization_and_destruction_0ii+0x292>
 800836a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800836e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008378:	4293      	cmp	r3, r2
 800837a:	d102      	bne.n	8008382 <_Z41__static_initialization_and_destruction_0ii+0x292>
 800837c:	4803      	ldr	r0, [pc, #12]	; (800838c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800837e:	f7ff fea5 	bl	80080cc <_ZN15myReportHandlerD1Ev>
 8008382:	bf00      	nop
 8008384:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	200001e8 	.word	0x200001e8
 8008390:	200001ec 	.word	0x200001ec
 8008394:	200001f8 	.word	0x200001f8
 8008398:	20000204 	.word	0x20000204
 800839c:	20000210 	.word	0x20000210
 80083a0:	2000021c 	.word	0x2000021c
 80083a4:	20000238 	.word	0x20000238
 80083a8:	20000258 	.word	0x20000258
 80083ac:	20000268 	.word	0x20000268
 80083b0:	08009040 	.word	0x08009040
 80083b4:	08009044 	.word	0x08009044
 80083b8:	20000290 	.word	0x20000290
 80083bc:	200002b8 	.word	0x200002b8
 80083c0:	08009048 	.word	0x08009048
 80083c4:	200002d4 	.word	0x200002d4
 80083c8:	08009054 	.word	0x08009054
 80083cc:	200002e0 	.word	0x200002e0
 80083d0:	08009060 	.word	0x08009060
 80083d4:	200002ec 	.word	0x200002ec
 80083d8:	0800906c 	.word	0x0800906c
 80083dc:	200002f8 	.word	0x200002f8
 80083e0:	08009078 	.word	0x08009078
 80083e4:	20000304 	.word	0x20000304
 80083e8:	08009088 	.word	0x08009088
 80083ec:	2000030c 	.word	0x2000030c
 80083f0:	20000314 	.word	0x20000314
 80083f4:	20000324 	.word	0x20000324
 80083f8:	20000328 	.word	0x20000328
 80083fc:	20000330 	.word	0x20000330
 8008400:	2000037c 	.word	0x2000037c
 8008404:	2000038c 	.word	0x2000038c
 8008408:	2000039c 	.word	0x2000039c
 800840c:	200003bc 	.word	0x200003bc
 8008410:	200003dc 	.word	0x200003dc
 8008414:	200003f4 	.word	0x200003f4
 8008418:	2000040c 	.word	0x2000040c
 800841c:	20000424 	.word	0x20000424
 8008420:	2000043c 	.word	0x2000043c
 8008424:	20000454 	.word	0x20000454
 8008428:	2000046c 	.word	0x2000046c
 800842c:	20000484 	.word	0x20000484

08008430 <_GLOBAL__sub_I_report>:
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
 8008434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008438:	2001      	movs	r0, #1
 800843a:	f7ff fe59 	bl	80080f0 <_Z41__static_initialization_and_destruction_0ii>
 800843e:	bd80      	pop	{r7, pc}

08008440 <_GLOBAL__sub_D_report>:
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
 8008444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008448:	2000      	movs	r0, #0
 800844a:	f7ff fe51 	bl	80080f0 <_Z41__static_initialization_and_destruction_0ii>
 800844e:	bd80      	pop	{r7, pc}

08008450 <Reset_Handler>:
  ldr   r0, =_estack
 8008450:	480d      	ldr	r0, [pc, #52]	; (8008488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008452:	4685      	mov	sp, r0
  bl  SystemInit
 8008454:	f7f8 f9be 	bl	80007d4 <SystemInit>
  ldr r0, =_sdata
 8008458:	480c      	ldr	r0, [pc, #48]	; (800848c <LoopForever+0x6>)
  ldr r1, =_edata
 800845a:	490d      	ldr	r1, [pc, #52]	; (8008490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800845c:	4a0d      	ldr	r2, [pc, #52]	; (8008494 <LoopForever+0xe>)
  movs r3, #0
 800845e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008460:	e002      	b.n	8008468 <LoopCopyDataInit>

08008462 <CopyDataInit>:
  ldr r4, [r2, r3]
 8008462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008466:	3304      	adds	r3, #4

08008468 <LoopCopyDataInit>:
  adds r4, r0, r3
 8008468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800846a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800846c:	d3f9      	bcc.n	8008462 <CopyDataInit>
  ldr r2, =_sbss
 800846e:	4a0a      	ldr	r2, [pc, #40]	; (8008498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008470:	4c0a      	ldr	r4, [pc, #40]	; (800849c <LoopForever+0x16>)
  movs r3, #0
 8008472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008474:	e001      	b.n	800847a <LoopFillZerobss>

08008476 <FillZerobss>:
  str  r3, [r2]
 8008476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008478:	3204      	adds	r2, #4

0800847a <LoopFillZerobss>:
  cmp r2, r4
 800847a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800847c:	d3fb      	bcc.n	8008476 <FillZerobss>
  bl __libc_init_array
 800847e:	f000 f975 	bl	800876c <__libc_init_array>
  bl main
 8008482:	f7ff fdd5 	bl	8008030 <main>

08008486 <LoopForever>:
    b LoopForever
 8008486:	e7fe      	b.n	8008486 <LoopForever>
  ldr   r0, =_estack
 8008488:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800848c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008490:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8008494:	0800958c 	.word	0x0800958c
  ldr r2, =_sbss
 8008498:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800849c:	200005fc 	.word	0x200005fc

080084a0 <BusFault_Handler>:
  b Infinite_Loop
 80084a0:	e7fe      	b.n	80084a0 <BusFault_Handler>

080084a2 <_Znwj>:
 80084a2:	2801      	cmp	r0, #1
 80084a4:	bf38      	it	cc
 80084a6:	2001      	movcc	r0, #1
 80084a8:	b510      	push	{r4, lr}
 80084aa:	4604      	mov	r4, r0
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 f81b 	bl	80084e8 <malloc>
 80084b2:	b100      	cbz	r0, 80084b6 <_Znwj+0x14>
 80084b4:	bd10      	pop	{r4, pc}
 80084b6:	f000 f807 	bl	80084c8 <_ZSt15get_new_handlerv>
 80084ba:	b908      	cbnz	r0, 80084c0 <_Znwj+0x1e>
 80084bc:	f000 f80c 	bl	80084d8 <abort>
 80084c0:	4780      	blx	r0
 80084c2:	e7f3      	b.n	80084ac <_Znwj+0xa>

080084c4 <_Znaj>:
 80084c4:	f7ff bfed 	b.w	80084a2 <_Znwj>

080084c8 <_ZSt15get_new_handlerv>:
 80084c8:	4b02      	ldr	r3, [pc, #8]	; (80084d4 <_ZSt15get_new_handlerv+0xc>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	f3bf 8f5b 	dmb	ish
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	200004ac 	.word	0x200004ac

080084d8 <abort>:
 80084d8:	b508      	push	{r3, lr}
 80084da:	2006      	movs	r0, #6
 80084dc:	f000 f91a 	bl	8008714 <raise>
 80084e0:	2001      	movs	r0, #1
 80084e2:	f000 fd1b 	bl	8008f1c <_exit>
	...

080084e8 <malloc>:
 80084e8:	4b02      	ldr	r3, [pc, #8]	; (80084f4 <malloc+0xc>)
 80084ea:	4601      	mov	r1, r0
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	f000 b823 	b.w	8008538 <_malloc_r>
 80084f2:	bf00      	nop
 80084f4:	20000150 	.word	0x20000150

080084f8 <sbrk_aligned>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4e0e      	ldr	r6, [pc, #56]	; (8008534 <sbrk_aligned+0x3c>)
 80084fc:	460c      	mov	r4, r1
 80084fe:	6831      	ldr	r1, [r6, #0]
 8008500:	4605      	mov	r5, r0
 8008502:	b911      	cbnz	r1, 800850a <sbrk_aligned+0x12>
 8008504:	f000 f922 	bl	800874c <_sbrk_r>
 8008508:	6030      	str	r0, [r6, #0]
 800850a:	4621      	mov	r1, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f000 f91d 	bl	800874c <_sbrk_r>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	d00a      	beq.n	800852c <sbrk_aligned+0x34>
 8008516:	1cc4      	adds	r4, r0, #3
 8008518:	f024 0403 	bic.w	r4, r4, #3
 800851c:	42a0      	cmp	r0, r4
 800851e:	d007      	beq.n	8008530 <sbrk_aligned+0x38>
 8008520:	1a21      	subs	r1, r4, r0
 8008522:	4628      	mov	r0, r5
 8008524:	f000 f912 	bl	800874c <_sbrk_r>
 8008528:	3001      	adds	r0, #1
 800852a:	d101      	bne.n	8008530 <sbrk_aligned+0x38>
 800852c:	f04f 34ff 	mov.w	r4, #4294967295
 8008530:	4620      	mov	r0, r4
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	200004b4 	.word	0x200004b4

08008538 <_malloc_r>:
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	1ccd      	adds	r5, r1, #3
 800853e:	f025 0503 	bic.w	r5, r5, #3
 8008542:	3508      	adds	r5, #8
 8008544:	2d0c      	cmp	r5, #12
 8008546:	bf38      	it	cc
 8008548:	250c      	movcc	r5, #12
 800854a:	2d00      	cmp	r5, #0
 800854c:	4607      	mov	r7, r0
 800854e:	db01      	blt.n	8008554 <_malloc_r+0x1c>
 8008550:	42a9      	cmp	r1, r5
 8008552:	d905      	bls.n	8008560 <_malloc_r+0x28>
 8008554:	230c      	movs	r3, #12
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	2600      	movs	r6, #0
 800855a:	4630      	mov	r0, r6
 800855c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008560:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008634 <_malloc_r+0xfc>
 8008564:	f000 f868 	bl	8008638 <__malloc_lock>
 8008568:	f8d8 3000 	ldr.w	r3, [r8]
 800856c:	461c      	mov	r4, r3
 800856e:	bb5c      	cbnz	r4, 80085c8 <_malloc_r+0x90>
 8008570:	4629      	mov	r1, r5
 8008572:	4638      	mov	r0, r7
 8008574:	f7ff ffc0 	bl	80084f8 <sbrk_aligned>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	4604      	mov	r4, r0
 800857c:	d155      	bne.n	800862a <_malloc_r+0xf2>
 800857e:	f8d8 4000 	ldr.w	r4, [r8]
 8008582:	4626      	mov	r6, r4
 8008584:	2e00      	cmp	r6, #0
 8008586:	d145      	bne.n	8008614 <_malloc_r+0xdc>
 8008588:	2c00      	cmp	r4, #0
 800858a:	d048      	beq.n	800861e <_malloc_r+0xe6>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	4631      	mov	r1, r6
 8008590:	4638      	mov	r0, r7
 8008592:	eb04 0903 	add.w	r9, r4, r3
 8008596:	f000 f8d9 	bl	800874c <_sbrk_r>
 800859a:	4581      	cmp	r9, r0
 800859c:	d13f      	bne.n	800861e <_malloc_r+0xe6>
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	1a6d      	subs	r5, r5, r1
 80085a2:	4629      	mov	r1, r5
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ffa7 	bl	80084f8 <sbrk_aligned>
 80085aa:	3001      	adds	r0, #1
 80085ac:	d037      	beq.n	800861e <_malloc_r+0xe6>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	442b      	add	r3, r5
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	f8d8 3000 	ldr.w	r3, [r8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d038      	beq.n	800862e <_malloc_r+0xf6>
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	42a2      	cmp	r2, r4
 80085c0:	d12b      	bne.n	800861a <_malloc_r+0xe2>
 80085c2:	2200      	movs	r2, #0
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	e00f      	b.n	80085e8 <_malloc_r+0xb0>
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	1b52      	subs	r2, r2, r5
 80085cc:	d41f      	bmi.n	800860e <_malloc_r+0xd6>
 80085ce:	2a0b      	cmp	r2, #11
 80085d0:	d917      	bls.n	8008602 <_malloc_r+0xca>
 80085d2:	1961      	adds	r1, r4, r5
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	6025      	str	r5, [r4, #0]
 80085d8:	bf18      	it	ne
 80085da:	6059      	strne	r1, [r3, #4]
 80085dc:	6863      	ldr	r3, [r4, #4]
 80085de:	bf08      	it	eq
 80085e0:	f8c8 1000 	streq.w	r1, [r8]
 80085e4:	5162      	str	r2, [r4, r5]
 80085e6:	604b      	str	r3, [r1, #4]
 80085e8:	4638      	mov	r0, r7
 80085ea:	f104 060b 	add.w	r6, r4, #11
 80085ee:	f000 f829 	bl	8008644 <__malloc_unlock>
 80085f2:	f026 0607 	bic.w	r6, r6, #7
 80085f6:	1d23      	adds	r3, r4, #4
 80085f8:	1af2      	subs	r2, r6, r3
 80085fa:	d0ae      	beq.n	800855a <_malloc_r+0x22>
 80085fc:	1b9b      	subs	r3, r3, r6
 80085fe:	50a3      	str	r3, [r4, r2]
 8008600:	e7ab      	b.n	800855a <_malloc_r+0x22>
 8008602:	42a3      	cmp	r3, r4
 8008604:	6862      	ldr	r2, [r4, #4]
 8008606:	d1dd      	bne.n	80085c4 <_malloc_r+0x8c>
 8008608:	f8c8 2000 	str.w	r2, [r8]
 800860c:	e7ec      	b.n	80085e8 <_malloc_r+0xb0>
 800860e:	4623      	mov	r3, r4
 8008610:	6864      	ldr	r4, [r4, #4]
 8008612:	e7ac      	b.n	800856e <_malloc_r+0x36>
 8008614:	4634      	mov	r4, r6
 8008616:	6876      	ldr	r6, [r6, #4]
 8008618:	e7b4      	b.n	8008584 <_malloc_r+0x4c>
 800861a:	4613      	mov	r3, r2
 800861c:	e7cc      	b.n	80085b8 <_malloc_r+0x80>
 800861e:	230c      	movs	r3, #12
 8008620:	603b      	str	r3, [r7, #0]
 8008622:	4638      	mov	r0, r7
 8008624:	f000 f80e 	bl	8008644 <__malloc_unlock>
 8008628:	e797      	b.n	800855a <_malloc_r+0x22>
 800862a:	6025      	str	r5, [r4, #0]
 800862c:	e7dc      	b.n	80085e8 <_malloc_r+0xb0>
 800862e:	605b      	str	r3, [r3, #4]
 8008630:	deff      	udf	#255	; 0xff
 8008632:	bf00      	nop
 8008634:	200004b0 	.word	0x200004b0

08008638 <__malloc_lock>:
 8008638:	4801      	ldr	r0, [pc, #4]	; (8008640 <__malloc_lock+0x8>)
 800863a:	f000 b8bb 	b.w	80087b4 <__retarget_lock_acquire_recursive>
 800863e:	bf00      	nop
 8008640:	200005f4 	.word	0x200005f4

08008644 <__malloc_unlock>:
 8008644:	4801      	ldr	r0, [pc, #4]	; (800864c <__malloc_unlock+0x8>)
 8008646:	f000 b8b6 	b.w	80087b6 <__retarget_lock_release_recursive>
 800864a:	bf00      	nop
 800864c:	200005f4 	.word	0x200005f4

08008650 <_vsniprintf_r>:
 8008650:	b530      	push	{r4, r5, lr}
 8008652:	4614      	mov	r4, r2
 8008654:	2c00      	cmp	r4, #0
 8008656:	b09b      	sub	sp, #108	; 0x6c
 8008658:	4605      	mov	r5, r0
 800865a:	461a      	mov	r2, r3
 800865c:	da05      	bge.n	800866a <_vsniprintf_r+0x1a>
 800865e:	238b      	movs	r3, #139	; 0x8b
 8008660:	6003      	str	r3, [r0, #0]
 8008662:	f04f 30ff 	mov.w	r0, #4294967295
 8008666:	b01b      	add	sp, #108	; 0x6c
 8008668:	bd30      	pop	{r4, r5, pc}
 800866a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800866e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008672:	bf14      	ite	ne
 8008674:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008678:	4623      	moveq	r3, r4
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008682:	9100      	str	r1, [sp, #0]
 8008684:	9104      	str	r1, [sp, #16]
 8008686:	f8ad 300e 	strh.w	r3, [sp, #14]
 800868a:	4669      	mov	r1, sp
 800868c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800868e:	f000 f947 	bl	8008920 <_svfiprintf_r>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	bfbc      	itt	lt
 8008696:	238b      	movlt	r3, #139	; 0x8b
 8008698:	602b      	strlt	r3, [r5, #0]
 800869a:	2c00      	cmp	r4, #0
 800869c:	d0e3      	beq.n	8008666 <_vsniprintf_r+0x16>
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	e7df      	b.n	8008666 <_vsniprintf_r+0x16>
	...

080086a8 <vsniprintf>:
 80086a8:	b507      	push	{r0, r1, r2, lr}
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	4613      	mov	r3, r2
 80086ae:	460a      	mov	r2, r1
 80086b0:	4601      	mov	r1, r0
 80086b2:	4803      	ldr	r0, [pc, #12]	; (80086c0 <vsniprintf+0x18>)
 80086b4:	6800      	ldr	r0, [r0, #0]
 80086b6:	f7ff ffcb 	bl	8008650 <_vsniprintf_r>
 80086ba:	b003      	add	sp, #12
 80086bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80086c0:	20000150 	.word	0x20000150

080086c4 <_raise_r>:
 80086c4:	291f      	cmp	r1, #31
 80086c6:	b538      	push	{r3, r4, r5, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	d904      	bls.n	80086d8 <_raise_r+0x14>
 80086ce:	2316      	movs	r3, #22
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80086da:	b112      	cbz	r2, 80086e2 <_raise_r+0x1e>
 80086dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086e0:	b94b      	cbnz	r3, 80086f6 <_raise_r+0x32>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f830 	bl	8008748 <_getpid_r>
 80086e8:	462a      	mov	r2, r5
 80086ea:	4601      	mov	r1, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f2:	f000 b817 	b.w	8008724 <_kill_r>
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d00a      	beq.n	8008710 <_raise_r+0x4c>
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	d103      	bne.n	8008706 <_raise_r+0x42>
 80086fe:	2316      	movs	r3, #22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	2001      	movs	r0, #1
 8008704:	e7e7      	b.n	80086d6 <_raise_r+0x12>
 8008706:	2400      	movs	r4, #0
 8008708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800870c:	4628      	mov	r0, r5
 800870e:	4798      	blx	r3
 8008710:	2000      	movs	r0, #0
 8008712:	e7e0      	b.n	80086d6 <_raise_r+0x12>

08008714 <raise>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <raise+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f7ff bfd3 	b.w	80086c4 <_raise_r>
 800871e:	bf00      	nop
 8008720:	20000150 	.word	0x20000150

08008724 <_kill_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d07      	ldr	r5, [pc, #28]	; (8008744 <_kill_r+0x20>)
 8008728:	2300      	movs	r3, #0
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	f000 fbdd 	bl	8008ef0 <_kill>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d102      	bne.n	8008740 <_kill_r+0x1c>
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	b103      	cbz	r3, 8008740 <_kill_r+0x1c>
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	bd38      	pop	{r3, r4, r5, pc}
 8008742:	bf00      	nop
 8008744:	200005f0 	.word	0x200005f0

08008748 <_getpid_r>:
 8008748:	f000 bbca 	b.w	8008ee0 <_getpid>

0800874c <_sbrk_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	; (8008768 <_sbrk_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f000 fbd2 	bl	8008f00 <_sbrk>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_sbrk_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_sbrk_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200005f0 	.word	0x200005f0

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4d0d      	ldr	r5, [pc, #52]	; (80087a4 <__libc_init_array+0x38>)
 8008770:	4c0d      	ldr	r4, [pc, #52]	; (80087a8 <__libc_init_array+0x3c>)
 8008772:	1b64      	subs	r4, r4, r5
 8008774:	10a4      	asrs	r4, r4, #2
 8008776:	2600      	movs	r6, #0
 8008778:	42a6      	cmp	r6, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	4d0b      	ldr	r5, [pc, #44]	; (80087ac <__libc_init_array+0x40>)
 800877e:	4c0c      	ldr	r4, [pc, #48]	; (80087b0 <__libc_init_array+0x44>)
 8008780:	f000 fbce 	bl	8008f20 <_init>
 8008784:	1b64      	subs	r4, r4, r5
 8008786:	10a4      	asrs	r4, r4, #2
 8008788:	2600      	movs	r6, #0
 800878a:	42a6      	cmp	r6, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f855 3b04 	ldr.w	r3, [r5], #4
 8008794:	4798      	blx	r3
 8008796:	3601      	adds	r6, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f855 3b04 	ldr.w	r3, [r5], #4
 800879e:	4798      	blx	r3
 80087a0:	3601      	adds	r6, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	08009578 	.word	0x08009578
 80087a8:	08009578 	.word	0x08009578
 80087ac:	08009578 	.word	0x08009578
 80087b0:	08009584 	.word	0x08009584

080087b4 <__retarget_lock_acquire_recursive>:
 80087b4:	4770      	bx	lr

080087b6 <__retarget_lock_release_recursive>:
 80087b6:	4770      	bx	lr

080087b8 <memcpy>:
 80087b8:	440a      	add	r2, r1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c0:	d100      	bne.n	80087c4 <memcpy+0xc>
 80087c2:	4770      	bx	lr
 80087c4:	b510      	push	{r4, lr}
 80087c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ce:	4291      	cmp	r1, r2
 80087d0:	d1f9      	bne.n	80087c6 <memcpy+0xe>
 80087d2:	bd10      	pop	{r4, pc}

080087d4 <_free_r>:
 80087d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087d6:	2900      	cmp	r1, #0
 80087d8:	d044      	beq.n	8008864 <_free_r+0x90>
 80087da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087de:	9001      	str	r0, [sp, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f1a1 0404 	sub.w	r4, r1, #4
 80087e6:	bfb8      	it	lt
 80087e8:	18e4      	addlt	r4, r4, r3
 80087ea:	f7ff ff25 	bl	8008638 <__malloc_lock>
 80087ee:	4a1e      	ldr	r2, [pc, #120]	; (8008868 <_free_r+0x94>)
 80087f0:	9801      	ldr	r0, [sp, #4]
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	b933      	cbnz	r3, 8008804 <_free_r+0x30>
 80087f6:	6063      	str	r3, [r4, #4]
 80087f8:	6014      	str	r4, [r2, #0]
 80087fa:	b003      	add	sp, #12
 80087fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008800:	f7ff bf20 	b.w	8008644 <__malloc_unlock>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d908      	bls.n	800881a <_free_r+0x46>
 8008808:	6825      	ldr	r5, [r4, #0]
 800880a:	1961      	adds	r1, r4, r5
 800880c:	428b      	cmp	r3, r1
 800880e:	bf01      	itttt	eq
 8008810:	6819      	ldreq	r1, [r3, #0]
 8008812:	685b      	ldreq	r3, [r3, #4]
 8008814:	1949      	addeq	r1, r1, r5
 8008816:	6021      	streq	r1, [r4, #0]
 8008818:	e7ed      	b.n	80087f6 <_free_r+0x22>
 800881a:	461a      	mov	r2, r3
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	b10b      	cbz	r3, 8008824 <_free_r+0x50>
 8008820:	42a3      	cmp	r3, r4
 8008822:	d9fa      	bls.n	800881a <_free_r+0x46>
 8008824:	6811      	ldr	r1, [r2, #0]
 8008826:	1855      	adds	r5, r2, r1
 8008828:	42a5      	cmp	r5, r4
 800882a:	d10b      	bne.n	8008844 <_free_r+0x70>
 800882c:	6824      	ldr	r4, [r4, #0]
 800882e:	4421      	add	r1, r4
 8008830:	1854      	adds	r4, r2, r1
 8008832:	42a3      	cmp	r3, r4
 8008834:	6011      	str	r1, [r2, #0]
 8008836:	d1e0      	bne.n	80087fa <_free_r+0x26>
 8008838:	681c      	ldr	r4, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	6053      	str	r3, [r2, #4]
 800883e:	440c      	add	r4, r1
 8008840:	6014      	str	r4, [r2, #0]
 8008842:	e7da      	b.n	80087fa <_free_r+0x26>
 8008844:	d902      	bls.n	800884c <_free_r+0x78>
 8008846:	230c      	movs	r3, #12
 8008848:	6003      	str	r3, [r0, #0]
 800884a:	e7d6      	b.n	80087fa <_free_r+0x26>
 800884c:	6825      	ldr	r5, [r4, #0]
 800884e:	1961      	adds	r1, r4, r5
 8008850:	428b      	cmp	r3, r1
 8008852:	bf04      	itt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	bf04      	itt	eq
 800885c:	1949      	addeq	r1, r1, r5
 800885e:	6021      	streq	r1, [r4, #0]
 8008860:	6054      	str	r4, [r2, #4]
 8008862:	e7ca      	b.n	80087fa <_free_r+0x26>
 8008864:	b003      	add	sp, #12
 8008866:	bd30      	pop	{r4, r5, pc}
 8008868:	200004b0 	.word	0x200004b0

0800886c <__ssputs_r>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	688e      	ldr	r6, [r1, #8]
 8008872:	461f      	mov	r7, r3
 8008874:	42be      	cmp	r6, r7
 8008876:	680b      	ldr	r3, [r1, #0]
 8008878:	4682      	mov	sl, r0
 800887a:	460c      	mov	r4, r1
 800887c:	4690      	mov	r8, r2
 800887e:	d82c      	bhi.n	80088da <__ssputs_r+0x6e>
 8008880:	898a      	ldrh	r2, [r1, #12]
 8008882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008886:	d026      	beq.n	80088d6 <__ssputs_r+0x6a>
 8008888:	6965      	ldr	r5, [r4, #20]
 800888a:	6909      	ldr	r1, [r1, #16]
 800888c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008890:	eba3 0901 	sub.w	r9, r3, r1
 8008894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008898:	1c7b      	adds	r3, r7, #1
 800889a:	444b      	add	r3, r9
 800889c:	106d      	asrs	r5, r5, #1
 800889e:	429d      	cmp	r5, r3
 80088a0:	bf38      	it	cc
 80088a2:	461d      	movcc	r5, r3
 80088a4:	0553      	lsls	r3, r2, #21
 80088a6:	d527      	bpl.n	80088f8 <__ssputs_r+0x8c>
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7ff fe45 	bl	8008538 <_malloc_r>
 80088ae:	4606      	mov	r6, r0
 80088b0:	b360      	cbz	r0, 800890c <__ssputs_r+0xa0>
 80088b2:	6921      	ldr	r1, [r4, #16]
 80088b4:	464a      	mov	r2, r9
 80088b6:	f7ff ff7f 	bl	80087b8 <memcpy>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	6126      	str	r6, [r4, #16]
 80088c8:	6165      	str	r5, [r4, #20]
 80088ca:	444e      	add	r6, r9
 80088cc:	eba5 0509 	sub.w	r5, r5, r9
 80088d0:	6026      	str	r6, [r4, #0]
 80088d2:	60a5      	str	r5, [r4, #8]
 80088d4:	463e      	mov	r6, r7
 80088d6:	42be      	cmp	r6, r7
 80088d8:	d900      	bls.n	80088dc <__ssputs_r+0x70>
 80088da:	463e      	mov	r6, r7
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	4632      	mov	r2, r6
 80088e0:	4641      	mov	r1, r8
 80088e2:	f000 faab 	bl	8008e3c <memmove>
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	1b9b      	subs	r3, r3, r6
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	4433      	add	r3, r6
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	2000      	movs	r0, #0
 80088f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f8:	462a      	mov	r2, r5
 80088fa:	f000 fab9 	bl	8008e70 <_realloc_r>
 80088fe:	4606      	mov	r6, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d1e0      	bne.n	80088c6 <__ssputs_r+0x5a>
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	4650      	mov	r0, sl
 8008908:	f7ff ff64 	bl	80087d4 <_free_r>
 800890c:	230c      	movs	r3, #12
 800890e:	f8ca 3000 	str.w	r3, [sl]
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	e7e9      	b.n	80088f4 <__ssputs_r+0x88>

08008920 <_svfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	4698      	mov	r8, r3
 8008926:	898b      	ldrh	r3, [r1, #12]
 8008928:	061b      	lsls	r3, r3, #24
 800892a:	b09d      	sub	sp, #116	; 0x74
 800892c:	4607      	mov	r7, r0
 800892e:	460d      	mov	r5, r1
 8008930:	4614      	mov	r4, r2
 8008932:	d50e      	bpl.n	8008952 <_svfiprintf_r+0x32>
 8008934:	690b      	ldr	r3, [r1, #16]
 8008936:	b963      	cbnz	r3, 8008952 <_svfiprintf_r+0x32>
 8008938:	2140      	movs	r1, #64	; 0x40
 800893a:	f7ff fdfd 	bl	8008538 <_malloc_r>
 800893e:	6028      	str	r0, [r5, #0]
 8008940:	6128      	str	r0, [r5, #16]
 8008942:	b920      	cbnz	r0, 800894e <_svfiprintf_r+0x2e>
 8008944:	230c      	movs	r3, #12
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e0d0      	b.n	8008af0 <_svfiprintf_r+0x1d0>
 800894e:	2340      	movs	r3, #64	; 0x40
 8008950:	616b      	str	r3, [r5, #20]
 8008952:	2300      	movs	r3, #0
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	2320      	movs	r3, #32
 8008958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008960:	2330      	movs	r3, #48	; 0x30
 8008962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b08 <_svfiprintf_r+0x1e8>
 8008966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800896a:	f04f 0901 	mov.w	r9, #1
 800896e:	4623      	mov	r3, r4
 8008970:	469a      	mov	sl, r3
 8008972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008976:	b10a      	cbz	r2, 800897c <_svfiprintf_r+0x5c>
 8008978:	2a25      	cmp	r2, #37	; 0x25
 800897a:	d1f9      	bne.n	8008970 <_svfiprintf_r+0x50>
 800897c:	ebba 0b04 	subs.w	fp, sl, r4
 8008980:	d00b      	beq.n	800899a <_svfiprintf_r+0x7a>
 8008982:	465b      	mov	r3, fp
 8008984:	4622      	mov	r2, r4
 8008986:	4629      	mov	r1, r5
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff ff6f 	bl	800886c <__ssputs_r>
 800898e:	3001      	adds	r0, #1
 8008990:	f000 80a9 	beq.w	8008ae6 <_svfiprintf_r+0x1c6>
 8008994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008996:	445a      	add	r2, fp
 8008998:	9209      	str	r2, [sp, #36]	; 0x24
 800899a:	f89a 3000 	ldrb.w	r3, [sl]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 80a1 	beq.w	8008ae6 <_svfiprintf_r+0x1c6>
 80089a4:	2300      	movs	r3, #0
 80089a6:	f04f 32ff 	mov.w	r2, #4294967295
 80089aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ae:	f10a 0a01 	add.w	sl, sl, #1
 80089b2:	9304      	str	r3, [sp, #16]
 80089b4:	9307      	str	r3, [sp, #28]
 80089b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ba:	931a      	str	r3, [sp, #104]	; 0x68
 80089bc:	4654      	mov	r4, sl
 80089be:	2205      	movs	r2, #5
 80089c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c4:	4850      	ldr	r0, [pc, #320]	; (8008b08 <_svfiprintf_r+0x1e8>)
 80089c6:	f7f7 fc73 	bl	80002b0 <memchr>
 80089ca:	9a04      	ldr	r2, [sp, #16]
 80089cc:	b9d8      	cbnz	r0, 8008a06 <_svfiprintf_r+0xe6>
 80089ce:	06d0      	lsls	r0, r2, #27
 80089d0:	bf44      	itt	mi
 80089d2:	2320      	movmi	r3, #32
 80089d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d8:	0711      	lsls	r1, r2, #28
 80089da:	bf44      	itt	mi
 80089dc:	232b      	movmi	r3, #43	; 0x2b
 80089de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e2:	f89a 3000 	ldrb.w	r3, [sl]
 80089e6:	2b2a      	cmp	r3, #42	; 0x2a
 80089e8:	d015      	beq.n	8008a16 <_svfiprintf_r+0xf6>
 80089ea:	9a07      	ldr	r2, [sp, #28]
 80089ec:	4654      	mov	r4, sl
 80089ee:	2000      	movs	r0, #0
 80089f0:	f04f 0c0a 	mov.w	ip, #10
 80089f4:	4621      	mov	r1, r4
 80089f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089fa:	3b30      	subs	r3, #48	; 0x30
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d94d      	bls.n	8008a9c <_svfiprintf_r+0x17c>
 8008a00:	b1b0      	cbz	r0, 8008a30 <_svfiprintf_r+0x110>
 8008a02:	9207      	str	r2, [sp, #28]
 8008a04:	e014      	b.n	8008a30 <_svfiprintf_r+0x110>
 8008a06:	eba0 0308 	sub.w	r3, r0, r8
 8008a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	46a2      	mov	sl, r4
 8008a14:	e7d2      	b.n	80089bc <_svfiprintf_r+0x9c>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	1d19      	adds	r1, r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	9103      	str	r1, [sp, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfbb      	ittet	lt
 8008a22:	425b      	neglt	r3, r3
 8008a24:	f042 0202 	orrlt.w	r2, r2, #2
 8008a28:	9307      	strge	r3, [sp, #28]
 8008a2a:	9307      	strlt	r3, [sp, #28]
 8008a2c:	bfb8      	it	lt
 8008a2e:	9204      	strlt	r2, [sp, #16]
 8008a30:	7823      	ldrb	r3, [r4, #0]
 8008a32:	2b2e      	cmp	r3, #46	; 0x2e
 8008a34:	d10c      	bne.n	8008a50 <_svfiprintf_r+0x130>
 8008a36:	7863      	ldrb	r3, [r4, #1]
 8008a38:	2b2a      	cmp	r3, #42	; 0x2a
 8008a3a:	d134      	bne.n	8008aa6 <_svfiprintf_r+0x186>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	1d1a      	adds	r2, r3, #4
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	9203      	str	r2, [sp, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bfb8      	it	lt
 8008a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a4c:	3402      	adds	r4, #2
 8008a4e:	9305      	str	r3, [sp, #20]
 8008a50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008b18 <_svfiprintf_r+0x1f8>
 8008a54:	7821      	ldrb	r1, [r4, #0]
 8008a56:	2203      	movs	r2, #3
 8008a58:	4650      	mov	r0, sl
 8008a5a:	f7f7 fc29 	bl	80002b0 <memchr>
 8008a5e:	b138      	cbz	r0, 8008a70 <_svfiprintf_r+0x150>
 8008a60:	9b04      	ldr	r3, [sp, #16]
 8008a62:	eba0 000a 	sub.w	r0, r0, sl
 8008a66:	2240      	movs	r2, #64	; 0x40
 8008a68:	4082      	lsls	r2, r0
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	4825      	ldr	r0, [pc, #148]	; (8008b0c <_svfiprintf_r+0x1ec>)
 8008a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a7a:	2206      	movs	r2, #6
 8008a7c:	f7f7 fc18 	bl	80002b0 <memchr>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d038      	beq.n	8008af6 <_svfiprintf_r+0x1d6>
 8008a84:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <_svfiprintf_r+0x1f0>)
 8008a86:	bb1b      	cbnz	r3, 8008ad0 <_svfiprintf_r+0x1b0>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	3308      	adds	r3, #8
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	4433      	add	r3, r6
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9a:	e768      	b.n	800896e <_svfiprintf_r+0x4e>
 8008a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7a6      	b.n	80089f4 <_svfiprintf_r+0xd4>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0c0a 	mov.w	ip, #10
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab8:	3a30      	subs	r2, #48	; 0x30
 8008aba:	2a09      	cmp	r2, #9
 8008abc:	d903      	bls.n	8008ac6 <_svfiprintf_r+0x1a6>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0c6      	beq.n	8008a50 <_svfiprintf_r+0x130>
 8008ac2:	9105      	str	r1, [sp, #20]
 8008ac4:	e7c4      	b.n	8008a50 <_svfiprintf_r+0x130>
 8008ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aca:	4604      	mov	r4, r0
 8008acc:	2301      	movs	r3, #1
 8008ace:	e7f0      	b.n	8008ab2 <_svfiprintf_r+0x192>
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <_svfiprintf_r+0x1f4>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4638      	mov	r0, r7
 8008adc:	f3af 8000 	nop.w
 8008ae0:	1c42      	adds	r2, r0, #1
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	d1d6      	bne.n	8008a94 <_svfiprintf_r+0x174>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	065b      	lsls	r3, r3, #25
 8008aea:	f53f af2d 	bmi.w	8008948 <_svfiprintf_r+0x28>
 8008aee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008af0:	b01d      	add	sp, #116	; 0x74
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	462a      	mov	r2, r5
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <_svfiprintf_r+0x1f4>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	4638      	mov	r0, r7
 8008b02:	f000 f879 	bl	8008bf8 <_printf_i>
 8008b06:	e7eb      	b.n	8008ae0 <_svfiprintf_r+0x1c0>
 8008b08:	08009544 	.word	0x08009544
 8008b0c:	0800954e 	.word	0x0800954e
 8008b10:	00000000 	.word	0x00000000
 8008b14:	0800886d 	.word	0x0800886d
 8008b18:	0800954a 	.word	0x0800954a

08008b1c <_printf_common>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	4616      	mov	r6, r2
 8008b22:	4699      	mov	r9, r3
 8008b24:	688a      	ldr	r2, [r1, #8]
 8008b26:	690b      	ldr	r3, [r1, #16]
 8008b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfb8      	it	lt
 8008b30:	4613      	movlt	r3, r2
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b38:	4607      	mov	r7, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_printf_common+0x26>
 8008b3e:	3301      	adds	r3, #1
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	0699      	lsls	r1, r3, #26
 8008b46:	bf42      	ittt	mi
 8008b48:	6833      	ldrmi	r3, [r6, #0]
 8008b4a:	3302      	addmi	r3, #2
 8008b4c:	6033      	strmi	r3, [r6, #0]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d106      	bne.n	8008b64 <_printf_common+0x48>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	6832      	ldr	r2, [r6, #0]
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dc26      	bgt.n	8008bb2 <_printf_common+0x96>
 8008b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b68:	1e13      	subs	r3, r2, #0
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	bf18      	it	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	0692      	lsls	r2, r2, #26
 8008b72:	d42b      	bmi.n	8008bcc <_printf_common+0xb0>
 8008b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d01e      	beq.n	8008bc0 <_printf_common+0xa4>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	f003 0306 	and.w	r3, r3, #6
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	bf02      	ittt	eq
 8008b8e:	68e5      	ldreq	r5, [r4, #12]
 8008b90:	6833      	ldreq	r3, [r6, #0]
 8008b92:	1aed      	subeq	r5, r5, r3
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	bf0c      	ite	eq
 8008b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b9c:	2500      	movne	r5, #0
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bfc4      	itt	gt
 8008ba2:	1a9b      	subgt	r3, r3, r2
 8008ba4:	18ed      	addgt	r5, r5, r3
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	341a      	adds	r4, #26
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	d11a      	bne.n	8008be4 <_printf_common+0xc8>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e008      	b.n	8008bc4 <_printf_common+0xa8>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4638      	mov	r0, r7
 8008bba:	47c0      	blx	r8
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <_printf_common+0xac>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc8:	3501      	adds	r5, #1
 8008bca:	e7c6      	b.n	8008b5a <_printf_common+0x3e>
 8008bcc:	18e1      	adds	r1, r4, r3
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	2030      	movs	r0, #48	; 0x30
 8008bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bd6:	4422      	add	r2, r4
 8008bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008be0:	3302      	adds	r3, #2
 8008be2:	e7c7      	b.n	8008b74 <_printf_common+0x58>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4622      	mov	r2, r4
 8008be8:	4649      	mov	r1, r9
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c0      	blx	r8
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d0e6      	beq.n	8008bc0 <_printf_common+0xa4>
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7d9      	b.n	8008baa <_printf_common+0x8e>
	...

08008bf8 <_printf_i>:
 8008bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	7e0f      	ldrb	r7, [r1, #24]
 8008bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c00:	2f78      	cmp	r7, #120	; 0x78
 8008c02:	4691      	mov	r9, r2
 8008c04:	4680      	mov	r8, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	469a      	mov	sl, r3
 8008c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c0e:	d807      	bhi.n	8008c20 <_printf_i+0x28>
 8008c10:	2f62      	cmp	r7, #98	; 0x62
 8008c12:	d80a      	bhi.n	8008c2a <_printf_i+0x32>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	f000 80d4 	beq.w	8008dc2 <_printf_i+0x1ca>
 8008c1a:	2f58      	cmp	r7, #88	; 0x58
 8008c1c:	f000 80c0 	beq.w	8008da0 <_printf_i+0x1a8>
 8008c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c28:	e03a      	b.n	8008ca0 <_printf_i+0xa8>
 8008c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c2e:	2b15      	cmp	r3, #21
 8008c30:	d8f6      	bhi.n	8008c20 <_printf_i+0x28>
 8008c32:	a101      	add	r1, pc, #4	; (adr r1, 8008c38 <_printf_i+0x40>)
 8008c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008c21 	.word	0x08008c21
 8008c44:	08008c21 	.word	0x08008c21
 8008c48:	08008c21 	.word	0x08008c21
 8008c4c:	08008c21 	.word	0x08008c21
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008c21 	.word	0x08008c21
 8008c58:	08008c21 	.word	0x08008c21
 8008c5c:	08008c21 	.word	0x08008c21
 8008c60:	08008c21 	.word	0x08008c21
 8008c64:	08008da9 	.word	0x08008da9
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008d63 	.word	0x08008d63
 8008c70:	08008c21 	.word	0x08008c21
 8008c74:	08008c21 	.word	0x08008c21
 8008c78:	08008dcb 	.word	0x08008dcb
 8008c7c:	08008c21 	.word	0x08008c21
 8008c80:	08008cd1 	.word	0x08008cd1
 8008c84:	08008c21 	.word	0x08008c21
 8008c88:	08008c21 	.word	0x08008c21
 8008c8c:	08008d6b 	.word	0x08008d6b
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	602a      	str	r2, [r5, #0]
 8008c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e09f      	b.n	8008de4 <_printf_i+0x1ec>
 8008ca4:	6820      	ldr	r0, [r4, #0]
 8008ca6:	682b      	ldr	r3, [r5, #0]
 8008ca8:	0607      	lsls	r7, r0, #24
 8008caa:	f103 0104 	add.w	r1, r3, #4
 8008cae:	6029      	str	r1, [r5, #0]
 8008cb0:	d501      	bpl.n	8008cb6 <_printf_i+0xbe>
 8008cb2:	681e      	ldr	r6, [r3, #0]
 8008cb4:	e003      	b.n	8008cbe <_printf_i+0xc6>
 8008cb6:	0646      	lsls	r6, r0, #25
 8008cb8:	d5fb      	bpl.n	8008cb2 <_printf_i+0xba>
 8008cba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	da03      	bge.n	8008cca <_printf_i+0xd2>
 8008cc2:	232d      	movs	r3, #45	; 0x2d
 8008cc4:	4276      	negs	r6, r6
 8008cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cca:	485a      	ldr	r0, [pc, #360]	; (8008e34 <_printf_i+0x23c>)
 8008ccc:	230a      	movs	r3, #10
 8008cce:	e012      	b.n	8008cf6 <_printf_i+0xfe>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	6029      	str	r1, [r5, #0]
 8008cd8:	0605      	lsls	r5, r0, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xe8>
 8008cdc:	681e      	ldr	r6, [r3, #0]
 8008cde:	e002      	b.n	8008ce6 <_printf_i+0xee>
 8008ce0:	0641      	lsls	r1, r0, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xe4>
 8008ce4:	881e      	ldrh	r6, [r3, #0]
 8008ce6:	4853      	ldr	r0, [pc, #332]	; (8008e34 <_printf_i+0x23c>)
 8008ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8008cea:	bf0c      	ite	eq
 8008cec:	2308      	moveq	r3, #8
 8008cee:	230a      	movne	r3, #10
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf6:	6865      	ldr	r5, [r4, #4]
 8008cf8:	60a5      	str	r5, [r4, #8]
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	bfa2      	ittt	ge
 8008cfe:	6821      	ldrge	r1, [r4, #0]
 8008d00:	f021 0104 	bicge.w	r1, r1, #4
 8008d04:	6021      	strge	r1, [r4, #0]
 8008d06:	b90e      	cbnz	r6, 8008d0c <_printf_i+0x114>
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d04b      	beq.n	8008da4 <_printf_i+0x1ac>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d12:	fb03 6711 	mls	r7, r3, r1, r6
 8008d16:	5dc7      	ldrb	r7, [r0, r7]
 8008d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d1c:	4637      	mov	r7, r6
 8008d1e:	42bb      	cmp	r3, r7
 8008d20:	460e      	mov	r6, r1
 8008d22:	d9f4      	bls.n	8008d0e <_printf_i+0x116>
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d10b      	bne.n	8008d40 <_printf_i+0x148>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	07de      	lsls	r6, r3, #31
 8008d2c:	d508      	bpl.n	8008d40 <_printf_i+0x148>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	6861      	ldr	r1, [r4, #4]
 8008d32:	4299      	cmp	r1, r3
 8008d34:	bfde      	ittt	le
 8008d36:	2330      	movle	r3, #48	; 0x30
 8008d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d40:	1b52      	subs	r2, r2, r5
 8008d42:	6122      	str	r2, [r4, #16]
 8008d44:	f8cd a000 	str.w	sl, [sp]
 8008d48:	464b      	mov	r3, r9
 8008d4a:	aa03      	add	r2, sp, #12
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7ff fee4 	bl	8008b1c <_printf_common>
 8008d54:	3001      	adds	r0, #1
 8008d56:	d14a      	bne.n	8008dee <_printf_i+0x1f6>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	b004      	add	sp, #16
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	f043 0320 	orr.w	r3, r3, #32
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	4833      	ldr	r0, [pc, #204]	; (8008e38 <_printf_i+0x240>)
 8008d6c:	2778      	movs	r7, #120	; 0x78
 8008d6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	6829      	ldr	r1, [r5, #0]
 8008d76:	061f      	lsls	r7, r3, #24
 8008d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d7c:	d402      	bmi.n	8008d84 <_printf_i+0x18c>
 8008d7e:	065f      	lsls	r7, r3, #25
 8008d80:	bf48      	it	mi
 8008d82:	b2b6      	uxthmi	r6, r6
 8008d84:	07df      	lsls	r7, r3, #31
 8008d86:	bf48      	it	mi
 8008d88:	f043 0320 	orrmi.w	r3, r3, #32
 8008d8c:	6029      	str	r1, [r5, #0]
 8008d8e:	bf48      	it	mi
 8008d90:	6023      	strmi	r3, [r4, #0]
 8008d92:	b91e      	cbnz	r6, 8008d9c <_printf_i+0x1a4>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	f023 0320 	bic.w	r3, r3, #32
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	e7a7      	b.n	8008cf0 <_printf_i+0xf8>
 8008da0:	4824      	ldr	r0, [pc, #144]	; (8008e34 <_printf_i+0x23c>)
 8008da2:	e7e4      	b.n	8008d6e <_printf_i+0x176>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bd      	b.n	8008d24 <_printf_i+0x12c>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1c4>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1ca>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c0>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7bc      	b.n	8008d44 <_printf_i+0x14c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa6a 	bl	80002b0 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1ea>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7aa      	b.n	8008d44 <_printf_i+0x14c>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ad      	beq.n	8008d58 <_printf_i+0x160>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x232>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a6      	b.n	8008d5c <_printf_i+0x164>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09d      	beq.n	8008d58 <_printf_i+0x160>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x216>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x20a>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x226>
 8008e32:	bf00      	nop
 8008e34:	08009555 	.word	0x08009555
 8008e38:	08009566 	.word	0x08009566

08008e3c <memmove>:
 8008e3c:	4288      	cmp	r0, r1
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	eb01 0402 	add.w	r4, r1, r2
 8008e44:	d902      	bls.n	8008e4c <memmove+0x10>
 8008e46:	4284      	cmp	r4, r0
 8008e48:	4623      	mov	r3, r4
 8008e4a:	d807      	bhi.n	8008e5c <memmove+0x20>
 8008e4c:	1e43      	subs	r3, r0, #1
 8008e4e:	42a1      	cmp	r1, r4
 8008e50:	d008      	beq.n	8008e64 <memmove+0x28>
 8008e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5a:	e7f8      	b.n	8008e4e <memmove+0x12>
 8008e5c:	4402      	add	r2, r0
 8008e5e:	4601      	mov	r1, r0
 8008e60:	428a      	cmp	r2, r1
 8008e62:	d100      	bne.n	8008e66 <memmove+0x2a>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6e:	e7f7      	b.n	8008e60 <memmove+0x24>

08008e70 <_realloc_r>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	4680      	mov	r8, r0
 8008e76:	4614      	mov	r4, r2
 8008e78:	460e      	mov	r6, r1
 8008e7a:	b921      	cbnz	r1, 8008e86 <_realloc_r+0x16>
 8008e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	4611      	mov	r1, r2
 8008e82:	f7ff bb59 	b.w	8008538 <_malloc_r>
 8008e86:	b92a      	cbnz	r2, 8008e94 <_realloc_r+0x24>
 8008e88:	f7ff fca4 	bl	80087d4 <_free_r>
 8008e8c:	4625      	mov	r5, r4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e94:	f000 f81b 	bl	8008ece <_malloc_usable_size_r>
 8008e98:	4284      	cmp	r4, r0
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	d802      	bhi.n	8008ea4 <_realloc_r+0x34>
 8008e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ea2:	d812      	bhi.n	8008eca <_realloc_r+0x5a>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f7ff fb46 	bl	8008538 <_malloc_r>
 8008eac:	4605      	mov	r5, r0
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d0ed      	beq.n	8008e8e <_realloc_r+0x1e>
 8008eb2:	42bc      	cmp	r4, r7
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	bf28      	it	cs
 8008eba:	463a      	movcs	r2, r7
 8008ebc:	f7ff fc7c 	bl	80087b8 <memcpy>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	f7ff fc86 	bl	80087d4 <_free_r>
 8008ec8:	e7e1      	b.n	8008e8e <_realloc_r+0x1e>
 8008eca:	4635      	mov	r5, r6
 8008ecc:	e7df      	b.n	8008e8e <_realloc_r+0x1e>

08008ece <_malloc_usable_size_r>:
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	1f18      	subs	r0, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbc      	itt	lt
 8008ed8:	580b      	ldrlt	r3, [r1, r0]
 8008eda:	18c0      	addlt	r0, r0, r3
 8008edc:	4770      	bx	lr
	...

08008ee0 <_getpid>:
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <_getpid+0xc>)
 8008ee2:	2258      	movs	r2, #88	; 0x58
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	4770      	bx	lr
 8008eec:	200005f0 	.word	0x200005f0

08008ef0 <_kill>:
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <_kill+0xc>)
 8008ef2:	2258      	movs	r2, #88	; 0x58
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8008efa:	4770      	bx	lr
 8008efc:	200005f0 	.word	0x200005f0

08008f00 <_sbrk>:
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <_sbrk+0x14>)
 8008f02:	6811      	ldr	r1, [r2, #0]
 8008f04:	4603      	mov	r3, r0
 8008f06:	b909      	cbnz	r1, 8008f0c <_sbrk+0xc>
 8008f08:	4903      	ldr	r1, [pc, #12]	; (8008f18 <_sbrk+0x18>)
 8008f0a:	6011      	str	r1, [r2, #0]
 8008f0c:	6810      	ldr	r0, [r2, #0]
 8008f0e:	4403      	add	r3, r0
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	4770      	bx	lr
 8008f14:	200005f8 	.word	0x200005f8
 8008f18:	20000600 	.word	0x20000600

08008f1c <_exit>:
 8008f1c:	e7fe      	b.n	8008f1c <_exit>
	...

08008f20 <_init>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

08008f2c <_fini>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr
